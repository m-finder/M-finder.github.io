<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023 年计划清单</title>
      <link href="/2023/04/26/2023-to-do-list/"/>
      <url>/2023/04/26/2023-to-do-list/</url>
      
        <content type="html"><![CDATA[<ul><li><input disabled="" type="checkbox"> 继续减肥</li><li><input disabled="" type="checkbox"> 装修&amp;办小红本</li><li><input disabled="" type="checkbox"> 下半年软考-系统架构设计师 ，8月中上旬报名，11月下旬考试</li></ul><blockquote><p>我倒要看看这个证我能考几年</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
          <category> 计划清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
            <tag> 计划清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向我的小电驴致敬</title>
      <link href="/2022/12/12/2022-12-12-for-my-yadea/"/>
      <url>/2022/12/12/2022-12-12-for-my-yadea/</url>
      
        <content type="html"><![CDATA[<p>最近天冷了，骑车上下班又多了些痛苦。</p><p>每年的这个时候，我都会出现一些对小电驴命运的担忧，它还能陪我多久呢？即使它才买了两年，但也已经伤痕累累。</p><p>截止到今天，我一共丢了两个头盔，都是因为放在车筐然后被人拿走；摔倒三次，都是因为刹车太急导致侧翻；后座的两个脚踏板都有破损，大概率是被停在旁边的车子剐蹭；前轮右侧反光条破碎，大概率同上；左闸轻微磨损，因第二次摔车路面剐蹭；右闸螺丝帽丢失，原因未知；后轮轮毂右侧轻微变形，原因未知；座桶右侧皮套破损，因台风天倒地被旁边车子刮破；后轮轻微漏气，因为我有段时间经常带人……</p><p>每一处损伤都是小电驴的勋章，但也做实了我的不负责任，我是个渣男吧。</p><p>我总会想如果哪天我决定要离开上海，那我是该怎么处理它，低价处理掉还是找个物流公司给运回去？</p><p>运回去成本有点高，而且连续两年的高强度工作也让我略感担忧：廉颇老矣，尚能饭否？低价卖掉又觉得有点可惜，这家伙明明就性能强悍，充一次电就能驮我跑个 60 公里，如果当初能对它细心点，肯定也不至于这样……</p><p>想来想去又都没有结果。</p><p>嗐，贱人就是矫情。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Fucked 2022</title>
      <link href="/2022/11/30/at-the-end-of-2022/"/>
      <url>/2022/11/30/at-the-end-of-2022/</url>
      
        <content type="html"><![CDATA[<p>为了应对拖延，2022 年 11 月 25 日，我打开了编辑器，准备提前开写年终总结，然后在当天午休过后，突然接到物业通知让我们赶快回家，因为隔壁公司阳了。</p><p>晚上十点，同事说接到电话被判了密接，半个小时后开始转移。十一点二十，住同区的同事说也接到了电话，于是我起床收拾了行李。十分钟后电话响了，通知我等待转移，但是房源紧张需要申请，让我先休息，保持电话畅通。</p><p>挂了电话，不安开始涌了上来。躺下，睡不着，起来，又无事可做。</p><p>最后只好和衣躺在床上，在公司群里聊天到4点半，期间不停有人上车被拉到方舱，</p><p>迷迷糊糊睡到 7 点，被居委电话吵醒，通知我房源还没下来，继续居家，尽量不要和室友接触。</p><p>10 点，居委再次来电重申上述信息。</p><p>9 点，12 点，均再次接到居委电话重申上述信息。</p><p>下午 4 点，接到转运车电话，让我在小区门口等他。那一刻，我惊奇的发现自己放松了下来，遂电话居委告知情况，居委让我跟楼下特勤打声招呼，直接去小区门口等车即可。几分钟后，一辆大巴开到门口，司机穿着防护服，车上其他几个人只是带着口罩，除此以外没有其他防护措施。我心说这跟其他同事不一样啊？看我在车门口犹豫，摆手让我上车，然后又开始四处接人，悬着的心放下之后我是丝毫提不起精神，直接歪脖呼呼睡觉，再次醒来已经晚上 7 点，到达了方舱门口。</p><p>几分钟后，进入方舱，开始正式的隔离生活。</p><p>每天吃饱就睡，睡醒就吃，像猪一样的生活。怎么说呢，抛开简陋的环境不谈，过的还算挺快。</p><p>作为一个普通个体，我着实改变不了什么，也丝毫不想去做些什么。写下这个过程也只是为了记录一下我平淡生活里为数不多的一丝丝涟漪。只希望这个狗日的疫情能早点结束，恢复正常的生活状态。</p><p>love &amp;&amp; peace，fuck &amp;&amp; crazy.</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念</title>
      <link href="/2022/05/13/2022-05-13/"/>
      <url>/2022/05/13/2022-05-13/</url>
      
        <content type="html"><![CDATA[<p>今天周五，白天躺在床上<del>干活</del>（摸鱼）时掰手指算了一下，今天应该是被封控在家的第 49 天。</p><p>未来还要继续封多久？这个我也不知道。可能快解放了吧。</p><p>我已经脱下了冬装换上了短袖，从 150 瘦到了 140，被我拎回家的电瓶已经充了第三次电，窗外的景色也从光秃秃变成了郁郁葱葱，枇杷都熟了。今天冒雨去核酸时，还因为看枇杷一脚踩进水坑，淦！</p><p>封了这么久，多少是有点麻了，想起来刚开始每天早起收拾的利利索索，楼下一喊就核酸就光速下楼，现在每天能多躺会儿就绝对不会早起，蓬头垢面、邋里邋遢，心情好了可能才洗个头再下去。也没去记核酸了多少次，反正家里做抗原的盒子被我码的整整齐齐，也有一大堆了。本来想等快递通了搞点热熔胶，粘几个小摆件玩，那不是挺有纪念价值嘛。但是……上次拍照发群里被同事喷，说我攒了一堆的大鼻涕，再看总觉得有点恶心🤢。</p><p>头发也长了，天天扎个小啾啾，感觉自己还挺好看。要不就留长发吧，解封了去修一修，或者干脆就修也不修，省下一笔又一笔不菲的理发钱，真开心，又可以多喝两罐啤酒。</p><p>我迟早会做个扎辫子的程序员，左手键盘，右手鼠标，就像个艺术家。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书单</title>
      <link href="/2022/01/04/books/"/>
      <url>/2022/01/04/books/</url>
      
        <content type="html"><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> 龙族</li><li><input checked="" disabled="" type="checkbox"> 一句顶一万句</li><li><input checked="" disabled="" type="checkbox"> 血腥的盛唐</li><li><input checked="" disabled="" type="checkbox"> 1942:河南大饥荒</li><li><input checked="" disabled="" type="checkbox"> redis 入门指南第二版</li><li><input checked="" disabled="" type="checkbox"> 深入设计模式</li><li><input checked="" disabled="" type="checkbox"> 系统架构设计师教程</li><li><input checked="" disabled="" type="checkbox"> 宫女谈往录</li><li><input checked="" disabled="" type="checkbox"> 我的前半生</li><li><input checked="" disabled="" type="checkbox"> 法医宋慈</li><li><input checked="" disabled="" type="checkbox"> 白鹿原</li><li><input checked="" disabled="" type="checkbox"> 中国异闻录</li><li><input disabled="" type="checkbox"> 万历十五年</li><li><input checked="" disabled="" type="checkbox"> 叫魂：1768年中国妖术大恐慌</li><li><input checked="" disabled="" type="checkbox"> 现代管理信息系统</li><li><input checked="" disabled="" type="checkbox"> 沙海</li><li><input checked="" disabled="" type="checkbox"> 怒江之战</li><li><input checked="" disabled="" type="checkbox"> 蜗居</li><li><input disabled="" type="checkbox"> 地铁三部曲</li><li><input checked="" disabled="" type="checkbox"> 中国，少了一味药</li><li><input disabled="" type="checkbox"> 被讨厌的勇气</li><li><input checked="" disabled="" type="checkbox"> 十方异事录</li></ul><p><del>看看能不能把豆瓣书单拉过来……</del></p><p><del>难搞，折腾半天现在直接不会发布了😭</del></p><p>已重新配置部署脚本，现切换到豆瓣书单，以后不再更新。</p>]]></content>
      
      
      <categories>
          
          <category> 书单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年计划清单</title>
      <link href="/2022/01/01/2022-to-do-list/"/>
      <url>/2022/01/01/2022-to-do-list/</url>
      
        <content type="html"><![CDATA[<ul><li><input checked="" disabled="" type="checkbox"> 减肥</li><li><input checked="" disabled="" type="checkbox"> 上半年软考-系统分析师，2月中旬报名，5月下旬考试</li><li><input checked="" disabled="" type="checkbox"> 下半年软考-系统架构设计师 ，8月中上旬报名，11月下旬考试</li></ul><p>没有其他了。 </p><p>– 2021-12-31</p><p>2022-08-06<br>已经瘦了差不多20斤吧，还在继续努力<br>系分的软考g了，因为疫情一直拖，直到昨天看到公告说取消了<br>开始冲刺下半年架构，干巴得💪</p><p>2022-11-05<br>多次报名初次参考，可惜论文写的有点惨不忍睹，只能明年再接再厉。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
          <category> 计划清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
            <tag> 计划清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 系列 - 1</title>
      <link href="/2021/07/19/redis-learning-1/"/>
      <url>/2021/07/19/redis-learning-1/</url>
      
        <content type="html"><![CDATA[<h4 id="一-什么是-redis"><a href="#一-什么是-redis" class="headerlink" title="一. 什么是 redis"></a>一. 什么是 redis</h4><p>redis 全称 remote dictionary service，即远程字典服务，是一个基于内存且支持持久化的高性能 key-value 数据库。</p><h4 id="redis-优点"><a href="#redis-优点" class="headerlink" title="redis 优点"></a>redis 优点</h4><ol><li>读写速度快</li><li>支持持久化</li><li>支持事务</li><li>数据类型丰富</li><li>支持主从，读写分离</li><li>开源</li></ol><h4 id="二-redis-支持的数据类型"><a href="#二-redis-支持的数据类型" class="headerlink" title="二. redis 支持的数据类型"></a>二. redis 支持的数据类型</h4><p>redis 一共 5 种数据类型：</p><ol><li>字符串：string</li><li>散列：hash</li><li>列表：list</li><li>集合：set</li><li>有序集合：zset</li></ol><h5 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h5><p>string 是最简单的类型，能存储任何形式的字符串，支持<code>字符串</code>，<code>浮点数</code>，<code>整数</code>。</p><p>一个字符串类型键允许存储的数据的最大容量为 512 MB。</p><ol><li>设置值：set key value</li><li>获取值：get key（字符串回复）</li><li>删除值：del key</li><li>自增：incr key（整数回复）</li><li>自减：decr key</li><li>按值自增：incrby key value</li><li>按值自减：decryby key value</li><li>批量设置：mset key val key1 val1</li><li>批量获取：mget key key1</li></ol><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><ul><li>用户 session</li><li>统计计数器</li></ul><h5 id="hash-散列"><a href="#hash-散列" class="headerlink" title="hash 散列"></a>hash 散列</h5><p>hash 可以存储多个键值对之间的映射，可以方便的对同类数据进行归类整合存储。</p><p>值的类型同字符串，也可以进行自增操作。</p><ol><li>设置值：hset user:1 name wu</li><li>获取值：hget user:1 age</li><li>按值自增：hincrbr user:1 age 2</li><li>获取所有：hgetall user:1</li><li>批量获取：hmget user:1 name age</li><li>批量设置：hmset user:2 name xu age 18</li><li>删除一个：hdel user:1 age</li><li>删除全部：del user</li><li>字段是否存在：hexists user:1 name</li><li>不存在则设值：hsetnx user:1 lock（并发锁）</li><li>只取字段名：hkeys key </li><li>只取value：hvals key</li><li>数据长度：hlen key</li></ol><h6 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>购物车</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hset cart:1001 10091 1  // 用户 1001 添加商品 10091 1件</span><br><span class="line">hset cart:1001 10021 2  // 用户 1001 添加商品 10021 2件</span><br><span class="line">hincrby cart:1001 10091 1 // 增加商品</span><br><span class="line">hlen cart:1001  // 获取商品总数</span><br><span class="line">hdel cart:1001 10091 // 删除商品</span><br><span class="line">hgetall cart:1001</span><br></pre></td></tr></table></figure><h5 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h5><p>字符串的无序集合，每个字符串都是唯一的。可以方便的对数据进行交集、并集、差集等操作。</p><ol><li>设置值：sadd key value，values…</li><li>获取所有元素：smembers key</li><li>移除元素：srem key value，values…</li><li>是否在集合：sismember key value</li><li>集合差：sdiff key</li><li>交集：sinter key</li><li>并集：sunion key</li><li>数据个数：scard key</li><li>随机获取：srandmember key</li><li>随机弹出：spop key</li></ol><h6 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h6><ol><li>好友/关注/粉丝/感兴趣的人集合</li><li>随机展示数据</li><li>黑白名单</li><li>文章标签</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sadd post:1:tags php redis</span><br><span class="line">    </span><br><span class="line">smembers post:1:tags</span><br></pre></td></tr></table></figure><h5 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h5><p>列表类型可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，活着获得列表的某一个片段。</p><p>列表内部是使用双向链表实现的，所以向列表两端添加元素的时间复杂度为 O(1)，这意味着即使是千万数据，获取头部或尾部的 10 条记录和从 20 条数据取出 10 条记录的速度是一样的。</p><p>但是通过索引访问元素会比较慢。</p><ol><li>添加数据：lpush key value values…，rpush key value values…</li><li>取出数据：lpop key，rpop key</li><li>获取片段：lrange key start stop，lrange key -2 -1 // -1 表示最右边一个，-2 表示右边第二个</li><li>数据长度：llen key</li><li>删除前 count 个指定值元素：lrem key count value</li><li>获取指定索引：lindex key index</li><li>索引赋值：lset key index value</li><li>只保留片段：ltrim key start stop</li><li>插入元素：linsert key BEFORE|AFTER pivot emelemt</li></ol><h6 id="使用场景：-2"><a href="#使用场景：-2" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>文章存储</li><li>队列</li><li>新鲜事、日志等很少访问中间元素的应用</li></ul><h5 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset 有序集合"></a>zset 有序集合</h5><p>有序集合类型是使用散列表和跳跃表实现的，所以即使读取位于中间部分的数据速度也很快。但是有序集合笔列表类型更耗费内存。</p><ol><li>添加数据：zadd fraction 90 wu</li><li>获取数据：zscore fraction wu</li><li>修改数据：zadd fraction 99 wu</li><li>倒序取出：zrange fraction 0 3</li><li>正序取出：zrevrange fraction 0 3</li><li>取出范围：zrangebyscore fraction 80 100 // 不包括100 (100</li><li>增加：zincrby fraction 2 wu</li><li>获取元素个数：zcard fraction</li><li>指定范围内的元素个数：zcount fraction 80 100</li><li>移除元素：zrem fraction wu</li><li>按范围移除元素：zremrangebyrank fraction 80 100</li></ol><h6 id="使用场景：-3"><a href="#使用场景：-3" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>排行榜</li><li>跳表数据结构</li></ul><h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><p>所有键名：keys *<br>是否存在：exists key<br>获取类型：type key<br>单个删除：del key<br>全部清空：flushall<br>字符长度：strlen key<br>追加 value：append key value</p><h4 id="三-相关知识"><a href="#三-相关知识" class="headerlink" title="三. 相关知识"></a>三. 相关知识</h4><p>缓存穿透：是指查询了一个不存在的数据，缓存层不会命中，存储层也不会命中，导致每次查询都要去请求存储层，失去了缓存保护后端存储的意义。解决：存储层不命中以后，仍将空值缓存，但是设置一个较短的过期时间。</p><p>缓存击穿：热点 Key，大量并发读请求引起的小雪崩， 就是缓存在某个时间点过期的时候，恰好在这个时间点对这个 Key 有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。解决：根据热点 key 设置永不过期；并发锁。</p><p>缓存雪崩：缓存设置同一过期时间，引发的大量的读取数据库操作。解决：分散过期时间，设置过期时间时加上一个随机数字；设置永不过期，数据库更新时同步缓存。</p><h5 id="是单线程还是多线程"><a href="#是单线程还是多线程" class="headerlink" title="是单线程还是多线程"></a>是单线程还是多线程</h5><p>首先，不管说 redis 是单线程还是多线程都是不对的，因为要从不同的方面考虑。</p><p>5.x 以前是单线程，但是这个单线程并不是说 redis 本身只有一个线程，而是说它在业务处理时是单线程的。</p><p>6.x 以后，redis 在业务处理时，读取命令和处理命令分别由不同的线程处理，串行变成了并行，性能得到提升。</p><p><img src="/images/redis-thread.png" alt="redis-thread"></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac m1 下安装 php7.4 ssh2 扩展</title>
      <link href="/2021/05/19/m1-php-ssh2/"/>
      <url>/2021/05/19/m1-php-ssh2/</url>
      
        <content type="html"><![CDATA[<p>项目里用到了 sftp，所以需要安装一下 ssh2。</p><p>安装过程有个报错，开始还以为是不兼容 m1，好在最后顺利安装。</p><p>记录一下，以免再次跳坑。</p><h4 id="安装-ssh"><a href="#安装-ssh" class="headerlink" title="安装 ssh"></a>安装 ssh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pech install ssh2-1.3</span><br></pre></td></tr></table></figure><p>安装过程中会询问 libssh2 的路径，默认会自动检测，然后，我的问题就来了：</p><blockquote><p>The required libssh2 library was not found</p></blockquote><p>首先排除一下 libssh2 有没有安装，没有安装的话执行 <code>brew install libssh2</code>，然后执行 <code>brew link libssh2</code> 查看其路径信息。</p><p><img src="/images/brew-link-libssh.png" alt="brew-link-libssh"></p><p>接下来，重新执行 <code>pecl install ssh2-1.3</code>，命令行询问路径时，将 <code>/opt/homebrew/Cellar/libssh2/1.9.0_1</code> 敲入回车即可。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos php7.4 安装记录</title>
      <link href="/2021/05/11/centos-php74/"/>
      <url>/2021/05/11/centos-php74/</url>
      
        <content type="html"><![CDATA[<p>最近记性不太好，做个记录，防止下次忘了。</p><p>若果有遗漏，之后再补充。</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update &amp;&amp; yum upgrade </span><br></pre></td></tr></table></figure><h4 id="安装-php7-4-的-yum-源"><a href="#安装-php7-4-的-yum-源" class="headerlink" title="安装 php7.4 的 yum 源"></a>安装 php7.4 的 yum 源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line"></span><br><span class="line">yum -y install yum-utils</span><br></pre></td></tr></table></figure><h4 id="安装-php-7-4"><a href="#安装-php-7-4" class="headerlink" title="安装 php 7.4"></a>安装 php 7.4</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --enable remi-php74</span><br><span class="line">yum install php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json</span><br></pre></td></tr></table></figure><h4 id="安装新版-mariadb"><a href="#安装新版-mariadb" class="headerlink" title="安装新版 mariadb"></a>安装新版 mariadb</h4><p>先加个源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mariadb.repo</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = https://mirrors.tuna.tsinghua.edu.cn/mariadb/yum/10.5/centos7-amd64/</span><br><span class="line">gpgkey =  https://mirrors.tuna.tsinghua.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure><p>安装服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line">yum install mariadb-server</span><br></pre></td></tr></table></figure><p>初始化密码：</p><blockquote><p>敲回车的时候注意别把用户远程登录给禁了！！！</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl start php</span><br><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 导入 excel 报错排查记录</title>
      <link href="/2021/04/21/laravel-excel-import-bug/"/>
      <url>/2021/04/21/laravel-excel-import-bug/</url>
      
        <content type="html"><![CDATA[<p>今天公司项目导入 excel 时突遇一个报错：<code>Undefined index: Sheet1</code>，一下给我整懵逼了，一通排查，发现是因为执行过 composer update，把一个包升级到了最高，然后，它就不能用了。</p><p>看官方 issues 说：</p><blockquote><p>This is a known bug in PhpSpreadsheet PHPOffice/PhpSpreadsheet#1895. Until they release a new version, you have to lock the phpspreadsheet version to 1.16</p></blockquote><p>啥意思呢，翻译一下吧：<br>这是PhpSpreadsheet PHPOffice / PhpSpreadsheet＃1895中的一个已知错误。在他们发布新版本之前，您必须将phpspreadsheet版本锁定为1.16</p><p>版本太高有时候也不是个好事呀！</p><p><a href="https://github.com/Maatwebsite/Laravel-Excel/issues/3057">issuse</a></p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句话看懂集群、微服务和分布式的区别</title>
      <link href="/2021/04/13/distributed-system/"/>
      <url>/2021/04/13/distributed-system/</url>
      
        <content type="html"><![CDATA[<p>一个完整的服务拆分成多个微小的服务，就是微服务。</p><p>每个服务不止一个就是集群。</p><p>微服务部署在多台服务器上，服务器之间可以相互通信就是分布式。</p><p>微服务与分布式的细微差别是微服务可以部署在一台服务器，也可以部署在多台服务器。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 码不能停 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年，留下你的键帽吧！</title>
      <link href="/2021/04/08/keyboard/"/>
      <url>/2021/04/08/keyboard/</url>
      
        <content type="html"><![CDATA[<p>今天干了一件有点伤感，但是挺有意思的事情。虽然是个流水账，但是我觉得有必要记录一下。</p><p>我跟要离职的 <a href="https://alon.wang/">阿龙同学</a> 换了一个键帽。</p><p>我想，如果把这个做法一直延续下去，每离职一个关系不错的小伙伴就相互交换一个键帽，那最后这把键盘也就非常有意义了，对吧。</p><p><img src="/images/page-wodn-long.jpeg" alt="page-down"></p><p>😓看我这油光铮亮的空格……</p><p>网络一线牵，珍惜这段缘。</p><p>祝愿阿龙的工作越来越好！</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 表格测试</title>
      <link href="/2021/03/28/table-test/"/>
      <url>/2021/03/28/table-test/</url>
      
        <content type="html"><![CDATA[<p>发现之前写的一篇文章表格不显示，试试咋回事……</p><table><thead><tr><th align="left">排序方法</th><th align="left">平均情况</th><th align="left">最好情况</th><th align="left">最坏情况</th><th align="left">辅助空间</th><th align="left">稳定性</th></tr></thead><tbody><tr><td align="left">冒泡排序</td><td align="left">O(n²)</td><td align="left">O(nlogn)</td><td align="left">O(n²)</td><td align="left">O(1)</td><td align="left">稳定</td></tr><tr><td align="left">简单选择</td><td align="left">O(n²)</td><td align="left">O(n²)</td><td align="left">O(n²)</td><td align="left">O(1)</td><td align="left">稳定</td></tr><tr><td align="left">直接插入</td><td align="left">O(n²)</td><td align="left">O(n)</td><td align="left">O(n²)</td><td align="left">O(1)</td><td align="left">稳定</td></tr><tr><td align="left">希尔排序</td><td align="left">O(nlogn)~O(n²)</td><td align="left">O(n^1.3)</td><td align="left">O(n²)</td><td align="left">O(1)</td><td align="left">不稳定</td></tr><tr><td align="left">堆排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(1)</td><td align="left">不稳定</td></tr><tr><td align="left">归并排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(n)</td><td align="left">不稳定</td></tr><tr><td align="left">快速排序</td><td align="left">O(nlogn)</td><td align="left">O(nlogn)</td><td align="left">O(n²)</td><td align="left">O(nlogn)~O(n)</td><td align="left">不稳定</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 测试区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 默认终端记住 ssh 密码</title>
      <link href="/2021/03/28/mac-terminal-ssh/"/>
      <url>/2021/03/28/mac-terminal-ssh/</url>
      
        <content type="html"><![CDATA[<p>前几天，在小伙伴的极力推荐下装了 iTerm2，用了几天，奈何与我八字不合，ssh 后 vi 模式错乱，各种修复无果，但是在自带终端却又正常，无奈只能切回。</p><p>iTerm2 用 sh 文件配置过 ssh 记住密码，在默认终端也是可以用的。</p><p>配置方式如下：</p><h4 id="新建-sh-脚本"><a href="#新建-sh-脚本" class="headerlink" title="新建 sh 脚本"></a>新建 sh 脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /usr/local/bin/terminal.sh</span><br></pre></td></tr></table></figure><p>然后放入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">set timeout 30</span><br><span class="line">set host [lindex $argv 0]</span><br><span class="line">set port [lindex $argv 1]</span><br><span class="line">set user [lindex $argv 2]</span><br><span class="line">set pswd [lindex $argv 3]</span><br><span class="line"></span><br><span class="line">spawn ssh -p $port $user@$host </span><br><span class="line"></span><br><span class="line">expect &#123;</span><br><span class="line">        &quot;(yes/no)?&quot;</span><br><span class="line">        &#123;send &quot;yes\n&quot;;exp_continue;&#125;</span><br><span class="line">          -re &quot;(p|P)ass(word|wd):&quot;</span><br><span class="line">        &#123;send &quot;$pswd\n&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p>再给下运行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/terminal.sh</span><br></pre></td></tr></table></figure><h4 id="配置-terminal"><a href="#配置-terminal" class="headerlink" title="配置 terminal"></a>配置 terminal</h4><p>打开终端，左上角选择偏好设置，然后，如下图：<br><img src="/images/add_shell.jpg" alt="新建窗口"></p><p><img src="/images/terminal_sh.png" alt="添加脚本"></p><p>复制以下内容，注意把 host 和账号密码替换成自己的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/terminal.sh 127.0.0.1 22 root rootpassword</span><br></pre></td></tr></table></figure><p>最后，打开终端，左上角选择 shell -&gt; 新建窗口，然后选择目标窗口即可自动登录。</p><p><img src="/images/select_terminall.png" alt="新建窗口"></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mweb hexo 设置</title>
      <link href="/2021/03/26/mweb-hexo-setting/"/>
      <url>/2021/03/26/mweb-hexo-setting/</url>
      
        <content type="html"><![CDATA[<p>hexo 借助图片插件可以在 post 目录建立跟文章文件的同名文件夹来保存图片，之前也一直都是这么做的，但是在 mweb 上预览时图片不显示，经过一番折腾，反正总会有一番折腾，而且也少不了一番折腾以后，弄好了。</p><p>现在将折腾的经过记下来留档。</p><p>首先，用 mweb 的外部模式打开 hexo 下的 source 目录，然后右键目录，选择编辑，具体配置如下图，如果没有配置图床可以不用理它，我配完也没理它，为啥呢，因为慢。</p><p><img src="/images/mweb-images.png" alt="图片路径"></p><p>把 hexo 的配置文件中：<code>post_asset_folder</code> 改为 <code>false</code>。</p><p>下一步，把你花花哨哨的图片放到 source/images 目录即可，新增图片时用 mweb 的图片工具添加，会自动保存到文件夹内，并且会自动添加 mackdown 格式的图片到文档内。</p><p>然后，就没了。</p><p>哦，可能需要执行一下这个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>这次真的没了。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php ziparchive addfile return false</title>
      <link href="/2021/03/25/php-zip-addfile/"/>
      <url>/2021/03/25/php-zip-addfile/</url>
      
        <content type="html"><![CDATA[<p>有个文件，存储了两条准备用于给文件重命名的字符串和文件路径的数据，每行一条，名称和字符串以 <code>,</code> 间隔。</p><p>然后问题来了，通过读文件取出数据，然后获取文件路径并打包时，<code>ZipArchive</code> 的 <code>addFile</code> 总会有一个 <code>false</code>。</p><p>折腾半天，最后发现还是因为粗心大意，没过滤行尾的换行符……</p><p>一声叹息，掏出小本本默默记上一笔。</p><p>最后附上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$txt_file</span> = <span class="string">&#x27;./zip.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$zip</span> = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$fileName</span> = <span class="string">&#x27;./res.zip&#x27;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&#x27;/opt/homebrew/var/www/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$fileName</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$fileName</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$fileName</span>, <span class="title class_">ZipArchive</span>::<span class="variable constant_">CREATE</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;文件读取失败&#x27;</span>, PHP_EOL;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$handler</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$txt_file</span>, <span class="string">&#x27;r&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$info</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$handler</span>)) &#123;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$info</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$arr</span>[<span class="number">1</span>])))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">addFile</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$path</span>.<span class="variable">$arr</span>[<span class="number">1</span>]), <span class="variable">$arr</span>[<span class="number">0</span>].<span class="string">&#x27;.img&#x27;</span>) ? <span class="string">&#x27;ok&#x27;</span> : <span class="string">&#x27;false&#x27;</span>, PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$zip</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handler</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/res.png" alt="res"></p><blockquote><p>所以，不要怀疑，只要 addfile 返回了 false，肯定是路径有问题或者文件不存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 门面模式</title>
      <link href="/2021/03/21/design-pattern-facade/"/>
      <url>/2021/03/21/design-pattern-facade/</url>
      
        <content type="html"><![CDATA[<p>门面模式也叫外观模式，主要是为子系统中的一组接口提供一个一致的接口，facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>一个简单的🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subsystem <span class="variable">$subsystemA</span>;</span><br><span class="line">    <span class="keyword">private</span> Subsystem <span class="variable">$subsystemB</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Subsystem <span class="variable">$subsystemA</span>, Subsystem <span class="variable">$subsystemB</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subsystemA = <span class="variable">$subsystemA</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subsystemB = <span class="variable">$subsystemB</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subsystemARun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subsystemA-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subsystemBRun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subsystemB-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subsystem</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubsystemA</span> <span class="keyword">implements</span> <span class="title">Subsystem</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;子系统 A 运行&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubsystemB</span> <span class="keyword">implements</span> <span class="title">Subsystem</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;子系统 B 运行&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$subsystemA</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SubsystemA</span>();</span><br><span class="line"><span class="variable">$subsystemB</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SubsystemB</span>();</span><br><span class="line"><span class="variable">$facade</span> = <span class="keyword">new</span> <span class="title class_">Facade</span>(<span class="variable">$subsystemA</span>, <span class="variable">$subsystemB</span>);</span><br><span class="line"><span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">subsystemARun</span>();</span><br><span class="line"><span class="variable">$facade</span>-&gt;<span class="title function_ invoke__">subsystemBRun</span>();</span><br></pre></td></tr></table></figure><p>当需要为一个复杂子系统提供一个简单的接口时，门面模式非常适用。同时当需要构建一个层次结构的子系统时，门面模式也可以充当每层子系统的入口点，例如 MVC 框架。</p><p>这个模式跟在 laravel 框架中看的的还有所不同，在框架中，调用门面时，会通过魔术方法去调用背后真正的功能类方法，而且每个门面只负责一个独立的模块。相对来说，框架中的用法更符合单一职责。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 中介者模式</title>
      <link href="/2021/03/21/design-pattern-mediator/"/>
      <url>/2021/03/21/design-pattern-mediator/</url>
      
        <content type="html"><![CDATA[<p>最近太忙，拖更好多天，难受……</p><p>废话不多说，先来看看概念：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地互相引用，从而使其耦合松散，而且可以肚里地改变它们之间的交互。</p><p>也就相当于你租了个房子，但是房东常年旅居国外，有事情你也不需要找房东，因为房东把所有事情都委托给了中介。</p><p>令人羡慕的房东啊……</p><p>举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中介者模式</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MediatorInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$service</span>, <span class="keyword">string</span> <span class="variable">$message</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> <span class="keyword">implements</span> <span class="title">MediatorInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$service</span>, <span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$service</span>-&gt;<span class="title function_ invoke__">notify</span>(<span class="variable">$message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MediatorInterface <span class="variable">$mediator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Colleague <span class="variable">$colleague</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColleague</span>(<span class="params">Colleague <span class="variable">$colleague</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;colleague = <span class="variable">$colleague</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColleague</span>(<span class="params"></span>): <span class="title">Colleague</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;colleague;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMediator</span>(<span class="params">MediatorInterface <span class="variable">$mediator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mediator = <span class="variable">$mediator</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMediator</span>(<span class="params"></span>): <span class="title">MediatorInterface</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$message</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientA</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getMediator</span>()-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$this</span>, <span class="variable">$message</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getColleague</span>()), <span class="string">&#x27; 收到消息：&#x27;</span>,  <span class="variable">$message</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientB</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"><span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getMediator</span>()-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$this</span>, <span class="variable">$message</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getColleague</span>()), <span class="string">&#x27; 收到消息：&#x27;</span>, <span class="variable">$message</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mediator</span> = <span class="keyword">new</span> <span class="title class_">Mediator</span>();</span><br><span class="line"><span class="variable">$clientA</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ClientA</span>();</span><br><span class="line"><span class="variable">$clientB</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ClientB</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$clientA</span>-&gt;<span class="title function_ invoke__">setMediator</span>(<span class="variable">$mediator</span>);</span><br><span class="line"><span class="variable">$clientB</span>-&gt;<span class="title function_ invoke__">setMediator</span>(<span class="variable">$mediator</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$clientA</span>-&gt;<span class="title function_ invoke__">setColleague</span>(<span class="variable">$clientB</span>);</span><br><span class="line"><span class="variable">$clientB</span>-&gt;<span class="title function_ invoke__">setColleague</span>(<span class="variable">$clientA</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$clientA</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="string">&#x27;吃饭了没？&#x27;</span>);</span><br><span class="line"><span class="variable">$clientB</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="string">&#x27;没呢，要请客？&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个模式比较适用于通讯类产品，聊天啊、直播什么的，可以实现用户与用户之间的结偶，不需要让一个用户去维护所有管理的用户对象，但是同时也存在一些问题，比如当业务逻辑更加复杂时，中介类就会更加复杂和庞大，所以应用的同时也要考虑该如何取舍。</p><p>ok，以上就是终结者模式了，代码还是比较通透的。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 访问者模式</title>
      <link href="/2021/03/21/design-pattern-visitor/"/>
      <url>/2021/03/21/design-pattern-visitor/</url>
      
        <content type="html"><![CDATA[<p>这个模式就比较复杂，首先从概念来说，就是将对象的操作外包给其他对象，也就是访问者，从而实现在不改变个元素的前提下定义作用于这些元素的新操作。</p><p>当一个基类可以被访问，并具有名为 acceptVisitor 的公共方法，改方法接受参数 Visitor，然后根据传递 Visitor 对象调用公共方法 visit。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params"><span class="variable">$visitor</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Visitor <span class="variable">$visitor</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">acceptVisitor</span>(<span class="params">Visitor <span class="variable">$visitor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$visitor</span>-&gt;<span class="title function_ invoke__">visit</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params"><span class="variable">$visitor</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$visitor</span>-&gt;<span class="title function_ invoke__">getName</span>(), PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$element</span> = <span class="keyword">new</span> <span class="title class_">Element</span>(<span class="string">&#x27;wu&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$element</span>-&gt;<span class="title function_ invoke__">getName</span>(), PHP_EOL;</span><br><span class="line"><span class="variable">$element</span>-&gt;<span class="title function_ invoke__">acceptVisitor</span>(<span class="keyword">new</span> <span class="title class_">NameVisitor</span>());</span><br></pre></td></tr></table></figure><p>我们可以看到，通过调用 acceptVisitor 方法接收一个访问者，具体对象可以把访问者的getName 能力也扩展为自己能力。当然如果你需要多个扩展能力，你可以有多个访问者。而 acceptVisitor 方法调用访问者的visit 方法时，传入 $this 是为了能使用 Element 的属性和方法，使其感觉扩展完就是 Element 的真正一部分。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 状态模式</title>
      <link href="/2021/03/21/design-pattern-state/"/>
      <url>/2021/03/21/design-pattern-state/</url>
      
        <content type="html"><![CDATA[<p>通过改变类的状态来实现对它行为的切换。</p><p>看代码还是比较好理解的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateContext</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> State <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">State <span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">getState</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state-&gt;<span class="title function_ invoke__">handle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateOrder</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="string">&#x27;create&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;创建订单&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinishOrder</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="string">&#x27;finish&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;结束订单&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stateContext</span> = <span class="keyword">new</span> <span class="title class_">StateContext</span>();</span><br><span class="line"><span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">CreateOrder</span>());</span><br><span class="line"><span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">handle</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">getState</span>(), PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">setState</span>(<span class="keyword">new</span> <span class="title class_">FinishOrder</span>());</span><br><span class="line"><span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">handle</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stateContext</span>-&gt;<span class="title function_ invoke__">getState</span>(), PHP_EOL;</span><br></pre></td></tr></table></figure><p>将状态独立，然后在外部控制状态切换，已实现对其行为控制。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 备忘录模式</title>
      <link href="/2021/03/21/design-pattern-memento/"/>
      <url>/2021/03/21/design-pattern-memento/</url>
      
        <content type="html"><![CDATA[<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存该对象的内部状态。这样就可以方便的恢复到之前保存的状态。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$state</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable">$state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Memento <span class="variable">$memento</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$state</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMemento</span>(<span class="params">Memento <span class="variable">$memento</span></span>): <span class="title">Memento</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;memento = <span class="variable">$memento</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMemento</span>(<span class="params"></span>): <span class="title">Memento</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;state = <span class="variable language_">$this</span>-&gt;memento-&gt;<span class="title function_ invoke__">getState</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$state</span> = <span class="string">&#x27;new state&#x27;</span>;</span><br><span class="line"><span class="variable">$originator</span> = <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line"><span class="variable">$memento</span> = <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="string">&#x27;memento state&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$memento</span>-&gt;<span class="title function_ invoke__">getState</span>(), PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$originator</span>-&gt;<span class="title function_ invoke__">setMemento</span>(<span class="variable">$memento</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$originator</span>-&gt;<span class="title function_ invoke__">getState</span>(), PHP_EOL;</span><br></pre></td></tr></table></figure><p>好了，以上就是一个简易版的备忘录模式了，还是比较好理解的。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 命令行模式</title>
      <link href="/2021/03/21/design-pattern-command/"/>
      <url>/2021/03/21/design-pattern-command/</url>
      
        <content type="html"><![CDATA[<p>用过 laravel 框架的应该都知道，其脚本模块非常强大，这些脚本，也就是命令行模式。</p><p>说到命令行，就不得步提一下 cli 和 cgi 的区别，在 nginx 中，php 并不是直接执行的，而是通过 cgi 调用 php 并获取执行结果。</p><p>而 cli 就是命令行接口，主要用于 shell 脚本的开发。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">php command.php</span><br><span class="line">/opt/homebrew/var/www/design-pattern</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">php-cli command.php</span><br><span class="line">X-Powered-By: PHP/7.4.16</span><br><span class="line">Content-type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">/opt/homebrew/var/www/design-pattern</span><br></pre></td></tr></table></figure><p>不多说了，回头再专门看一下这方面的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 责任链模式</title>
      <link href="/2021/03/21/design-pattern-cor/"/>
      <url>/2021/03/21/design-pattern-cor/</url>
      
        <content type="html"><![CDATA[<p>建立一个对象链来按指定顺序处理调用。如果其中一个对象无法处理命令，它会委托这个调用给它的下一个对象来进行处理，以此类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ?Handler <span class="variable">$successor</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Handler <span class="variable">$handler</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;successor = <span class="variable">$handler</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpInNumeric</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Handler <span class="variable">$successor</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$successor</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$request</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;数字请求&#x27;</span>, PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;successor) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;successor-&gt;<span class="title function_ invoke__">handle</span>(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpInArray</span> <span class="keyword">extends</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;数组请求&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$handler</span> = <span class="keyword">new</span> <span class="title class_">HttpInNumeric</span>(<span class="keyword">new</span> <span class="title class_">HttpInArray</span>());</span><br><span class="line"><span class="variable">$handler</span>-&gt;<span class="title function_ invoke__">handle</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$handler</span>-&gt;<span class="title function_ invoke__">handle</span>([<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>还算简单，就是依次往下传递。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 迭代器模式</title>
      <link href="/2021/03/21/design-pattern-iterator/"/>
      <url>/2021/03/21/design-pattern-iterator/</url>
      
        <content type="html"><![CDATA[<p>提供一种方法顺序访问一个集合对象中的各种元素,而又不暴露该对象的内部表示。</p><p>foreach 的底层就是迭代器。很多编程语言都已经将其作为一个基础类库实现出来了，所以也就有了这个模式目前学习意义大于实际意义的说法。</p><p>在 php 中，内部已提供 Iterator 接口，可以直接使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bookshelf</span> <span class="keyword">implements</span> \<span class="title">Countable</span>, \<span class="title">Iterator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$books</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$current</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addBook</span>(<span class="params">Book <span class="variable">$book</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;books[] = <span class="variable">$book</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;books[<span class="variable language_">$this</span>-&gt;current];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;current++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;books[<span class="variable language_">$this</span>-&gt;current]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;current = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>): <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">count</span>(<span class="variable">$this</span>-&gt;books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$author</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$title</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$author</span>, <span class="keyword">string</span> <span class="variable">$title</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;author = <span class="variable">$author</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;title = <span class="variable">$title</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthor</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAuthorAndTitle</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAuthor</span>() . <span class="string">&#x27;-&#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getTitle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bookA</span> = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;wu&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="variable">$bookB</span> = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;wu&#x27;</span>, <span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$bookshelf</span> = <span class="keyword">new</span> <span class="title class_">Bookshelf</span>();</span><br><span class="line"><span class="variable">$bookshelf</span>-&gt;<span class="title function_ invoke__">addBook</span>(<span class="variable">$bookA</span>);</span><br><span class="line"><span class="variable">$bookshelf</span>-&gt;<span class="title function_ invoke__">addBook</span>(<span class="variable">$bookB</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$bookshelf</span> <span class="keyword">as</span> <span class="variable">$book</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getAuthorAndTitle</span>(), PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用起来还是比较简单的，至于如何实现就不写了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 观察者模式</title>
      <link href="/2021/03/21/design-pattern-observer/"/>
      <url>/2021/03/21/design-pattern-observer/</url>
      
        <content type="html"><![CDATA[<p>当对象的状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。它使用的是低耦合的方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeleteUserSubject</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">SplObjectStorage</span> <span class="variable">$observers</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers = <span class="keyword">new</span> <span class="title class_">\SplObjectStorage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span>(<span class="params"><span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span>(<span class="params"><span class="built_in">SplObserver</span> <span class="variable">$observer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;observers-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$observer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;observers <span class="keyword">as</span> <span class="variable">$observer</span>) &#123;</span><br><span class="line">            <span class="variable">$observer</span>-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;用户 &#x27;</span>, <span class="variable language_">$this</span>-&gt;name, <span class="string">&#x27; 被删除&#x27;</span>, PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;开始通知关联处理：&#x27;</span>, PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">notify</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserLogDeleteObserver</span> <span class="keyword">implements</span> \<span class="title">SplObserver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">SplSubject</span> <span class="variable">$subject</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="built_in">SplSubject</span> <span class="variable">$subject</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;subject = <span class="keyword">clone</span> <span class="variable">$subject</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">deleteUserLog</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteUserLog</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;删除用户&#x27;</span>, <span class="variable language_">$this</span>-&gt;subject-&gt;<span class="title function_ invoke__">getName</span>(),<span class="string">&#x27; 的日志&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$subject</span> = <span class="keyword">new</span> <span class="title class_">DeleteUserSubject</span>();</span><br><span class="line"><span class="variable">$subject</span>-&gt;<span class="title function_ invoke__">attach</span>(<span class="keyword">new</span> <span class="title class_">UserLogDeleteObserver</span>());</span><br><span class="line"><span class="variable">$subject</span>-&gt;<span class="title function_ invoke__">process</span>();</span><br></pre></td></tr></table></figure><p>这个模式代码稍微多一点，但是场景很经典，也很容易理解。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 模板方法模式</title>
      <link href="/2021/03/21/design-pattern-template-method/"/>
      <url>/2021/03/21/design-pattern-template-method/</url>
      
        <content type="html"><![CDATA[<p>这个模式是对继承的最好诠释。当子类有重复动作时，将其重复动作放入父类统一处理，这就是模板方法最简单通俗的解释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">baseMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;base method&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">operate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;user operate&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">UserController</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">baseMethod</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">operate</span>();</span><br></pre></td></tr></table></figure><p>这个模式太简单了，就不多说了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 策略模式</title>
      <link href="/2021/03/21/design-pattern-strategy/"/>
      <url>/2021/03/21/design-pattern-strategy/</url>
      
        <content type="html"><![CDATA[<p>定义一组算法，把它们一个个封装起来，并使它们能够快速切换。本模式使得算法可以独立于使用它的客户而变化。一般用于避免多重条件判断和在运行时进行更改。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithm</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmA</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;算法 A&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlgorithmB</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">algorithm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;算法 B&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Strategy <span class="variable">$strategy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Strategy <span class="variable">$strategy</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy = <span class="variable">$strategy</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">callAlgorithm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;strategy-&gt;<span class="title function_ invoke__">algorithm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$algorithmA</span> = <span class="keyword">new</span> <span class="title function_ invoke__">AlgorithmA</span>();</span><br><span class="line"><span class="variable">$contextA</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="variable">$algorithmA</span>);</span><br><span class="line"><span class="variable">$contextA</span>-&gt;<span class="title function_ invoke__">callAlgorithm</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$algorithmB</span> = <span class="keyword">new</span> <span class="title function_ invoke__">AlgorithmB</span>();</span><br><span class="line"><span class="variable">$contextB</span> = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="variable">$algorithmB</span>);</span><br><span class="line"><span class="variable">$contextB</span>-&gt;<span class="title function_ invoke__">callAlgorithm</span>();</span><br></pre></td></tr></table></figure><p>跟工厂模式非常相似，但是策略模式属于行为型模式，并不会返回一个具体的对象，而是强调其行为。通过调用上下文将要调用的方法封装起来，客户端只要调用上下文的方法就可以了。</p><p>那么，跟工厂结合一下是不是更好呢？</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 流接口模式</title>
      <link href="/2021/03/21/desgin-pattern-fi/"/>
      <url>/2021/03/21/desgin-pattern-fi/</url>
      
        <content type="html"><![CDATA[<p>流接口模式通常用来编写易于阅读的代码，就像自然语言一样（如英语）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$fields</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$from</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">array</span> <span class="variable">$where</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$fields</span></span>): <span class="title">Sql</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fields = <span class="variable">$fields</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">from</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$table</span>, <span class="keyword">string</span> <span class="variable">$alias</span></span>): <span class="title">Sql</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span>[] = <span class="variable">$table</span> . <span class="string">&#x27; AS &#x27;</span> . <span class="variable">$alias</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$condition</span></span>): <span class="title">Sql</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;where[] = <span class="variable">$condition</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">sprintf</span>(</span><br><span class="line">            <span class="string">&#x27;select %s from %s where %s&#x27;</span>,</span><br><span class="line">            <span class="title function_ invoke__">join</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$this</span>-&gt;fields),</span><br><span class="line">            <span class="title function_ invoke__">join</span>(<span class="string">&#x27;, &#x27;</span>, <span class="variable">$this</span>-&gt;<span class="keyword">from</span>),</span><br><span class="line">            <span class="title function_ invoke__">join</span>(<span class="string">&#x27; AND &#x27;</span>, <span class="variable">$this</span>-&gt;where)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = (<span class="keyword">new</span> <span class="title class_">Sql</span>())-&gt;<span class="title function_ invoke__">select</span>([<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>])-&gt;<span class="keyword">from</span>(<span class="string">&#x27;foobar&#x27;</span>, <span class="string">&#x27;f&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;f.bar = foo&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$query</span>, PHP_EOL;</span><br></pre></td></tr></table></figure><p>这个模式跟前一个模式都有点说不出的诡异，可能不是新模式，属于没被正式划分到设计模式中的模式？？？</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 依赖注入模式</title>
      <link href="/2021/03/21/design-pattern-di/"/>
      <url>/2021/03/21/design-pattern-di/</url>
      
        <content type="html"><![CDATA[<p>依赖注入是控制反转的一种实现方式。要实现控制反转，需要将创建被调用者实例的工作交由 IOC 容器完成，然后在调用者中注入被调用者，通常使用构造器或方法注入实现。这样我们舅实现了调用者和被调用者的解偶，这个过程就是依赖注入。</p><p>那么控制反转是什么呢？其实也就是 A 依赖于 B，常规做法是在 A 中直接实例化 B，那么控制反转就是将 B 在外部实例化，然后传入 A 去使用。看完以后，其实对依赖注入也就有了理解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> HardDisk <span class="variable">$hardDisk</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">HardDisk <span class="variable">$disk</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hardDisk = <span class="variable">$disk</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hardDisk-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;一台没有感情的电脑开始运行&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">HardDisk</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;一块没有感情的硬盘开始运行&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$disk</span> = <span class="keyword">new</span> <span class="title class_">HardDisk</span>();</span><br><span class="line"><span class="variable">$computer</span> = <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="variable">$disk</span>);</span><br><span class="line"><span class="variable">$computer</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure><p>以上代码就是一个简单的依赖注入，你以为这就结束了？并没有，咱们在学一下 IOC 容器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">array</span> <span class="variable">$bindings</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$key</span>, <span class="built_in">Closure</span> <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;bindings[<span class="variable">$key</span>] = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;bindings[<span class="variable">$key</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$new</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$container</span> = <span class="keyword">new</span> <span class="title class_">Container</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$container</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;disk&#x27;</span>, function ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HardDisk</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$container</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;computer&#x27;</span>, function () <span class="keyword">use</span>($<span class="title">container</span>)&#123;</span><br><span class="line">    <span class="title">return</span> <span class="title">new</span> <span class="title">Computer</span>($<span class="title">container</span>-&gt;<span class="title">make</span>(&#x27;<span class="title">disk</span>&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$computer</span> = <span class="variable">$container</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;computer&#x27;</span>);</span><br><span class="line"><span class="variable">$computer</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure><p>ok，以上就是依赖注入的全部代码了。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 注册模式</title>
      <link href="/2021/03/21/design-pattern-registry/"/>
      <url>/2021/03/21/design-pattern-registry/</url>
      
        <content type="html"><![CDATA[<p>注册模式通常将对象注册到一个全局的对象树上，需要的时候从对象树上取下需要的实例，就像卖糖葫芦的有木有。不过不一样的是糖葫芦会摘完，对象树摘下后并不会销毁该对象。</p><p>注册模式通常通过一个只有静态方法的抽象类来存放这些对象。或者通过单例模式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">registry</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">LOGGER</span> = <span class="string">&#x27;logger&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">array</span> <span class="variable">$objects</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">self</span>::<span class="variable">$objects</span>[<span class="variable">$key</span>] = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$objects</span>[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="title class_">Registry</span>::<span class="variable constant_">LOGGER</span>;</span><br><span class="line"><span class="variable">$logger</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Registry</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$key</span>, <span class="variable">$logger</span>);</span><br><span class="line"><span class="variable">$storedLogger</span> = <span class="title class_">Registry</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$storedLogger</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 享元模式</title>
      <link href="/2021/03/21/design-pattern-flyweight/"/>
      <url>/2021/03/21/design-pattern-flyweight/</url>
      
        <content type="html"><![CDATA[<p>享元模式会尽量使相似的对象共享内存，能让你在有限的内存中载入更多对象。</p><p>当一个应用程序需要创建大量对象，并且这些对象的大多数状都可变为外部状态时，就很适合享元模式。</p><p>一如既往的举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Message</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">User <span class="variable">$user</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliMessage</span> <span class="keyword">implements</span> <span class="title">Message</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部状态</span></span><br><span class="line">    <span class="keyword">protected</span> Template <span class="variable">$template</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Template <span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;template = <span class="variable">$template</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// user 属于外部状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">User <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;use &#x27;</span>, <span class="variable language_">$this</span>-&gt;template-&gt;<span class="title function_ invoke__">getTemplate</span>(), <span class="string">&#x27; send msg &#x27;</span>, <span class="string">&#x27;to user &#x27;</span>, <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getName</span>(), <span class="string">&#x27; by ali&#x27;</span>, PHP_EOL;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$messages</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params">Template <span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$template</span>-&gt;<span class="title function_ invoke__">getTemplate</span>());</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$key</span>, <span class="variable">$this</span>-&gt;messages)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;message create&#x27;</span>, PHP_EOL;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;messages[<span class="variable">$key</span>] = <span class="keyword">new</span> <span class="title class_">AliMessage</span>(<span class="variable">$template</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;messages[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$template</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTemplate</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$template</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;template = <span class="variable">$template</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTemplate</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$templateA</span> = <span class="keyword">new</span> <span class="title class_">Template</span>();</span><br><span class="line"><span class="variable">$templateA</span>-&gt;<span class="title function_ invoke__">setTemplate</span>(<span class="string">&#x27;template a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$templateB</span> = <span class="keyword">new</span> <span class="title class_">Template</span>();</span><br><span class="line"><span class="variable">$templateB</span>-&gt;<span class="title function_ invoke__">setTemplate</span>(<span class="string">&#x27;template b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$userA</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$userA</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;wu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$userB</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$userB</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;yf&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$factory</span> = <span class="keyword">new</span> <span class="title class_">MessageFactory</span>();</span><br><span class="line"><span class="variable">$flyweightA</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">getMessage</span>(<span class="variable">$templateA</span>);</span><br><span class="line"><span class="variable">$flyweightA</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$userA</span>);</span><br><span class="line"><span class="variable">$flyweightA</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$userB</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$flyweightB</span> = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">getMessage</span>(<span class="variable">$templateB</span>);</span><br><span class="line"><span class="variable">$flyweightB</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$userA</span>);</span><br></pre></td></tr></table></figure><p>这次来点不一样的，贴张截图帮助理解：<br><img src="/images/flyweight.png" alt="flyweight"></p><p>可以看到，在享元工厂中，一共创建了两次 message，当我们重复用一个模板发送消息时，模板作为内部状态已经被缓存了，调用的时候直接取出即可，避免了重复创建造成的资源浪费。</p><p>例子虽然不太贴切，但是看完应该也能总结出，享元模式需要依赖于一个享元工厂以及一个享元角色，也就是咱们代码中的 AliMessage 类。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 组合模式</title>
      <link href="/2021/03/21/design-pattern-composite/"/>
      <url>/2021/03/21/design-pattern-composite/</url>
      
        <content type="html"><![CDATA[<p>将对象组合成<code>树状</code>层次结构以表示<code>部分-整体</code>的层次结构，使用户对单个对象和组合对象的使用具有一致性。</p><p>两个关键词，树状，部分-整体。</p><p>举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">array</span> <span class="variable">$composites</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">Component <span class="variable">$component</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;composites[] = <span class="variable">$component</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">Component <span class="variable">$component</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$position</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;composites <span class="keyword">as</span> <span class="variable">$composite</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$composite</span> === <span class="variable">$component</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">array_splice</span>(<span class="variable">$this</span>-&gt;composites, <span class="variable">$position</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$position</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$key</span></span>): <span class="title">Component</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;composites[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;composites <span class="keyword">as</span> <span class="variable">$composite</span>) &#123;</span><br><span class="line">            <span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeafA</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;leaf a render&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeafB</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;leaf b render&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$leafA</span> = <span class="keyword">new</span> <span class="title function_ invoke__">LeafA</span>();</span><br><span class="line"><span class="variable">$leafB</span> = <span class="keyword">new</span> <span class="title function_ invoke__">LeafB</span>();</span><br><span class="line"><span class="variable">$composite</span> = <span class="keyword">new</span> <span class="title class_">Composite</span>();</span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$leafA</span>);</span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$leafB</span>);</span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">remove</span>(<span class="variable">$leafA</span>);</span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$composite</span>-&gt;<span class="title function_ invoke__">getChildren</span>(<span class="number">0</span>)-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure><p>比较适用于树形菜单、文件和文件夹管理等，感觉场景很有限啊……</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 代理模式</title>
      <link href="/2021/03/21/design-pattern-proxy/"/>
      <url>/2021/03/21/design-pattern-proxy/</url>
      
        <content type="html"><![CDATA[<p>说到代理这个词，首先想到的是梯子，它帮助我们解决了网络问题，但是怎么处理的，我们不关心，因为这对大多数人来说属于相对生疏的专业领域。那么代理模式也是一样的道理：为其他对象提供一种代理以控制对这个对象的访问，并允许在将请求提交给对象前后进行一些处理。</p><p>按照惯例，来个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RequestInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRequest</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">implements</span> <span class="title">RequestInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRequest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;get request&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">RequestInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Request <span class="variable">$request</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;request = <span class="keyword">new</span> <span class="title class_">Request</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRequest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;add log in proxy&#x27;</span>, PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">getRequest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$proxy</span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line"><span class="variable">$proxy</span>-&gt;<span class="title function_ invoke__">getRequest</span>();</span><br></pre></td></tr></table></figure><p>代理模式和适配器模式的区别：</p><ol><li>适配器模式是为了改变和适配代理类的接口</li><li>代理模式不改变所代理类接口。</li></ol><p>代理模式和装饰模式的区别：</p><ol><li>装饰模式是为了增强功能</li><li>代理模式是为了加以控制</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 桥接模式</title>
      <link href="/2021/03/21/design-pattern-bridge/"/>
      <url>/2021/03/21/design-pattern-bridge/</url>
      
        <content type="html"><![CDATA[<p>桥接模式也是一个典型的单一职责模式。</p><p>在组件设计过程中，如果职责划分不够清晰，当父类发生变更，子类也需要跟着变动，要么违背开闭原则，要么导致子类数量膨胀。桥接模式，就是为了解决这个问题。</p><p>桥接模式的做法是，使抽象和实现完全分离，使其能够独立变化。或者也可以直白一点，通过组合/聚合的方式避免继承滥用。</p><p>举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Color <span class="variable">$color</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params">Color <span class="variable">$color</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;color = <span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;color-&gt;<span class="title function_ invoke__">setColor</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;circle&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;blue&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shape</span> = <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">setColor</span>(<span class="keyword">new</span> <span class="title class_">Blue</span>());</span><br><span class="line"><span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">draw</span>();</span><br></pre></td></tr></table></figure><p>抽象部分使用继承，实现部分使用组合。</p><p>后续如果我们需要换成另外一个颜色，只需要稍作改动即可实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;red&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$shape</span> = <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">setColor</span>(<span class="keyword">new</span> <span class="title class_">Red</span>());</span><br><span class="line"><span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">draw</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 装饰器模式</title>
      <link href="/2021/03/21/design-pattern-decorator/"/>
      <url>/2021/03/21/design-pattern-decorator/</url>
      
        <content type="html"><![CDATA[<p>装饰器模式主要用于动态添加修改类的功能。</p><p>一般情况下，一个类提供了某些功能，如果要扩展或修改该类，我们可以扩展一个子类出来。但是装饰器模式可以使我们更为灵活的实现。</p><p>那么，装饰器模式相对继承灵活在哪儿呢？</p><p>举个🌰，我们有一个发送短信的类，现在要在发送短信前增加一些校验，发送短信后我们要记录 log：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SendSms</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Send</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSend</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSend</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmsDecorator</span> <span class="keyword">implements</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSend</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;check&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSend</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;log&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthSms</span> <span class="keyword">implements</span> <span class="title">SendSms</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$decorators</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addDecorator</span>(<span class="params">Decorator <span class="variable">$decorator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;decorators, <span class="variable">$decorator</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeSend</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Decorator $decorator</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;decorators <span class="keyword">as</span> <span class="variable">$decorator</span>) &#123;</span><br><span class="line">            <span class="variable">$decorator</span>-&gt;<span class="title function_ invoke__">beforeSend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSend</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$decorators</span> = <span class="title function_ invoke__">array_reverse</span>(<span class="variable">$this</span>-&gt;decorators);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Decorator $decorator</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$decorators</span> <span class="keyword">as</span> <span class="variable">$decorator</span>) &#123;</span><br><span class="line">            <span class="variable">$decorator</span>-&gt;<span class="title function_ invoke__">afterSend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Send</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">beforeSend</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;auth sms is send&#x27;</span>, PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">afterSend</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sms</span> = <span class="keyword">new</span> <span class="title class_">AuthSms</span>();</span><br><span class="line"><span class="variable">$sms</span>-&gt;<span class="title function_ invoke__">addDecorator</span>(<span class="keyword">new</span> <span class="title class_">SmsDecorator</span>());</span><br><span class="line"><span class="variable">$sms</span>-&gt;<span class="title function_ invoke__">send</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 适配器例模式</title>
      <link href="/2021/03/21/design-pattern-adapter/"/>
      <url>/2021/03/21/design-pattern-adapter/</url>
      
        <content type="html"><![CDATA[<p>适配器模式主要用于将一个类的接口转换为客户端所期望的另一个接口，也就是处理接口的兼容问题。</p><p>比如说数据库操作，有 mysql，sqllite，mongodb 等，缓存操作有 redis，memcache，file 等，都可以通过适配器模式将其统一成一致。</p><p>查阅资料的过程中，看到一个很生动的例子：<a href="https://www.cnblogs.com/DeanChopper/p/4770572.html">🌰</a></p><p>某公司生产一批动物形玩具，可以张嘴闭嘴，实现如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Toy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">openMouse</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">closeMouse</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Toy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">openMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;dog open mouse&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">closeMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;dog close mouse&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$dog</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="variable">$dog</span>-&gt;<span class="title function_ invoke__">openMouse</span>();</span><br></pre></td></tr></table></figure><p>某一天，该公司决定与另外一家公司合作，因为该公司的玩具可以遥控控制张嘴闭嘴，但是合作公司用的是 doOpenMouse 和 doCloseMouse 两个方法来控制玩具，这个时候，开发人员怎么办呢，直接在接口添加两个新方法？那岂不是违背了开闭原则，而且两组方法的功能高度重合，以后岂不是很难维护。</p><p>所以，适配器模式就可以大展身手了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RemoteControlToy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doOpenMouse</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doCloseMouse</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControlDog</span> <span class="keyword">implements</span> <span class="title">RemoteControlToy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doOpenMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;remote control dog open mouse&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doCloseMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;remote control dog close mouse&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RemoteControllerToyAdapter</span> <span class="keyword">implements</span> <span class="title">Toy</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> RemoteControlToy <span class="variable">$adapter</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">RemoteControlToy <span class="variable">$target</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adapter = <span class="variable">$target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">openMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;adapter-&gt;<span class="title function_ invoke__">doOpenMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">closeMouse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adapter-&gt;<span class="title function_ invoke__">doCloseMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$adapterDog</span> = <span class="keyword">new</span> <span class="title class_">RemoteControllerToyAdapter</span>(<span class="keyword">new</span> <span class="title class_">RemoteControlDog</span>());</span><br><span class="line"><span class="variable">$adapterDog</span>-&gt;<span class="title function_ invoke__">openMouse</span>();</span><br></pre></td></tr></table></figure><p>首先，我们定义并实现了遥控玩具接口，然后通过遥控玩具适配器进行接口转换，完成了接口统一。</p><p>那么像参考例子中提到的，如果这时候再来一个通过传入参数控制玩具张嘴的公司，只需要再添加一个适配器即可。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 生成器模式</title>
      <link href="/2021/03/21/design-pattern-builder/"/>
      <url>/2021/03/21/design-pattern-builder/</url>
      
        <content type="html"><![CDATA[<p>生成器模式也叫建造者模式，主要用于将一个复杂对象的构造与它的表示分离。该模式允许你使用相同的代码生成不同类型和形式的对象。</p><p>什么是复杂对象呢？举个🌰，人类，都有个脑袋，有个身体，又有两条胳膊腿儿，那么，我们就可以把人看作是一个复杂对象。</p><p>那么，对于生成器模式来说，我们要把人类对象的创建与它的实例表示进行分离。</p><pre><code class="php">class Human&#123;    public function setHead(string $head)    &#123;        echo &#39;head:&#39;, $head, PHP_EOL;    &#125;    public function setBody(string $body)    &#123;        echo &#39;body:&#39;, $body, PHP_EOL;    &#125;    public function setArms(string $leftArm, string $rightArm)    &#123;        echo &#39;left arm:&#39;, $leftArm, &#39; right arm:&#39;, $rightArm, PHP_EOL;    &#125;&#125;interface Builder&#123;    public function buildHead();    public function buildBody();    public function buildArms();    public function getResult(): Human;&#125;class HumanBuilder implements Builder&#123;    private Human $human;    public function __construct()    &#123;        $this-&gt;human = new Human();    &#125;    public function buildHead()    &#123;        $this-&gt;human-&gt;setHead(&#39;ai&#39;);    &#125;    public function buildBody()    &#123;        $this-&gt;human-&gt;setBody(&#39;body&#39;);    &#125;    public function buildArms()    &#123;        $this-&gt;human-&gt;setArms(&#39;left&#39;, &#39;right&#39;);    &#125;    public function getResult(): Human    &#123;        return $this-&gt;human;    &#125;&#125;class Director&#123;    public function builder(Builder $builder): Human    &#123;        $builder-&gt;buildHead();        $builder-&gt;buildBody();        $builder-&gt;buildArms();        return $builder-&gt;getResult();    &#125;&#125;$director = new Director();$human = $director-&gt;builder(new HumanBuilder());</code></pre><p>好了，生成器模式到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 原型模式</title>
      <link href="/2021/03/21/design-pattern-prototype/"/>
      <url>/2021/03/21/design-pattern-prototype/</url>
      
        <content type="html"><![CDATA[<p>原型模式通常用于大对象的创建。因为每次 new 一个对象会造成很大开销，原型模式仅需内存拷贝即可。</p><p>比较简单，直接上🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$title</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eBook</span> <span class="keyword">implements</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$title</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$title</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;title = <span class="variable">$title</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$book1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">eBook</span>();</span><br><span class="line"><span class="variable">$book1</span>-&gt;<span class="title function_ invoke__">setTitle</span>(<span class="string">&#x27;1 号电子书&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$book1</span>-&gt;<span class="title function_ invoke__">getTitle</span>(), PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$book2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">eBook</span>();</span><br><span class="line"><span class="variable">$book2</span>-&gt;<span class="title function_ invoke__">setTitle</span>(<span class="string">&#x27;2 号电子书&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$book2</span>-&gt;<span class="title function_ invoke__">getTitle</span>(), PHP_EOL;</span><br></pre></td></tr></table></figure><p>常规情况下，我们会用 new 创建两个对象，然后分别设置各自的书名。现在用原型模式改造一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$prototype</span> = <span class="keyword">new</span> <span class="title function_ invoke__">eBook</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">as</span> <span class="variable">$index</span>)&#123;</span><br><span class="line">    <span class="variable">$book</span> = <span class="keyword">clone</span> <span class="variable">$prototype</span>;</span><br><span class="line">    <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setTitle</span>(<span class="variable">$index</span>. <span class="string">&#x27; 号电子书&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getTitle</span>(), PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类保持不变，只在创建时该用 clone 即可。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 单例模式</title>
      <link href="/2021/03/21/design-pattern-singleton/"/>
      <url>/2021/03/21/design-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<p>对于一些全局使用的类，我们希望在应用中只实例化一个，避免因重复创建和销毁造成资源浪费，例如数据库连接、redis 连接等操作，这个时候就需要用到单例模式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> DB $db</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">DB</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">static</span>::<span class="variable">$db</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)) &#123;</span><br><span class="line">            <span class="built_in">static</span>::<span class="variable">$db</span> = <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止从外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止实例被克隆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止实例被反序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&#x27;connected&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$db</span> = DB::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br></pre></td></tr></table></figure><p>单例模式是比较简单的一种模式，但是一定程度上违反了单一职责原则，所以也被认为是一种反模式，即经常出现，但存在一定问题的模式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 工厂模式</title>
      <link href="/2021/03/21/design-pattern-factory/"/>
      <url>/2021/03/21/design-pattern-factory/</url>
      
        <content type="html"><![CDATA[<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>工厂模式是一种类，它具有为你创建对象的某些方法，你可以通过工厂创建对象，而不是直接 new，这样当你需要替换创建的对象类型时，只需要修改工厂即可。</p><p>根据抽象程度不同，工厂模式又分为简单工厂、工厂方法和抽象工厂三种。</p><h5 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h5><p>简单工厂与静态工厂的唯一区别是有没有使用静态方法生成实例，因此这里不再将其分为两种模式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;来一辆别摸我&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolvoCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;来一辆沃尔沃&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createBMW</span>(<span class="params"></span>): <span class="title">BMWCar</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWCar</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createVolvo</span>(<span class="params"></span>): <span class="title">VolvoCar</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VolvoCar</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bmw</span> = <span class="title class_">Factory</span>::<span class="title function_ invoke__">createBMW</span>();</span><br><span class="line"><span class="variable">$bmw</span>-&gt;<span class="title function_ invoke__">makeCar</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$volvo</span> = <span class="title class_">Factory</span>::<span class="title function_ invoke__">createVolvo</span>();</span><br><span class="line"><span class="variable">$volvo</span>-&gt;<span class="title function_ invoke__">makeCar</span>();</span><br></pre></td></tr></table></figure><p>实现比较简单，但是当我们要新增一种车🚗时，就必须修改工厂，这在一定程度上违反了开闭原则。所以严格意义上简单工厂不属于 23 种设计模式。</p><h5 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h5><p>工厂方法是针对每一种产品提供一个工厂类，通过不同的工厂实例来创建不同的产品实例。解决了简单工厂新增具体实现需要修改工厂的问题，支持增加任意同一种抽象产品，不修改原有工厂。</p><p>那么，把刚才的简单工厂改造一下吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;来一辆别摸我&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolvoCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeCar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;来一辆沃尔沃&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">Car</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMwFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BMWCar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">Car</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolvoFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">Car</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VolvoCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$bmw</span> = <span class="title class_">BMwFactory</span>::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="variable">$bmw</span>-&gt;<span class="title function_ invoke__">makeCar</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$volvo</span> = <span class="title class_">VolvoFactory</span>::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="variable">$volvo</span>-&gt;<span class="title function_ invoke__">makeCar</span>();</span><br></pre></td></tr></table></figure><p>不同的工厂生产不同的产品，新增产品类型时，只需要新建一个工厂即可，不再需要改动原有工厂，符合了开闭原则。</p><h5 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h5><p>抽象工厂与工厂方法的区别是，抽象工厂用于生产一系列产品，工厂方法只生产一个产品，会产生大量的工厂类。</p><p>宝马生产跑车、轿车还有 mini，宝马是一个产品族，跑车、轿车等是产品的等级。那么，也就是说一个工厂，可以生产相同品牌的不同产品。</p><p>那就不写🌰了吧。懒。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>简单工厂增加产品不方便。<br>工厂方法增加产品很方便，但是会产生大量的工厂类。<br>抽象工厂可以生产多个产品，但是新增产品也需要修改工厂。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 设计模式分类</title>
      <link href="/2021/03/21/design-pattern-category/"/>
      <url>/2021/03/21/design-pattern-category/</url>
      
        <content type="html"><![CDATA[<p>一般来说，设计模式分三个大类，分别是创建型模式、结构型模式、行为型模式。但是随着技术的不断发展，也有一些新型的模式出现。</p><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><p>提供创建对象的机制，增加已有代码的灵活性和可复用性。</p><p>传统的创建型共有 5 种模式，分别是工厂模式、抽象工厂模式、生成器、原型和单例模式。</p><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><p>介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效。</p><p>传统的结构型共有 7 种模式，分别是适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>新型的有依赖注入模式、注册模式和流接口模式。</p><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><p>负责对象间的高效沟通和职责委派。</p><p>这个最多，共 11 种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式。</p><h4 id="其他模式"><a href="#其他模式" class="headerlink" title="其他模式"></a>其他模式</h4><p>委托模式、服务定位器模式、资源库模式、实体属性值模式。</p><p>虽然现在还不知道这些模式都是用来做什么的，但是没关系，一个一个的研究吧。干巴得！(╯‵□′)╯︵┻━┻</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 设计原则</title>
      <link href="/2021/03/21/design-pattern-principles/"/>
      <url>/2021/03/21/design-pattern-principles/</url>
      
        <content type="html"><![CDATA[<p>设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。使用设计模式是为了 <code>提高代码复用性</code> 和 <code>灵活性</code>，让代码更容易被他人理解、保证代码 <code>可靠性</code>。</p><p>为了实现代码的 <code>可复用性</code> 和 <code>灵活性</code>。<code>设计模式</code> 提出了一些关键的 <code>面向对象设计原则</code>。</p><h4 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h4><p>其核心思想为：一个类，最好只做一件事，应该仅有一个引起它变化的原因。</p><p>可以理解为，一个类，应该是一组 <code>相关性很高</code> 的方法及数据的封装。</p><p>当一个类承担的职责过多时，就相当于把这些职责耦合在了一起，当其中一个职责发生变动，可能会对其他职责造成影响。</p><p>类的职责包括两个方面，数据职责和行为职责，数据职责通过类的属性实现，行为职责通过其方法实现。</p><p>单一职责是实现高内聚、低耦合的指导方针。它是最简单但又最难实现的原则，需要开发人员发现类的的不同职责并将其分离。</p><p>举个🌰：登陆模块显示登录页面，校验登录参数，连接数据库，查找用户，返回结果。</p><p>功能太过耦合，拆分成多个模块。</p><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>开闭原则是面向对象中最重要的原则。</p><p>一个软件应当对扩展开放，对修改关闭。也就是说在设计一个模块的时候，应该使这个模块可以在不被修改的前提下进行扩展。</p><p>一个类一旦开发完成，后续新增的功能就不应该通过修改这个类来完成，而是应该通过继承增加新的类。为什么要对修改关闭呢？因为一旦修改某个类，就可能破坏了系统原有功能，就需要重新测试。</p><p><code>抽象化</code> 是开闭原则的关键。什么是抽象化，就是把一个或多个类中的公共的、有共性的东西抽取出来。抽象的最大好处在于它是抽象的、稳定的，不容易发生改变的。实现开闭原则的核心思想就是 <code>面向接口编程</code>，而不是具体实现。</p><p>开闭原则可以用一个更加具体的原则来描述：<code>可变性封装</code>。也就是找到系统中的可变因素并把它封装起来。</p><p>上一篇中提到的灯是个绝佳的🌰。</p><h4 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h4><p>所有引用基类（父类）的地方必须能透明的使用其子类的对象。</p><p>这句话怎么理解呢？通俗来讲就是在软件中如果能够使用基类对象，那么一定也可以使用其子类对象。把基类都替换为它的子类对象，程序不会产生任何错误和异常。反过来则不成立。</p><p>里氏替换应该是开闭原则的一个扩展，由于使用基类对象的地方都可以使用其子类对象，因此在程序中尽量以基类类型来对对象进行定义，而在运行时再用其子类对象替换基类对象。</p><p>其中有一点很关键，里氏替换原则强调子类尽量使用基类中的方法，而不是重写，除非子类有其特殊性。</p><p>举个🌰，依然是上一篇提到的灯，但是加了一点改动：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;灯光随机&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlueLight</span> <span class="keyword">extends</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;蓝色&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedLight</span> <span class="keyword">extends</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> <span class="variable">$power</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasPower</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;power;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasPower</span>())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;没电了，亮不起来&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;红色&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openLight</span>(<span class="params">Light <span class="variable">$light</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$light</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$light</span> = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line"><span class="variable">$blueLight</span> = <span class="keyword">new</span> <span class="title class_">BlueLight</span>();</span><br><span class="line"><span class="variable">$redLight</span> = <span class="keyword">new</span> <span class="title class_">RedLight</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$light</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$blueLight</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$redLight</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/uml.png" alt="uml"></p><p>根据里氏替换原则，子类必须能够替代父类。也就是说，虽然子类重写了父类的方法，但是在能够使用父类的场景里面，也一定要能够使用子类。很显然，BlueLight 类符合原则，RedLight 类虽然也实现了父类方法，但是抛出了父类没有的异常，所以违反了里氏替换原则，在 User 类中，我们无论是传入 Light 基类对象，还是 BlueLight 类对象，都是没有任何错误和异常的。</p><p>由以上实例，我们可以总结出，里氏替换原则本质是对继承的约束。</p><h4 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h4><p>依赖于抽象层，不依赖于具体。即高层次的模块不应该依赖低层次模块。<br>抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>要面向接口编程，而不是面向实现编程。</p><p>一般情况下，我们认为调用者是高层模块，被调用者是底层模块。</p><p>实现开闭原则的关键是抽象化，如果说实现开闭原则是面向对象编程的目标，那么依赖倒置就是面向对象编程的主要手段。常用的手段为在代码中使用抽象类，将具体实现放入元数据。</p><p>再强调一遍，抽象是相对稳定的，不容易发生改变。</p><p>再举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;long long ago, 遥远的东方有一个特别英俊帅气的小伙&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">narrate</span>(<span class="params">Book <span class="variable">$book</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getContent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;上周五，中国首次实现经济反超美国称为世界第一经济体&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$mother</span> = <span class="keyword">new</span> <span class="title class_">Mother</span>();</span><br><span class="line"><span class="variable">$mother</span>-&gt;<span class="title function_ invoke__">narrate</span>(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br></pre></td></tr></table></figure><p>在上边的例子中，麻麻看书讲故事，如果有一天，书看烦了，想看个报纸，但是麻麻做不到，因为要读报纸首先要把麻麻改掉。这就有点荒谬。显示不是一个好的设计，原因就是麻麻和书之间的耦合程度太高了，必须降低他们之间的耦合度。</p><p>我们来做下调整：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Reader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;long long ago, 遥远的东方有一个特别英俊帅气的小伙&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paper</span> <span class="keyword">implements</span> <span class="title">Reader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;上周五，中国首次实现经济反超美国称为世界第一经济体&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mother</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">narrate</span>(<span class="params">Reader <span class="variable">$reader</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$reader</span>-&gt;<span class="title function_ invoke__">getContent</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mother</span> = <span class="keyword">new</span> <span class="title class_">Mother</span>();</span><br><span class="line"><span class="variable">$mother</span>-&gt;<span class="title function_ invoke__">narrate</span>(<span class="keyword">new</span> <span class="title class_">Book</span>());</span><br><span class="line"><span class="variable">$mother</span>-&gt;<span class="title function_ invoke__">narrate</span>(<span class="keyword">new</span> <span class="title class_">Paper</span>());</span><br></pre></td></tr></table></figure><p>首先，我们抽取出一个接口类 <code>Reader</code>，然后 Book 和 Paper 分别去实现它。然后将 Mother 调整为依赖于接口。<br>现在，无论是想看书还是想看报纸，又或者想看连环画，我们只要去实现 Reader 即可，再也不用改动 Mother 了。</p><p>上边里氏替换中灯的例子其实已经符合依赖倒置原则，但是看到这个例子更生动，更容易理解，所以就赘述了一下。</p><blockquote><p>传递依赖关系的方式有三种，上边的例子中使用的接口传递，还有构造函数传递和 setter 传递。</p></blockquote><h4 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h4><p>客户端不应该依赖它不需要的接口。</p><p>使用多个专门的接口，而不是一个大的单一的接口。</p><p>看上去似乎和单一职责很像，但是不是，单一职责针对的是类的职责，接口隔离针对的则是接口。</p><p>举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanWorker</span> <span class="keyword">implements</span> <span class="title">WorkerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like working&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like sleeping&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotWorker</span> <span class="keyword">implements</span> <span class="title">WorkerInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like working&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;robot never sleep&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的例子中，有个很明显的缺点，机器人不需要睡觉，但是它却必须实现睡觉的方法，这显然违反了接口隔离。</p><p>那么，我们再调整一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WorkInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SleepInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanWorker</span> <span class="keyword">implements</span> <span class="title">WorkInterface</span>, <span class="title">SleepInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like working&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like sleeping&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotWorker</span> <span class="keyword">implements</span> <span class="title">WorkInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I like working&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整后，接口一分为二，实际使用时各取所需，不再被迫实现自己不需要的接口。</p><h4 id="合成复用"><a href="#合成复用" class="headerlink" title="合成复用"></a>合成复用</h4><p>面向对象有两种方式实现代码复用，一是继承，二还是继承，哦不，而是组合/聚合，也可以叫做合成。<br>合成复用原则要求在软件复用时，首先考虑使用组合、聚合等关联方式实现，其次才考虑使用继承。也就是在一个新对象里通过关联方式使用已有对象的方法和功能。</p><p>那么为什么推荐使用组合呢，首先，继承后，父类的方法暴露给了子类，这等于破坏了类的封装性，所以继承复用也被称为白箱复用。其次，父类的方法发生变动会影响到子类，属于耦合度较高的一种表现，不利于代码的维护。最后，继承自基类的方法是静态的，限制了复用的灵活性。</p><p><img src="/images/extend.jpg" alt="继承"></p><p><img src="/images/multiplexing.jpg" alt="组合"></p><p>上个图吧，例子挺清晰的。<a href="http://c.biancheng.net/view/1333.html">图片出处</a></p><p>emmm，前边反复提的灯的例子就不太符合合成复用原则了。</p><p>有兴趣的可以自己改造一下。</p><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>迪米特法则又叫最少知道原则，它强调每一个类应当对其它类有尽可能少的了解，不和陌生人说话。也就是尽可能少的产生依赖。</p><p>A 和 B 产生交互，B 和 C 产生交互，A 只和 B 交互，不跟 C 玩。</p><p>这个法则就比较搞，分了狭义和广义，怎么来的没搞清楚，后边再补充。</p><p>狭义强调如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一类的某一个方法的话，可以通过第三者转发这个调用。</p><p>广义则是对封装的强调，也就是对信息隐藏的控制。方法封装在类的内部，调用者只需要调用并获取预期结果，不需要关注具体实现。</p><p>举个反面🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySchool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$myClass</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$myClass</span>-&gt;<span class="title function_ invoke__">getClasses</span>() <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$class</span>-&gt;<span class="title function_ invoke__">getStudents</span>() <span class="keyword">as</span> <span class="variable">$student</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$student</span>-&gt;<span class="title function_ invoke__">getName</span>(), PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上边的例子中，School 类和 Class 类发生交互，但是也和 Student 类发生了交互，违反了最少知道原则。</p><p>再来个优化版：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySchool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$myClass</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$myClass</span>-&gt;<span class="title function_ invoke__">getClasses</span>() <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">            <span class="variable">$class</span>-&gt;<span class="title function_ invoke__">manager</span>();</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Class 类中 manager 方法去获取学生信息，School与 Student 类的交互就被清除了，School 也不知道 Class 是怎么获取 Student 信息的，它只管调用。</p><p>emmm，还可以继续递进，Class manager 只管理自己的信息， 然后调用 Student manager。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySchool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$myClass</span> = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="variable">$myClass</span>-&gt;<span class="title function_ invoke__">manager</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getClasses</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            ...</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getClasses</span>() <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">            <span class="variable">$student</span> = <span class="keyword">new</span> <span class="title class_">MyStudent</span>();</span><br><span class="line">            <span class="variable">$student</span>-&gt;<span class="title function_ invoke__">manager</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStudent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getStudents</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            ...</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getStudents</span>() <span class="keyword">as</span> <span class="variable">$student</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$student</span>-&gt;name, PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式 - 对象</title>
      <link href="/2021/03/21/design-pattern-object/"/>
      <url>/2021/03/21/design-pattern-object/</url>
      
        <content type="html"><![CDATA[<p>我们经常会用类描述对象，也经常会用对象描述类，但是这有碍于我们对于面向对象的理解，因为类决定了对象。</p><p>简而言之，类，是用来生成一个或多个对象的代码模板。</p><p>对象是根据类中定义的模板所构建的数据，我们通常会说对象是它的类的实例，对象的类型是由类定义的。</p><p>你可以用 <code>class</code> 关键字和任意类名来声明一个类，类名可以是任意数字和字母的组合，但不能以数字开头，类体必须定义在一对大括号内：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person2</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>通过关键字 <code>new</code> 去创建 Person 类的对象，在上面的代码中，创建了两个实例，它们是由同一个类创建的、具有相同类型的不同对象。</p><p>如果将类看作是一个生产用的铸模，那么对象就是用铸模生产出来的具体产品。</p><h4 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h4><p>我们可以在类中定义称为 <code>属性</code> 的特殊变量。属性也称为 <code>成员变量</code>，可以用来保存各个对象中不同的数据。</p><p>除了在声明它们时必须指定可见性关键字，成员变量与普通变量看起来非常相似。</p><p>可见性关键字为 <code>private</code>，<code>protected</code> 和 <code>public</code>，它们确定类成员变量能够被访问的作用域。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name;</span><br></pre></td></tr></table></figure><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p>类方法是类中的特殊函数，它允许对象执行任务。</p><p>方法声明与函数声明类似，但是它必须在类体内。</p><p>我们可以给它加上限定词，包括可见性关键字。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是指从基类中派生出一个或多个类的机制。</p><p>如果一个类继承自另外一个类，那么就说它是另外一个类的子类。这种关系通常用父子关系来形容。</p><p>子类派生自父类并继承来父类的特性，这些特性包括属性也包括方法。</p><p>通常，子类会在父类所提供的功能基础上增加一些新功能，因此，也可以说子类扩展了父类。</p><p>继承通常用来 <code>解决代码重复</code>，在一个类中提供共通功能，又能在其他类在处理一些方法调用时有所不同。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装是指隐藏对象内的属性和具体实现，仅对外提供公共访问方式。</p><p>封装通过 <code>可见性关键字</code> 把一个对象的属性私有化，同时提供一些可以被外界访问属性的方法，如果不想被外界访问，我们大可不提供方法给外界。但如果一个类没有提供给外界访问的方法，那么这个类也就没有意义了。</p><p>这样做的好处是：</p><ol><li>良好的封装可以减少代码耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员进行更精确的控制</li><li>隐藏信息，实现细节</li></ol><p>具体场景如 model 获取数据。</p><p>封装可以 <code>提高灵活性</code>。使我们更容易地修改类的内部实现，而无需修改使用了该类的客户代码，从而实现对成员变量进行更精确的控制。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>可以理解为多种表现形式，即一个对外接口，多种内部实现。</p><p>在面向对象的理论中，多态性的一般定义为：同一个操作（函数）作用于不同的类的实例，将产生不同的执行结果。即不同类的对象接收到相同的消息时，将会得到不同的结果。</p><p>举个🌰：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$type</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;红色&#x27;</span>, PHP_EOL; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;蓝色&#x27;</span>, PHP_EOL; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;绿色&#x27;</span>, PHP_EOL; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">openLight</span>(<span class="params"><span class="variable">$type</span> = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$light</span> = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        <span class="variable">$light</span>-&gt;<span class="title function_ invoke__">show</span>(<span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>();</span><br></pre></td></tr></table></figure><p>这是一个存在弊端的实现，如果灯光颜色非常多，后期添加就会非常麻烦。</p><p>多态实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;灯光随机&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlueLight</span> <span class="keyword">extends</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;蓝色&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedLight</span> <span class="keyword">extends</span> <span class="title">Light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;红色&#x27;</span>, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openLight</span>(<span class="params">Light <span class="variable">$light</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$light</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$light</span> = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line"><span class="variable">$blueLight</span> = <span class="keyword">new</span> <span class="title class_">BlueLight</span>();</span><br><span class="line"><span class="variable">$redLight</span> = <span class="keyword">new</span> <span class="title class_">RedLight</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$light</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$blueLight</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">openLight</span>(<span class="variable">$redLight</span>);</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>前面说过，类是生成对象的代码模板，对象是类的实例。我们可以调用对象的属性和方法。在前边的例子中，也都是通过对象调用属性和方法。</p><p>事实上，我们也可以访问类的属性和方法，这种方法和属性都是静态的，需要用关键字 <code>static</code> 声明：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">string</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Person</span>::<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><p>静态方法拥有类作用域，它们无法访问类的普通属性。因为这些属性是对象的。</p><p>静态属性和静态方法是在类上被调用的，而不是在对象上，因此它们也被称为 <code>类属性</code> 和 <code>类方法</code>。我们也无法在类中通过伪变量 <code>$this</code> 调用，而是需要通过对应的 <code>self</code>。</p><p>静态属性和静态方法可以使我们无需将一个对象传入另一个对象就可以访问而不需要实例。这可以使我们省去实例化对象的麻烦，从而使代码更加整洁。</p><h4 id="常量属性"><a href="#常量属性" class="headerlink" title="常量属性"></a>常量属性</h4><p>有些属性是不应当被改变的，这个时候就应该用关键字 <code>const</code> 去声明常量属性。</p><p>与普通属性不同，常量不以 <code>$</code> 开头，并且根据约定，通常用大写字母命名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">LEG_NUMBER</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Person</span>::<span class="variable constant_">LEG_NUMBER</span>;</span><br></pre></td></tr></table></figure><p>常量只能是基本类型的值，无法用来保存对象，并且与静态属性一样，我们需要通过类来访问常量。</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类无法被实例化，它的作用是为所有子类（继承自它的类）定义接口。</p><p>抽象类用关键字 <code>abstract</code> 声明。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以像在普通类中一样在抽象类中创建方法和属性，但是当实例化这个类时，就会有报错出现。因为抽象类不能被实例化。</p><p>一般情况下，抽象类至少有一个抽象方法，使用同样的关键字声明，但不能有方法体。</p><p>任何继承自抽象类的非虚子类都必须实现所有的抽象方法，否则它自己就必须被定义为抽象类。</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>抽象类允许提供一些实现，但是接口则是纯粹的模板，只提供定义功能，不能有实现。</p><p>使用关键字 <code>interface</code> 声明接口，其中可以有常量成员和方法的声明，但是不能有方法体。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Implement getName() method.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PHP 中的类只能有一个继承，但是可以同时实现多个接口。</p><h4 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h4><p>PHP 不支持多继承，一个类只能有一个父类，但是可以实现多个接口。</p><p>接口提供没有任何实现的类型，如果我们希望在继承层次中共享实现，就需要借助于   <code>trait</code>。</p><p>trait 是类似于类的结构，它本身不能被实例化，但是可以混合到类中，在 trait 中定义的任何方法都可以被使用它的任何类所使用。</p><h4 id="延时静态绑定：static-关键字"><a href="#延时静态绑定：static-关键字" class="headerlink" title="延时静态绑定：static 关键字"></a>延时静态绑定：static 关键字</h4><p>static 和 self 类似，区别在于前者引用的是被调用的类，而不是包含类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DomainObject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">DomainObject</span>()</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">create</span>();</span><br></pre></td></tr></table></figure><p>调用 <code>User::create()</code> 会创建一个 User 实例，而不是尝试创建 <code>DomainObject</code> 实例。</p><h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$name</span> =  <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(\<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;finally&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论 catch 子句是重新抛出异常还是返回一个值，finally 子句都会执行，但如果在 try 或 catch 中调用了 die() 或 exit()，那么程序就会终止，finally 子句也就不会执行。</p><h4 id="final-类"><a href="#final-类" class="headerlink" title="final 类"></a>final 类</h4><p>final 类可以防止类再被继承。final 方法也无法重写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部错误捕获"><a href="#内部错误捕获" class="headerlink" title="内部错误捕获"></a>内部错误捕获</h4><p>可以在 try catch 子句中通过指定 Error 这个父类或它的子类来捕获相匹配的内部错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;illegal code&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">ParseError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;parse error&#x27;</span>, PHP_EOL;</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>, PHP_EOL;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;finally&#x27;</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的， finally 在这里也可以用。</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>PHP 内置的拦截器方法可以拦截发送给为定义方法和属性的消息。</p><p>PHP 支持三个内置的拦截器方法。与 <code>__construct()</code>  相似，这些方法也会在适当的条件下自动调用。</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">__get($property)</td><td align="left">访问未定义属性时会被调用</td></tr><tr><td align="left">__set($property, $value)</td><td align="left">对未定义属性赋值时会被调用</td></tr><tr><td align="left">__isset($property)</td><td align="left">对未定义属性调用 isset()时调用</td></tr><tr><td align="left">__unset($property)</td><td align="left">对未定义属性调用 unset()时调用</td></tr><tr><td align="left">__call($method, $args)</td><td align="left">调用未定义非静态方法时调用</td></tr><tr><td align="left">__callStatic($method, $args)</td><td align="left">调用未定义静态方法时调用</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$property</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span> = <span class="string">&quot;get<span class="subst">&#123;$property&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$method</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name;</span><br></pre></td></tr></table></figure><h4 id="析构方法"><a href="#析构方法" class="headerlink" title="析构方法"></a>析构方法</h4><p>析构方法会在类被垃圾回收前，也就是从内存中抹去前调用。<br>可以用这个方法执行一些必要的清理工作。</p><p>析构方法和前边的拦截器都属于魔术方法，使用时应该慎重。</p><h4 id="回调、匿名函数和闭包"><a href="#回调、匿名函数和闭包" class="headerlink" title="回调、匿名函数和闭包"></a>回调、匿名函数和闭包</h4><p>回调有什么作用呢？它允许程序在运行期间将与组件核心任务没有直接关系的功能插入组件。通过让组件拥有回调能力，可以赋予其他程序员在我们不知道的上下文上获得扩展程序的能力。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$callbacks</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$log</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$person</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name, PHP_EOL;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;callbacks[] = <span class="variable">$log</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;callbacks <span class="keyword">as</span> <span class="variable">$callback</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">is_callable</span>(<span class="variable">$callback</span>))&#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$callback</span>, <span class="variable">$this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，将匿名函数（闭包函数）赋值给 $log，然后将它作为参数传递给函数和方法，然后在指定的位置进行回调。</p><p>匿名函数可以引用那些声明在其父作用域中的变量，通过 <code>use()</code> 操作。</p><h4 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h4><p>当需要从很小的类中创建和继承实例，并且这个类很简单而且特定于局部上下文时，匿名类非常有用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonWriter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">Person <span class="variable">$person</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">PersonWriter <span class="variable">$writer</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$writer</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>), PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">getName</span>(<span class="keyword">new</span> <span class="keyword">class</span> <span class="keyword">implements</span> PersonWriter&#123;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_ invoke__">write</span>(Person <span class="variable">$person</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$person</span>-&gt;name, PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>匿名类不支持闭包，也就无法访问定义在匿名类外的属性，但是可以通过构造函数将参数传入。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 和设计模式</title>
      <link href="/2021/03/21/design-pattern/"/>
      <url>/2021/03/21/design-pattern/</url>
      
        <content type="html"><![CDATA[<h4 id="场面话"><a href="#场面话" class="headerlink" title="场面话"></a>场面话</h4><p>工作几年，复杂的业务场景，重复的 CURD 一直在消耗着我作为程序员的激情与精力，在设计模式这方面的积累从来都不够完善，出去面试时还经常会面临面试官的灵魂拷问，总觉得自己是不是就快被淘汰了。</p><p>所以，是时候下功夫整理下这方面的知识了。</p><p>开始之前，要考虑一个问题，我们为什么要学习设计模式呢？</p><p>首先从概念来讲，设计模式作为一种描述问题及其解决方案的方法，是无数的 IT 前辈在工作中总结出的 <code>特定场景</code> 下的 <code>最佳解决方案</code>，那么当我们遇到同样的场景时，就可以通过使用模式，来实现符合自己程序的解决方案，以此降低代码的耦合度，提高代码的质量，同时也方便我们后期对程序进行调整或拓展。</p><p>第二，现在大部分 PHP 程序都是依托于框架进行开发，一般情况下，我们对于框架的使用，只是局限于在一个强大的程序基础设施上添加一些小装饰。那么学习并掌握设计模式以后，我们就能够理解框架是如何解决问题，以及框架解决问题的策略，随着开发的深入，我们也能够以设计为导向，开发出自己的可复用的代码库，这对我们来说，也是一种极大的积累和提升。</p><p>第三，对于团队来说，人来人往是常态，对于从一开始就已经接手项目的成员来说，理解程序的逻辑会很轻松，但是对于新加入的成员来说，采用标准化设计模式的程序才是更容易的理解和掌握的存在，这可以使新成员更快的参与到项目的开发工作中，发挥出他作为项目成员的作用。</p><p>第四，设计模式定义了专业词汇，通过这些词汇，开发人员之间的沟通变得更加容易，可以节省很多沟通成本。</p><p>设计模式与面向对象密切相关，因此我应该不会简单的复制一堆模式来加以理解，而是从面向对象入手，逐渐向设计模式演深。</p><p><a href="https://github.com/m-finder/design-pattern">源码</a></p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><a href="/2021/03/21/design-pattern-object/" title="对象">对象</a><a href="/2021/03/21/design-pattern-principles/" title="设计原则">设计原则</a><a href="/2021/03/21/design-pattern-category/" title="设计模式分类">设计模式分类</a><a href="/2021/03/21/design-pattern-factory/" title="工厂模式">工厂模式</a><a href="/2021/03/21/design-pattern-singleton/" title="单例模式">单例模式</a><a href="/2021/03/21/design-pattern-builder/" title="生成器模式">生成器模式</a><a href="/2021/03/21/design-pattern-prototype/" title="原型模式">原型模式</a><a href="/2021/03/21/design-pattern-facade/" title="门面模式">门面模式</a><a href="/2021/03/21/design-pattern-adapter/" title="适配器模式">适配器模式</a><a href="/2021/03/21/design-pattern-decorator/" title="装饰器模式">装饰器模式</a><a href="/2021/03/21/design-pattern-bridge/" title="桥接模式">桥接模式</a><a href="/2021/03/21/design-pattern-proxy/" title="代理模式">代理模式</a><a href="/2021/03/21/design-pattern-composite/" title="组合模式">组合模式</a><a href="/2021/03/21/design-pattern-flyweight/" title="享元模式">享元模式</a><a href="/2021/03/21/design-pattern-di/" title="依赖注入模式">依赖注入模式</a><a href="/2021/03/21/design-pattern-registry/" title="注册模式">注册模式</a><a href="#">Post not found: design-pattern-fi 流接口模式</a><a href="/2021/03/21/design-pattern-strategy/" title="策略模式">策略模式</a><a href="/2021/03/21/design-pattern-template-method/" title="模板方法模式">模板方法模式</a><a href="/2021/03/21/design-pattern-observer/" title="观察者模式">观察者模式</a><a href="/2021/03/21/design-pattern-iterator/" title="迭代器模式">迭代器模式</a><a href="/2021/03/21/design-pattern-cor/" title="责任链模式">责任链模式</a><a href="/2021/03/21/design-pattern-command/" title="命令行模式">命令行模式</a><a href="/2021/03/21/design-pattern-memento/" title="备忘录模式">备忘录模式</a><a href="/2021/03/21/design-pattern-state/" title="状态模式">状态模式</a><a href="/2021/03/21/design-pattern-visitor/" title="访问者模式">访问者模式</a><a href="/2021/03/21/design-pattern-mediator/" title="中介者模式">中介者模式</a>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac m1 下搭建 php 开发环境</title>
      <link href="/2021/03/20/m1-php/"/>
      <url>/2021/03/20/m1-php/</url>
      
        <content type="html"><![CDATA[<p>一番挣扎之后，还是下手了 m1，真香。</p><p><img src="/images/macos.png" alt="macos"></p><span id="more"></span><h4 id="homebrew-安装"><a href="#homebrew-安装" class="headerlink" title="homebrew 安装"></a>homebrew 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>网慢的话，host 加映射。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.68.133  raw.githubusercontent.com</span><br></pre></td></tr></table></figure><h4 id="php-安装"><a href="#php-安装" class="headerlink" title="php 安装"></a>php 安装</h4><p>看到好多人说，要把自带的 php 先卸载掉， 但是我折腾一圈发现，卸着太麻烦，不卸也没啥问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install php@7.4</span><br><span class="line">brew link php@7.4</span><br></pre></td></tr></table></figure><p>然后根据输出的信息添加环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;/opt/homebrew/opt/php@7.4/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &#x27;export PATH=&quot;/opt/homebrew/opt/php@7.4/sbin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">export LDFLAGS=&quot;-L/opt/homebrew/opt/php@7.4/lib&quot;</span><br><span class="line">export CPPFLAGS=&quot;-I/opt/homebrew/opt/php@7.4/include&quot;</span><br></pre></td></tr></table></figure><p>如果错过了这些信息，执行以下命令可以再次查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info php@7.4</span><br></pre></td></tr></table></figure><h4 id="php-exc-安装"><a href="#php-exc-安装" class="headerlink" title="php-exc 安装"></a>php-exc 安装</h4><h5 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h5><p>安装扩展需要用到 <code>pecl</code>, 先查看有没有正确安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl help version</span><br></pre></td></tr></table></figure><p>正常情况下，输出信息应该和 php 版本一致，即 php7.4。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl install redis</span><br></pre></td></tr></table></figure><h5 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/homebrew/Cellar/pcre2/10.36/include/pcre2.h /opt/homebrew/Cellar/php@7.4/7.4.16/include/php/ext/pcre/pcre2.h</span><br><span class="line">pech install mongodb</span><br></pre></td></tr></table></figure><h5 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h5><p>xdebug3 配置有改动，具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xdebug.mode = debug</span><br><span class="line">xdebug.client_host = 127.0.0.1</span><br><span class="line">xdebug.client_port = 9003</span><br><span class="line">xdebug.start_with_request=yes</span><br><span class="line">xdebug.log=&quot;opt/homebrew/var/www/logs/xdebug.log&quot;</span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">xdebug.discover_client_host=false</span><br></pre></td></tr></table></figure><h4 id="nginx-安装"><a href="#nginx-安装" class="headerlink" title="nginx 安装"></a>nginx 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>安装完成后，需要解析 php。<br>默认文件不动，添加一个新的配置文件：</p><p><code>vi /opt/homebrew/etc/nginx/services/laravel</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen  80;</span><br><span class="line">    server_name   laravel.test;</span><br><span class="line">    root html;</span><br><span class="line">    access_log    html/logs/nginx.log;</span><br><span class="line">    error_log     htmle/logs/nginx-error.log;</span><br><span class="line"></span><br><span class="line">    index index.php;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # Laravel rewrite rule</span><br><span class="line">        try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            #    fastcgi_pass   unix:/dev/shm/php-cgi.sock;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后重启或刷新 nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services reload nginx || brew services restart nginx</span><br></pre></td></tr></table></figure><p>重启以后，记得改下 hosts，把域名加到映射。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line">redis-server -v</span><br></pre></td></tr></table></figure><h4 id="composer-安装"><a href="#composer-安装" class="headerlink" title="composer 安装"></a>composer 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">php -r &quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">sudo mkdir /usr/local/bin/</span><br><span class="line">sudo mv /opt/homebrew/var/www/composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 年计划清单</title>
      <link href="/2021/01/01/2021-to-do-list/"/>
      <url>/2021/01/01/2021-to-do-list/</url>
      
        <content type="html"><![CDATA[<p>魔幻的 2020 已经成为过去……</p><ul><li><input disabled="" type="checkbox"> <em>好好活着</em></li><li><input disabled="" type="checkbox"> <em>giorgio-spa 改版</em></li><li><input checked="" disabled="" type="checkbox"> 用 Qt 做个小工具箱</li><li><input checked="" disabled="" type="checkbox"> 泰拉瑞亚毕业</li><li><input checked="" disabled="" type="checkbox"> 梳理设计模式</li><li><input checked="" disabled="" type="checkbox"> redis 进一步学习</li><li><input disabled="" type="checkbox"> <em>rabbitmq 进一步学习</em></li><li><input checked="" disabled="" type="checkbox"> 再剪几个视频玩玩 <a href="https://space.bilibili.com/12148036">[ bilibili ]</a></li><li><input disabled="" type="checkbox"> 继续去年的软考</li></ul>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
          <category> 计划清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
            <tag> 计划清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 年计划清单</title>
      <link href="/2020/12/31/2020-to-do-list/"/>
      <url>/2020/12/31/2020-to-do-list/</url>
      
        <content type="html"><![CDATA[<p>上一年的计划还没有结束，新的一年它就已经来了。</p><ul><li><input checked="" disabled="" type="checkbox"> laravel-vue-spa 后台，开发中</li><li><input checked="" disabled="" type="checkbox"> composer 包开发</li><li><input disabled="" type="checkbox"> 学习一下手写 swoole 分布式框架</li><li><input disabled="" type="checkbox"> 尝试做一个基于 laravel-swoole 的 websocket 项目</li><li><input checked="" disabled="" type="checkbox"> 研究 laravel framework</li><li><input checked="" disabled="" type="checkbox"> 继续学习 ps，做个不合格的美工</li><li><input checked="" disabled="" type="checkbox"> 学习 pr 剪辑</li><li><input disabled="" type="checkbox"> 软考软件设计师</li><li><input disabled="" type="checkbox"> <del>软考架构师</del></li><li><input checked="" disabled="" type="checkbox"> 研究下 win10 linux 子系统在开发中的使用</li><li><input checked="" disabled="" type="checkbox"> 域名备案</li></ul>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
          <category> 计划清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
            <tag> 计划清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲话三两句</title>
      <link href="/2020/10/02/is-nothing/"/>
      <url>/2020/10/02/is-nothing/</url>
      
        <content type="html"><![CDATA[<h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>又回魔都了，目前趋于稳定。</p><!-- more  --><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>我家大美丽也来了。</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>自己的电脑刷成了 <code>linux</code>，目前还在探索中。</p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>节日快乐呀！</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 子系统（wsl2）运行 laradock</title>
      <link href="/2020/01/16/wsl2-laradock/"/>
      <url>/2020/01/16/wsl2-laradock/</url>
      
        <content type="html"><![CDATA[<p>没忍住，把家里的电脑更新到了预览版，然后体验了一下 wls2，相对于 wsl1，使用 docker 简直不要太简单。</p><p><img src="/images/docker-love-wsl2.png"></p><!-- more  --><h4 id="更新-wsl2"><a href="#更新-wsl2" class="headerlink" title="更新 wsl2"></a>更新 wsl2</h4><p>开个命令行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-version Ubuntu 2</span><br><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h4 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h4><p> <a href="%5Bhttps://docs.docker.com/docker-for-windows/wsl-tech-preview/%5D(https://docs.docker.com/docker-for-windows/wsl-tech-preview/">wsl2 版 docker 下载</a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>下载完成后，先勾选 wsl2。<br><img src="/images/enable-wsl2.png" alt="配置"></p><p>然后直接重启 docker。</p><p>重启完成后，勾选你的发行版子系统。<br><img src="/images/ubuntu.png" alt="image.png"></p><p>然后再次重启 docker。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><img src="/images/test.png" alt="image.png"></p><p>重装好像把我之前的镜像都给弄没了，切到 laradock 重新下载。</p><p><img src="/images/visited.png" alt="image.png"></p><p>正常访问，打完收工。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 子系统（wsl1）运行 laradock</title>
      <link href="/2020/01/14/wsl-laradock/"/>
      <url>/2020/01/14/wsl-laradock/</url>
      
        <content type="html"><![CDATA[<p>子系统出来挺长时间了，看看配置，公司的渣机也就能玩玩wsl1，也就是第一代子系统。</p><p>算了，就这么鼓捣吧。</p><p>子系统选择 Ubuntu。</p><p><img src="/images/cover.png"></p><span id="more"></span><h4 id="安装子系统"><a href="#安装子系统" class="headerlink" title="安装子系统"></a>安装子系统</h4><p>略</p><h4 id="配置-docker"><a href="#配置-docker" class="headerlink" title="配置 docker"></a>配置 docker</h4><p><a href="%5Bhttps://docs.docker.com/install/linux/docker-ce/ubuntu/%5D(https://docs.docker.com/install/linux/docker-ce/ubuntu/">官网配置手册</a></p><p>先卸载旧版docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>然后再继续安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 更新索引</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># 安装软件，允许 apt 通过 https 访问存储库</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line"></span><br><span class="line"># 添加Docker的官方GPG密钥</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># 设置存储库</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br><span class="line"></span><br><span class="line"># 安装 docker 客户端</span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line"># 赋权</span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"></span><br><span class="line"># 安装 docker-compose</span><br><span class="line">sudo apt install docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关联-wsl-到-docker-for-windows"><a href="#关联-wsl-到-docker-for-windows" class="headerlink" title="关联 wsl 到 docker-for-windows"></a>关联 wsl 到 docker-for-windows</h4><p>在 wsl 中运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export DOCKER_HOST=tcp://localhost:2375&quot; &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="wsl-目录挂载"><a href="#wsl-目录挂载" class="headerlink" title="wsl 目录挂载"></a>wsl 目录挂载</h4><p>wsl 目录挂载默认在 <code>/mnt/c</code>，跟 docker-for-windows 的工作方式不一致，因此需要做下调整。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/wsl.conf</span><br><span class="line"></span><br><span class="line">[automount]</span><br><span class="line">root = /</span><br><span class="line">options = &quot;metadata&quot;</span><br></pre></td></tr></table></figure><p>保存以后，重启 wsl。</p><h4 id="启动laradock"><a href="#启动laradock" class="headerlink" title="启动laradock"></a>启动laradock</h4><p>在 windows 的 laradock 目录中打开命令行，运行 <code>bash</code> 即可快速进入 wsl 中的对应目录，然后再执行 <code>docker-compose up</code> 命令就能启动服务。</p><p>启动完以后，宿主机直接访问即可。</p><p>如果配置虚拟域名，一样是在宿主机的 hosts 添加。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 laravel vue 中使用 svg 图标</title>
      <link href="/2019/10/28/laravel-vue-svg/"/>
      <url>/2019/10/28/laravel-vue-svg/</url>
      
        <content type="html"><![CDATA[<p>在 laravel vue 中使用 svg 图标<br><img src="/images/laravel-vue.jpg"></p><span id="more"></span><h4 id="安装扩展组件："><a href="#安装扩展组件：" class="headerlink" title="安装扩展组件："></a>安装扩展组件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install laravel-mix-svg-vue</span><br><span class="line">or</span><br><span class="line">yarn add laravel-mix-svg-vue</span><br></pre></td></tr></table></figure><h4 id="在-webpack-mix-js-中添加引用："><a href="#在-webpack-mix-js-中添加引用：" class="headerlink" title="在 webpack.mix.js 中添加引用："></a>在 webpack.mix.js 中添加引用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mix = require(&#x27;laravel-mix&#x27;);</span><br><span class="line">require(&#x27;laravel-mix-svg-vue&#x27;);</span><br><span class="line"></span><br><span class="line">mix.js(&#x27;resources/js/app.js&#x27;, &#x27;public/js&#x27;)</span><br><span class="line">    .svgVue();</span><br></pre></td></tr></table></figure><h4 id="在-app-js-中引用组件"><a href="#在-app-js-中引用组件" class="headerlink" title="在 app.js 中引用组件"></a>在 app.js 中引用组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import SvgVue from &#x27;svg-vue&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(SvgVue);</span><br></pre></td></tr></table></figure><h4 id="svg-使用："><a href="#svg-使用：" class="headerlink" title="svg 使用："></a>svg 使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg-vue icon=&quot;avatar&quot;&gt;&lt;/svg-vue&gt;</span><br></pre></td></tr></table></figure><h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    svgPath: &#x27;resources/svg&#x27;,</span><br><span class="line">    extract: false,</span><br><span class="line">    svgoSettings: [</span><br><span class="line">        &#123; removeTitle: true &#125;,</span><br><span class="line">        &#123; removeViewBox: false &#125;,</span><br><span class="line">        &#123; removeDimensions: true &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>svgPath</td><td>String</td><td>resources/svg</td><td>svg 图标路径</td></tr><tr><td>extract</td><td>Boolean</td><td>false</td><td>将 svg 与主包分离</td></tr><tr><td>svgoSettings</td><td>Array</td><td>[{ removeTitle: true }, { removeViewBox: false }, { removeDimensions: true }]</td><td>svgo 相关设置</td></tr></tbody></table><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>好像是不能通过参数动态改变 svg 内容，没试出来，不知道什么原因。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 laradock 环境中使用 laravel-swoole 的 websocket</title>
      <link href="/2019/10/12/laravel-swoole-socket-in-laradock/"/>
      <url>/2019/10/12/laravel-swoole-socket-in-laradock/</url>
      
        <content type="html"><![CDATA[<p>之前写了一篇 <a href="https://www.m-finder.com/2019/08/23/laravel-swoole-in-laradock/">在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用</a> 的博客，算是敲开了 laravel-swoole 的大门，今天就继续研究下期中的 websocket 功能。</p><p><img src="/images/laradock.png"></p><span id="more"></span><h4 id="安装-laravel-swoole"><a href="#安装-laravel-swoole" class="headerlink" title="安装 laravel-swoole"></a>安装 laravel-swoole</h4><p>这里就不写了，参考上篇。</p><h4 id="配置-socket"><a href="#配置-socket" class="headerlink" title="配置 socket"></a>配置 socket</h4><p>编辑 laravel  env 文件，写入如下一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SWOOLE_HTTP_WEBSOCKET=true</span><br></pre></td></tr></table></figure><p>然后执行 <code>php artisan swoole:http infos</code> 查看状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+-----------------------------------------------------+</span><br><span class="line">| Name            | Value                                               |</span><br><span class="line">+-----------------+-----------------------------------------------------+</span><br><span class="line">| PHP Version     | 7.2.21-1+ubuntu16.04.1+deb.sury.org+1               |</span><br><span class="line">| Swoole Version  | 4.4.4                                               |</span><br><span class="line">| Laravel Version | 5.8.33                                              |</span><br><span class="line">| Listen IP       | workspace                                           |</span><br><span class="line">| Listen Port     | 1215                                                |</span><br><span class="line">| Server Status   | Online                                              |</span><br><span class="line">| Reactor Num     | 2                                                   |</span><br><span class="line">| Worker Num      | 2                                                   |</span><br><span class="line">| Task Worker Num | 2                                                   |</span><br><span class="line">| Websocket Mode  | On                                                  |</span><br><span class="line">| Master PID      | 326                                                 |</span><br><span class="line">| Manager PID     | 327                                                 |</span><br><span class="line">| Log Path        | /var/www/laravel-learn/storage/logs/swoole_http.log |</span><br><span class="line">+-----------------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure><p>可以看到 <code>Websocket Mode</code> 一项已经打开了。</p><h4 id="编辑-socket-路由"><a href="#编辑-socket-路由" class="headerlink" title="编辑 socket 路由"></a>编辑 socket 路由</h4><p>在 <code>routes/websocket.php</code> 中:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Websocket</span>::<span class="title function_ invoke__">on</span>(<span class="string">&#x27;connect&#x27;</span>, function (<span class="variable">$websocket</span>, Request <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="comment">// called while socket on connect</span></span><br><span class="line">    <span class="variable">$websocket</span>-&gt;<span class="title function_ invoke__">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Websocket</span>::<span class="title function_ invoke__">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, function (<span class="variable">$websocket</span>) &#123;</span><br><span class="line">    <span class="comment">// called while socket on disconnect</span></span><br><span class="line">    <span class="variable">$websocket</span>-&gt;<span class="title function_ invoke__">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;server is gone, bye~&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Websocket</span>::<span class="title function_ invoke__">on</span>(<span class="string">&#x27;example&#x27;</span>, function (<span class="variable">$websocket</span>, <span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="variable">$websocket</span>-&gt;<span class="title function_ invoke__">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此文件修改后需要重启 <code>swoole:http</code>。</p><h4 id="前端连接-socket"><a href="#前端连接-socket" class="headerlink" title="前端连接 socket"></a>前端连接 socket</h4><p>因为 laravel-swoole 使用的是 <code>Socket.io</code>，所以这里也采用这个。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://study.test:8080/&#x27;</span>, &#123;<span class="attr">transports</span>: [<span class="string">&#x27;websocket&#x27;</span>], <span class="attr">reconnection</span>: <span class="literal">true</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">emit</span>(<span class="string">&#x27;example&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;disconnect&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>如果你用的 swoole 版本为 <code> 4.4.4</code>，那么还需要对上篇文章中的 nginx 配置做个小修改，即添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.1;</span><br></pre></td></tr></table></figure><p>完整配置就不贴了，把这一行加在 <code>proxy_pass http://swoole-http$suffix;</code> 这一行前后都行。</p><p>如果没有这一行的话，而且怎么也没反应的话，记得去 log 中找具体报错。</p><p>emmm，文档没写，在 issue 里扒出来的……</p><p><img src="/images/demo.png" alt="演示"></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 内存溢出的解决方法</title>
      <link href="/2019/09/24/python-out-of-memory/"/>
      <url>/2019/09/24/python-out-of-memory/</url>
      
        <content type="html"><![CDATA[<p>运行在服务器上的数据同步脚本突然出现已杀死，谁把你杀了，咋就突然被杀了？？？</p><p><img src="/images/kn.jpg" alt="真実はいつも一つ！"></p><span id="more"></span><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><p>切换到 <code>var/log/</code> 查看 messages，发现是 <code>Out of memory: Kill process 13678 (python3) score 906 or sacrifice child</code></p><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>这就奇怪了，数据同步脚本每次运行完都会释放内存的，而且已经从常开的死循环改成了 <code>BlockingScheduler</code> 的定时任务，按理说不应该消耗大量内存。</p><p>数据同步没问题，那就只能是其他程序消耗了，想起来这里不紧运行了数据同步，还有一个 laravel 项目和一个 django 项目，laravel 为 django 提供接口，问题很有可能就出现在 django！</p><p>运行 top 查看 python 的内存消耗，然后通过 laravel 调用一下接口，发现内存确实上涨并且一直没有释放。</p><p>罪魁祸首终于找到了！</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>经过一番查询，django 引发内存泄漏一般有两种情况，一个是直接访问 django 的数据库接口时没有主动释放游标，另一个就是设置了 debug 模式，这个项目因为还在开发，所以 debug 模式确实开着。</p><p>改掉以后再试，果然内存不再飙升。</p><p>线上环境一定要慎重啊！</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年学习清单</title>
      <link href="/2019/08/23/2019-to-do-list/"/>
      <url>/2019/08/23/2019-to-do-list/</url>
      
        <content type="html"><![CDATA[<ul><li><del>laradock</del></li><li><del>laravel 内置 vue 的用法</del></li><li><del>laravel 事件</del></li><li><del>laravel 队列</del></li><li><del>laravel 内置测试模块</del></li><li><del>laravel 广播系统</del></li><li><del>laravel 消息通知</del></li><li><del>composer 扩展包开发</del></li><li>php travis ci 可持续集成</li><li><em>swoole 深入学习</em></li><li><del>trait 的实际应用</del></li><li>php 代码分析工具 PHPStan 的研究与学习</li><li><del>laravel 最新版项目实战</del></li><li><em>deep learning</em></li><li><del>卷积网络预测股票涨跌</del></li><li><del>laravel-swoole</del></li><li><del>laravel-admin</del></li></ul>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
          <category> 计划清单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
            <tag> 计划清单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用</title>
      <link href="/2019/08/23/laravel-swoole-in-laradock/"/>
      <url>/2019/08/23/laravel-swoole-in-laradock/</url>
      
        <content type="html"><![CDATA[<p>在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用。<br><img src="/images/laradock.png"></p><span id="more"></span><h4 id="安装laravel-swoole"><a href="#安装laravel-swoole" class="headerlink" title="安装laravel-swoole"></a>安装laravel-swoole</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer require swooletw/laravel-swoole</span><br><span class="line">php artisan vendor:publish --tag=laravel-swoole</span><br></pre></td></tr></table></figure><h4 id="开放-workspace-端口"><a href="#开放-workspace-端口" class="headerlink" title="开放 workspace 端口"></a>开放 workspace 端口</h4><p>在 <code>laradock/workspace/Dockerfile</code> 最后添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 1215</span><br></pre></td></tr></table></figure><p>然后重新 build workspace 容器。</p><h4 id="修改-nginx-配置"><a href="#修改-nginx-配置" class="headerlink" title="修改 nginx 配置"></a>修改 nginx 配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">upstream swoole-http &#123;</span><br><span class="line">    server workspace:1215;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    # For https</span><br><span class="line">    # listen 443 ssl;</span><br><span class="line">    # listen [::]:443 ssl ipv6only=on;</span><br><span class="line">    # ssl_certificate /etc/nginx/ssl/default.crt;</span><br><span class="line">    # ssl_certificate_key /etc/nginx/ssl/default.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server_name study.test;</span><br><span class="line">    root /var/www/laravel-learn/public;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location = /index.php &#123;</span><br><span class="line">            # Ensure that there is no such file named &quot;not_exists&quot;</span><br><span class="line">            # in your &quot;public&quot; directory.</span><br><span class="line">            try_files /not_exists @swoole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ @swoole;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @swoole &#123;</span><br><span class="line">        set $suffix &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        if ($uri = /index.php) &#123;</span><br><span class="line">            set $suffix &quot;/&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header Scheme $scheme;</span><br><span class="line">        proxy_set_header SERVER_PORT $server_port;</span><br><span class="line">        proxy_set_header REMOTE_ADDR $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">        # IF https</span><br><span class="line">        # proxy_set_header HTTPS &quot;on&quot;;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://swoole-http$suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 nginx</p><h4 id="修改-laravel-env"><a href="#修改-laravel-env" class="headerlink" title="修改 laravel env"></a>修改 laravel env</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SWOOLE_HTTP_HOST=workspace</span><br><span class="line">SWOOLE_HTTP_DAEMONIZE=true</span><br><span class="line">SWOOLE_HOT_RELOAD_ENABLE=true</span><br></pre></td></tr></table></figure><h4 id="启动-swoole"><a href="#启动-swoole" class="headerlink" title="启动 swoole"></a>启动 swoole</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan swoole:http start | stop | restart | resload</span><br></pre></td></tr></table></figure><h1 id="开发环境热更新"><a href="#开发环境热更新" class="headerlink" title="开发环境热更新"></a>开发环境热更新</h1><p>调整 swoole_http 中 <code>max_request = 1</code></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 docker 容器中安装 zend guard</title>
      <link href="/2019/08/18/docker-php-zend-guard/"/>
      <url>/2019/08/18/docker-php-zend-guard/</url>
      
        <content type="html"><![CDATA[<p>在 docker 容器中安装 zend guard。<br><img src="/images/docker.jpg" alt="docker"></p><span id="more"></span><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec php-fpm bash</span><br></pre></td></tr></table></figure><h4 id="更新环境"><a href="#更新环境" class="headerlink" title="更新环境"></a>更新环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install wget -y</span><br></pre></td></tr></table></figure><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://downloads.zend.com/guard/7.0.0/zend-loader-php5.6-linux-x86_64_update1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf zend-loader-php5.6-linux-x86_64_update1.tar.gz</span><br></pre></td></tr></table></figure><h4 id="查看扩展路径"><a href="#查看扩展路径" class="headerlink" title="查看扩展路径"></a>查看扩展路径</h4><p>在 php-info 中搜索路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension_dir</span><br></pre></td></tr></table></figure><p><img src="/images/path.png" alt="path"></p><h4 id="移动扩展包并使之生效"><a href="#移动扩展包并使之生效" class="headerlink" title="移动扩展包并使之生效"></a>移动扩展包并使之生效</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp *.so /usr/local/lib/php/extensions/no-debug-non-zts-20131226</span><br><span class="line">docker-php-ext-enable ZendGuardLoader</span><br></pre></td></tr></table></figure><h4 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h4><p>重启环境。<br><img src="/images/done.png"></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vue中使用laravel-permission的@can标签</title>
      <link href="/2019/08/02/use-laravel-permission-can-tag-in-vue/"/>
      <url>/2019/08/02/use-laravel-permission-can-tag-in-vue/</url>
      
        <content type="html"><![CDATA[<h4 id="1-在需要权限校验的-model-中新增方法"><a href="#1-在需要权限校验的-model-中新增方法" class="headerlink" title="1. 在需要权限校验的 model 中新增方法"></a>1. 在需要权限校验的 model 中新增方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllPermissionsAttribute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$permissions</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAllPermissions</span>();</span><br><span class="line">  <span class="variable">$permission_names</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">collect</span>(<span class="variable">$permissions</span>)-&gt;<span class="title function_ invoke__">map</span>(function (<span class="variable">$permission</span>) <span class="keyword">use</span> (&amp;$<span class="title">permission_names</span>) &#123;</span><br><span class="line">      $<span class="title">permission_names</span>[] = $<span class="title">permission</span>-&gt;<span class="title">name</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$permission_names</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在-app-blade-中存储当前用户的所有权限"><a href="#2-在-app-blade-中存储当前用户的所有权限" class="headerlink" title="2. 在 app.blade 中存储当前用户的所有权限"></a>2. 在 app.blade 中存储当前用户的所有权限</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    @auth</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">Permissions</span> = @<span class="title function_">json</span>(<span class="title class_">Auth</span>::<span class="title function_">user</span>()-&gt;allPermissions);</span></span><br><span class="line"><span class="language-javascript">    @<span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">Permissions</span> = [];</span></span><br><span class="line"><span class="language-javascript">    @endauth</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-新建-vue-component"><a href="#3-新建-vue-component" class="headerlink" title="3. 新建 vue component"></a>3. 新建 vue component</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            $can(permissionName) &#123;</span><br><span class="line">                return Permissions.indexOf(permissionName) !== -1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-在-app-js-注册-vue-组件"><a href="#4-在-app-js-注册-vue-组件" class="headerlink" title="4.  在 app.js 注册 vue 组件"></a>4.  在 app.js 注册 vue 组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import auth from &#x27;./components/AuthComponent&#x27;;\</span><br><span class="line">Vue.mixin(auth);</span><br></pre></td></tr></table></figure><h4 id="5-在vue中使用"><a href="#5-在vue中使用" class="headerlink" title="5. 在vue中使用"></a>5. 在vue中使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-if=&quot;$can(&#x27;admin.admins.delete&#x27;)&quot; class=&quot;text-danger&quot; @click=&quot;dataDelete(admin)&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 容器访问宿主机端口</title>
      <link href="/2019/07/31/docker-container-connect-localhost/"/>
      <url>/2019/07/31/docker-container-connect-localhost/</url>
      
        <content type="html"><![CDATA[<p>运行在 docker 容器中的一个项目需要访问宿主机的某个端口，比如容器 A 中的项目访问宿主机 B，在 A 的项目中以下边的地址来访问即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host.docker.internal</span><br></pre></td></tr></table></figure><p>之前是可以运行的，但是今天不知道什么情况突然 500 了，重启电脑后，在容器中 ping 这个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PING host.docker.internal (192.168.65.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.65.2: icmp_seq=1 ttl=37 time=2.09 ms</span><br><span class="line">64 bytes from 192.168.65.2: icmp_seq=2 ttl=37 time=1.05 ms</span><br><span class="line">64 bytes from 192.168.65.2: icmp_seq=3 ttl=37 time=1.05 ms</span><br><span class="line">64 bytes from 192.168.65.2: icmp_seq=4 ttl=37 time=1.16 ms</span><br><span class="line">64 bytes from 192.168.65.2: icmp_seq=5 ttl=37 time=1.03 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到实际访问的是 192.168.65.2 这个地址，那么在宿主机的 host 加上一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.65.2  host.docker.internal</span><br></pre></td></tr></table></figure><p>再次访问，ok！做个记录，防止下次再忘。</p><h4 id="安装ping"><a href="#安装ping" class="headerlink" title="安装ping"></a>安装ping</h4><p>不指定用户进入容器，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install iputils-ping</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈！</title>
      <link href="/2019/07/30/husky-is-getting-married/"/>
      <url>/2019/07/30/husky-is-getting-married/</url>
      
        <content type="html"><![CDATA[<p>很久很久以前，有只自认为自己是狼的哈士奇，叫大哈。</p><p>后来，他找到了一个让他愿意把骨头让出来的人。</p><p>祝他做一只幸福的哈士奇，每天都有骨头吃。</p><p><img src="/images/husky.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络学习</title>
      <link href="/2019/04/18/convnet-learn/"/>
      <url>/2019/04/18/convnet-learn/</url>
      
        <content type="html"><![CDATA[<p>卷积神经网络，计算机视觉应用几乎都在使用的一种深度学习模型。</p><p>一般用于训练数据集较小的问题，比如图像分类。</p><p><img src="/images/cover.gif"></p><span id="more"></span><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>卷积神经网络是一种多层神经网络，主要由输入层，卷积层，激励函数，池化层和全连接层组成，可以通过一系列方法，成功将数据量庞大的图片识别问题不断降维，最终使其能够被训练。</p><h6 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h6><p>即数据的输入。</p><p>通过传入参数 <code>input_shape=(28, 28, 1)</code> 来设置网络接收张量的形状。</p><h6 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h6><p>使用卷积核来进行特征提取和特征映射。</p><p>当我们输入的图像是 28 * 28 * 1 ，定义一个 3 * 3 的卷积核来对图像进行卷积操作（可以理解为一个滑动窗口，把卷积核与对应的图像像素做乘积然后求和），得到了 3 * 3 的卷积结果。</p><p>这个过程我们可以理解为我们使用一个过滤器（卷积核）来过滤图像的各个小区域，从而得到这些小区域的特征值。</p><p><img src="/images/conv.gif"></p><h6 id="激励层"><a href="#激励层" class="headerlink" title="激励层"></a>激励层</h6><p>激励层主要对卷积层的输出进行一个非线性映射，因为卷积层的计算还是一种线性计算。</p><p>使用的激励函数一般是 ReLu。</p><p>卷积层和激励层一般合并在一起成为“卷积层”。</p><h6 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h6><p>其实就是下采样。一般在卷积层后边，通过池化来压缩卷积层输出的特征向量，使特征图变小，简化网络计算复杂度，同时改善结果。</p><h6 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h6><p>在这里的作用由提取特征变成了分类。</p><h4 id="实例化网络"><a href="#实例化网络" class="headerlink" title="实例化网络"></a>实例化网络</h4><p>实例化一个简单的卷积神经网络模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line">model.add(layers.Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)))</span><br><span class="line">model.add(layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(layers.MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model.summary())</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param #</span><br><span class="line">=================================================================</span><br><span class="line">conv2d_1 (Conv2D)            (None, 26, 26, 32)        320</span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (None, 13, 13, 32)        0</span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (None, 11, 11, 64)        18496</span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2 (None, 5, 5, 64)          0</span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)            (None, 3, 3, 64)          36928</span><br><span class="line">=================================================================</span><br><span class="line">Total params: 55,744</span><br><span class="line">Trainable params: 55,744</span><br><span class="line">Non-trainable params: 0</span><br><span class="line">_________________________________________________________________</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>首先是网络层设置，这里是 5 层神经网络。</p><p>添加第一个卷积层，滤波器数量是 32，卷积窗口大小是 3 * 3，strides 指卷积沿高度和宽度的步幅，默认（1, 1），padding 是指卷积窗口滑动的方式，两个参数：默认 VALID 和 SAME，SAME 采用的是补全，即宽度不够时先补 0 再滑动，VALID 则直接丢弃多余的元素，激励函数选择 relu。因为是第一层，所以需要说明输入数据的 shape。</p><p>第一层 pooling（池化，下采样），将数据分辨率长宽各降低一半。</p><p>然后再继续添加，接下来把最后输出张量 （3， 3， 64）展平输入到一个全连接层。</p><h4 id="添加全连接层分类器"><a href="#添加全连接层分类器" class="headerlink" title="添加全连接层分类器"></a>添加全连接层分类器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><p>继续打印,查看模型结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flatten_1 (Flatten)          (None, 576)               0</span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (None, 64)                36928</span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (None, 10)                650</span><br></pre></td></tr></table></figure><p>可以看到数据再丢入分类器之前被展平成了一维 (None, 576)</p><h4 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br><span class="line">train_images = train_images.reshape((<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))</span><br><span class="line">train_images = train_images.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br><span class="line">test_images = test_images.reshape((<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>))</span><br><span class="line">test_images = test_images.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br><span class="line">train_labels = to_categorical(train_labels)</span><br><span class="line">test_labels = to_categorical(test_labels)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;rmsprop&#x27;</span>,</span><br><span class="line">              loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">model.fit(train_images, train_labels, epochs=<span class="number">5</span>, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">test_loss, test_acc = model.evaluate(test_images, test_labels)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_acc)</span><br></pre></td></tr></table></figure><p>先通过张量变形格式化数据， 然后配置学习过程，开始训练。</p><p><img src="/images/keras-res.png"><br>最后打印结果可以看到精度为 0.9913 ，比之前的神经网络精度高了很多。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keras </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 广播系统学习</title>
      <link href="/2019/04/12/laravel-broadcasting/"/>
      <url>/2019/04/12/laravel-broadcasting/</url>
      
        <content type="html"><![CDATA[<p>看到广播系统，先想起了曾经虐过我的即时通讯。</p><p>虽然都是对 websocket 的应用，但是好像又有点区别，这里好好学习一下。</p><p><img src="/images/laravel.jpg"></p><span id="more"></span><p>laravel 的广播与事件紧密相关，广播即对事件进行广播，因此在学习广播之前，要先阅读事件和监听器的相关文档。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>老规矩，先来看配置文件 <code>config/broadcasting.php</code> 里边的配置选项：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Default Broadcaster</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | This option controls the default broadcaster that will be used by the</span></span><br><span class="line"><span class="comment">    | framework when an event needs to be broadcast. You may set this to</span></span><br><span class="line"><span class="comment">    | any of the connections defined in the &quot;connections&quot; array below.</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | Supported: &quot;pusher&quot;, &quot;redis&quot;, &quot;log&quot;, &quot;null&quot;</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;default&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;BROADCAST_DRIVER&#x27;</span>, <span class="string">&#x27;null&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Broadcast Connections</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | Here you may define all of the broadcast connections that will be used</span></span><br><span class="line"><span class="comment">    | to broadcast events to other systems or over websockets. Samples of</span></span><br><span class="line"><span class="comment">    | each available type of connection are provided inside this array.</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;connections&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;pusher&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;pusher&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;PUSHER_APP_KEY&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;PUSHER_APP_SECRET&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;app_id&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;PUSHER_APP_ID&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;options&#x27;</span> =&gt; [</span><br><span class="line">                <span class="string">&#x27;cluster&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;PUSHER_APP_CLUSTER&#x27;</span>),</span><br><span class="line">                <span class="string">&#x27;encrypted&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;redis&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;redis&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;connection&#x27;</span> =&gt; <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;log&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;log&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;null&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;null&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认情况下，laravel 提供了以上几种开箱即用的广播驱动器程序。</p><p><code>env</code> 配置文件中，默认的驱动为 <code>log</code>，意味着客户端不会受到任何信息，只是会把要广播的消息写入 log 文件中，跟学习目标不符，就先以 <code>pusher</code> 展开学习吧。</p><p>我们就以发布新文章后推送给所有用户为例。</p><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p>开始之前，必须要先注册 <code>App\Providers\BroadcastServiceProvider</code>，在 <code>config/app.php</code> 配置文件中的 <code>providers</code> 数组中取消对提供者的注释。</p><p>注册:<a href="https://dashboard.pusher.com/"> [ pusher ] </a></p><p>然后把相关参数配置到 <code>.env</code> 文件。</p><h4 id="安装组件："><a href="#安装组件：" class="headerlink" title="安装组件："></a>安装组件：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> pusher/pusher-php-server</span><br><span class="line">npm install --save laravel-<span class="keyword">echo</span> pusher-js</span><br></pre></td></tr></table></figure><p>添加文章模块，包含 migrate，controller，model，view 和 router 等内容。</p><h4 id="新建事件："><a href="#新建事件：" class="headerlink" title="新建事件："></a>新建事件：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:event NewArticleNotificationEvent</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件内容：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Events</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">Channel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">PrivateChannel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Events</span>\<span class="title">Dispatchable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>\<span class="title">InteractsWithSockets</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Broadcasting</span>\<span class="title">ShouldBroadcast</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Article</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewArticleNotificationEvent</span> <span class="keyword">implements</span> <span class="title">ShouldBroadcast</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithSockets</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$article</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new event instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Article <span class="variable">$article</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;article = <span class="variable">$article</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">broadcastWith</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;article-&gt;title,</span><br><span class="line">            <span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;article-&gt;content,</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;article-&gt;user-&gt;name</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the channels the event should broadcast on.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Broadcasting\Channel|array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">broadcastOn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Channel</span>(<span class="string">&#x27;articles&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p>在保存文章的控制器中触发事件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">only</span>([<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>]), [<span class="string">&#x27;uid&#x27;</span> =&gt; <span class="title class_">Auth</span>::<span class="title function_ invoke__">id</span>()]);</span><br><span class="line"><span class="variable">$article</span> = <span class="title class_">Article</span>::<span class="title function_ invoke__">create</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">broadcast</span>(<span class="keyword">new</span> <span class="title class_">NewArticleNotificationEvent</span>(<span class="variable">$article</span>));</span><br></pre></td></tr></table></figure><h4 id="前端监听"><a href="#前端监听" class="headerlink" title="前端监听"></a>前端监听</h4><p>文章列表用了vue组件，在这个组件中进行事件监听。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;table class=&quot;table table-striped&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;Author&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;Title&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;Content&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;Created At&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr v-for=&quot;article in articles&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;article.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;article.user.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;article.title&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;article.content&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;article.created_at&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#x27;articles&#x27;],</span><br><span class="line">    created() &#123;</span><br><span class="line">        Echo.channel(&#x27;articles&#x27;).listen(&#x27;NewArticleNotificationEvent&#x27;, (article) =&gt; &#123;</span><br><span class="line">            console.log(article);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>写好后要在命令行执行 npm run watch-poll 实时编译文件。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>写篇文章测试一下：<br><img src="new.png"></p><p><img src="mes.png"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>不需要创建 channel 路由</li><li>不需要开启队列监听</li><li>如果没反应请先强制刷新浏览器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 测试模块学习</title>
      <link href="/2019/04/11/laravel-testing/"/>
      <url>/2019/04/11/laravel-testing/</url>
      
        <content type="html"><![CDATA[<p>学习下 larave 内置的测试模块。</p><blockquote><p>当你想把一些东西写到 print 语句或者调试表达式中时，别这么做，将其写成一个测试来代替。<br>       –Martin Fowler</p></blockquote><p><img src="/images/laravel.jpg"></p><span id="more"></span><p>最开始看到的关于 laravel 测试的信息是借助模型工厂来生成测试数据，今天查完资料发现，这只是测试中的一小部分。</p><p>laravel 内置了 PHPUnit 来做测试，并且已经做好了配置文件，还提供了一些便利的辅助函数，可以更直观的测试程序。</p><p>在 laravel 的项目中，包含一个 tests 目录，这个目录又有两个子目录：<code>Feature</code> 和 <code>Unit</code> 分别用来做功能测试和单元测试。</p><p>功能测试用于测试较大区块的代码，包括若干组件之间的交互，甚至一个完整的 HTTP 请求。</p><p>单元测试用于小的 、相互隔离的代码。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>可以使用默认的配置，也可以创建一个 <code>.env.testing</code> 文件，在运行测试或执行带有    <code>--env=testing</code> 开关的 Artisan 命令时覆盖 <code>.env</code> 文件中的环境变量。</p><h4 id="创建-amp-运行测试"><a href="#创建-amp-运行测试" class="headerlink" title="创建 &amp; 运行测试"></a>创建 &amp; 运行测试</h4><p>运行 artisan 生成测试用例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Feature 目录下创建测试类</span></span><br><span class="line">php artisan make:test UserTest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Unit 目录下创建测试类</span></span><br><span class="line">php artisan make:test UserTest --unit</span><br></pre></td></tr></table></figure><p>先生成一个单元测试，然后改造一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$user</span>-&gt;name;</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">ucfirst</span>(<span class="variable">$user</span>-&gt;name);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$username</span>, <span class="variable">$name</span>);</span><br></pre></td></tr></table></figure><p>把用户名首s字母大写，然后判断和原用户名是否相等。</p><p>运行结果如下：</p><p><img src="/images/res-1.png"></p><h4 id="HTTP测试"><a href="#HTTP测试" class="headerlink" title="HTTP测试"></a>HTTP测试</h4><p>新建一个路由和方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/user-info/&#123;id?&#125;&#x27;</span>, <span class="string">&#x27;HomeController@userInfo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">request</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="新建测试"><a href="#新建测试" class="headerlink" title="新建测试"></a>新建测试</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:test HttpStatusTest</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">ucfirst</span>(<span class="variable">$user</span>-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/user-info/1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span>-&gt;<span class="title function_ invoke__">assertStatus</span>(<span class="number">200</span>)</span><br><span class="line">-&gt;<span class="title function_ invoke__">assertJson</span>([</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>=&gt; <span class="string">&#x27;wu&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>=&gt; <span class="string">&#x27;yf-wu@qq.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;email_verified_at&#x27;</span>=&gt;<span class="literal">null</span>,</span><br><span class="line">    <span class="string">&#x27;created_at&#x27;</span>=&gt; <span class="string">&#x27;2019-04-09 07:36:52&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;updated_at&#x27;</span>=&gt; <span class="string">&#x27;2019-04-09 07:36:52&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h6 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h6><p>发现接口需要登录，所以会被拦截：<br><img src="/images/login.png"></p><p>所以需要先模拟用户登录，可以使用：<code>Auth::loginUsingId(1);</code> 使 id 为 1 的用户强制登录。</p><p>再次运行，结果 ok。</p><p><img src="/images/ok.png"></p><h4 id="数据库测试"><a href="#数据库测试" class="headerlink" title="数据库测试"></a>数据库测试</h4><p>数据库测试功能点更多，可以验证表中是否存在某条数据，也可以用来生成测试数据等。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertDatabaseHas</span>(<span class="string">&#x27;users&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;sally@example.com&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>也可以使用 <code>assertDatabaseMissing</code> 帮助程序断言数据库中不存在数据。</p><h6 id="生成模型工厂"><a href="#生成模型工厂" class="headerlink" title="生成模型工厂"></a>生成模型工厂</h6><p>运行命令生成模型工厂：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:factory PostFactory</span><br></pre></td></tr></table></figure><p>在项目的 <code>database\factories</code> 目录中，已经预先生成了一个 <code>UserFactory</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="title class_">User</span>::<span class="variable language_">class</span>, function (Faker <span class="variable">$faker</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;name,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;<span class="title function_ invoke__">unique</span>()-&gt;safeEmail,</span><br><span class="line">        <span class="string">&#x27;email_verified_at&#x27;</span> =&gt; <span class="title function_ invoke__">now</span>(),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi&#x27;</span>, <span class="comment">// password</span></span><br><span class="line">        <span class="string">&#x27;remember_token&#x27;</span> =&gt; <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">10</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>改造之前的 <code>TestUser</code> 来测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">factory</span>(<span class="title class_">User</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">create</span>([<span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;m@m-finder.com&#x27;</span>]);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertDatabaseHas</span>(<span class="string">&#x27;users&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;m@m-finder.com&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态ok。</p><p>更多操作还是要参考: <a href="http://www.phpunit.cn/"> [ PHPUnit ] </a></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习 -- 基于 keras 的手写数字识别示例</title>
      <link href="/2019/04/10/keras-mnist/"/>
      <url>/2019/04/10/keras-mnist/</url>
      
        <content type="html"><![CDATA[<p>MNIST 是 keras 中一个入门级的计算机视觉数据集，这个数据集包含各种各样的手写数字图片，其中包含 60000 张训练图像和 10000 张测试图像。</p><p>是解决手写数字分类问题的经典数据集，可以看做是深度学习的 ‘Hello World’。</p><p><img src="/images/keras.jpg"></p><span id="more"></span><h4 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</span><br></pre></td></tr></table></figure><p>这两行代码需要先运行，下载数据集。</p><p>下载过程会失败，多试几次，不需要翻墙。</p><p><code>train_images</code> 和  <code>train_labels</code> 为训练集， 分别为图片数据和标签数据。模型将从这些数据中进行学习。</p><p>然后在测试集： <code>test_images</code> 和 <code>test_labels</code> 上对模型进行测试。</p><h4 id="构建网络"><a href="#构建网络" class="headerlink" title="构建网络"></a>构建网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line">network = models.Sequential()</span><br><span class="line">network.add(layers.Dense(<span class="number">512</span>, activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">28</span> * <span class="number">28</span>,)))</span><br><span class="line">network.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure><p>神经网络的核心组件是层（layer），它是一种数据处理模块，可以将它看成数据过滤器。<br>大多数深度学习都是将简单的层链接起来，从而实现渐进式的数据蒸馏（data distillation）。深度学习模型就像是数据处理的筛子，包含一系列越来越精细的数据过滤器（即层）。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">network.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;rmsprop&#x27;</span>,</span><br><span class="line">                loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class="line">                metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure><p>loss: 损失函数，网络如何衡量在训练数据上的性能，即网络如何朝着正确的方向前进。<br>optimizer: 优化器，基于训练数据和损失函数来更新网络的机制<br>metrucs: 监控指标，本例只关心精度，即正确分类的图像所占的比例。</p><h4 id="准备图像数据"><a href="#准备图像数据" class="headerlink" title="准备图像数据"></a>准备图像数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_images = train_images.reshape((<span class="number">60000</span>, <span class="number">28</span> * <span class="number">28</span>))</span><br><span class="line">train_images = train_images.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br><span class="line">test_images = test_images.reshape((<span class="number">10000</span>, <span class="number">28</span> * <span class="number">28</span>))</span><br><span class="line">test_images = test_images.astype(<span class="string">&#x27;float32&#x27;</span>) / <span class="number">255</span></span><br></pre></td></tr></table></figure><p>开始之前，我们需要转换数据格式，让网络能够处理。<br>训练图像保存在一个uint8类型的数组中，其形状为 (60000, 28, 28)，取值区间为 [0, 255]。我们需要将其转换成一个 float32数组，形状为 (60000, 28 * 28)，取值范围为 0 ~ 1。</p><h4 id="准备标签"><a href="#准备标签" class="headerlink" title="准备标签"></a>准备标签</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical</span><br><span class="line">train_labels = to_categorical(train_labels)</span><br><span class="line">test_labels = to_categorical(test_labels)</span><br></pre></td></tr></table></figure><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.fit(train_images, train_labels, epochs=<span class="number">5</span>, batch_size=<span class="number">128</span>)</span><br></pre></td></tr></table></figure><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_loss, test_acc = network.evaluate(test_images, test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;test_acc:&#x27;</span>, test_acc)</span><br></pre></td></tr></table></figure><p>测试集精度为97.98%，比训练集精度低不少。</p><p>训练精度和测试精度之间的这种差距是过拟合（overfit）造成的。</p><p>这些东西接下来再继续学习。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keras </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 队列学习</title>
      <link href="/2019/04/09/laravel-queues/"/>
      <url>/2019/04/09/laravel-queues/</url>
      
        <content type="html"><![CDATA[<p>学习下 laravel 的队列系统。<br><img src="/images/laravel.jpg"></p><p>队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。</p><p>常用的队列后台有： Beanstalk，Amazon SQS，Redis 等。</p><span id="more"></span><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>laravel 为多种队列服务做了统一的API，在配置文件 <code>config/queue.php</code> 中可以找到每种队列驱动的配置。</p><p>其中每种驱动都有一个默认的 queue 属性，用来存放使用时没有显示定义队列的任务。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分发到默认队列</span></span><br><span class="line"><span class="title class_">Job</span>::<span class="title function_ invoke__">dispatch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分发到 emails 队列</span></span><br><span class="line"><span class="title class_">Job</span>::<span class="title function_ invoke__">dispatch</span>()-&gt;<span class="title function_ invoke__">onQueue</span>(<span class="string">&#x27;emails&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在项目的配置文件中，可以指定驱动，老版本中为 <code>QUEUE_DRIVER</code>，新版本中为<code>QUEUE_CONNECTION</code> , 驱动默认为 <code>sync</code>，这是一个本地的同步驱动，方便调试队列里的任务。</p><p>先以 redis 为例做一个邮件发送队列。</p><p>因为 laravel 的 redis 默认使用了 predis，所以先装下扩展：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require &#x27;predis/predis&#x27;</span><br></pre></td></tr></table></figure><p>邮件配置，最后两项是手动添加的，否则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.mxhichina.com</span><br><span class="line">MAIL_PORT=25</span><br><span class="line">MAIL_USERNAME=m@m-finder.com</span><br><span class="line">MAIL_PASSWORD=xxxxxx</span><br><span class="line">MAIL_ENCRYPTION=null</span><br><span class="line">MAIL_FROM_NAME=M-finder</span><br><span class="line">MAIL_FROM_ADDRESS=m@m-finder.com</span><br></pre></td></tr></table></figure><h4 id="生成任务类"><a href="#生成任务类" class="headerlink" title="生成任务类"></a>生成任务类</h4><p>命令行执行：<code>php artisan make:job EmailJob</code>，该命令会在 <code>app/jobs</code> 下自动创建文件。</p><p>在任务类中发送邮件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$email</span> = <span class="variable language_">$this</span>-&gt;email;</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&#x27;这是一封来自Laravel的队列测试邮件.&#x27;</span>;</span><br><span class="line">    <span class="title class_">Mail</span>::<span class="title function_ invoke__">raw</span>(<span class="variable">$content</span>, function (<span class="variable">$message</span>) <span class="keyword">use</span> ($<span class="title">email</span>) &#123;</span><br><span class="line">        $<span class="title">message</span>-&gt;<span class="title">subject</span>(&#x27;[ 测试 ] 测试邮件<span class="title">SendMail</span> - &#x27; . <span class="title">date</span>(&#x27;<span class="title">Y</span>-<span class="title">m</span>-<span class="title">d</span> <span class="title">H</span>:<span class="title">i</span>:<span class="title">s</span>&#x27;));</span><br><span class="line">        <span class="variable">$message</span>-&gt;<span class="title function_ invoke__">to</span>(<span class="variable">$email</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><p>之前弄了登录事件和监听，就在监听里去触发吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">EmailJob</span>::<span class="title function_ invoke__">dispatch</span>(<span class="variable">$guard</span>-&gt;user)-&gt;<span class="title function_ invoke__">onQueue</span>(<span class="string">&#x27;emails&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="开启队列"><a href="#开启队列" class="headerlink" title="开启队列"></a>开启队列</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan queue:work --tries=<span class="number">3</span> --timeout=<span class="number">30</span> --queue=emails </span><br></pre></td></tr></table></figure><p>然后重新登录触发任务。<br>可以看到邮箱已经有了提示：</p><p><img src="/images/email.png" alt="邮件通知"></p><p>邮件已经成功发出，接下来就可以在实际的需求中使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 事件系统学习</title>
      <link href="/2019/04/03/laravel-events/"/>
      <url>/2019/04/03/laravel-events/</url>
      
        <content type="html"><![CDATA[<p>学习下 laravel 的事件系统。<br><img src="/images/laravel.jpg"></p><span id="more"></span><p>Laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。</p><p>先以一个登陆日志来作为例子开始事件的学习吧。</p><h4 id="注册事件-amp-amp-监听器"><a href="#注册事件-amp-amp-监听器" class="headerlink" title="注册事件 &amp;&amp; 监听器"></a>注册事件 &amp;&amp; 监听器</h4><p>在 app\Providers\EventServiceProvider.php 中，添加以下内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$listen</span> = [</span><br><span class="line">    <span class="title class_">Registered</span>::<span class="variable language_">class</span> =&gt; [</span><br><span class="line">        <span class="title class_">SendEmailVerificationNotification</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;App\Events\LoginEvent&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LoginListener&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后运行命令，生成事件和监听器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan event:generate</span><br></pre></td></tr></table></figure><p>运行结束后，事件和监听器都会被自动创建好。<br><img src="laravel-events/new-event.png"></p><p>在监听中打个 log： info(‘user login event’)</p><p>然后找个控制器触发事件。</p><p><code>event(new LoginEvent());</code></p><p>可以看到 log 文件中有一条新纪录：</p><blockquote><p>[2019-03-27 08:16:21] local.INFO: user login event</p></blockquote><p>走到这里，理论上已经可以做很多事情了，但是对于登录日志来说，这样处理并不完美，因为 larave 内置已经写好了登录事件，只需要去调用就可以了。</p><h4 id="改造事件"><a href="#改造事件" class="headerlink" title="改造事件"></a>改造事件</h4><p>在身份验证处理过程中 Laravel 引发了多种事件 。<br>可以在 EventServiceProvider 中附着这些事件的监听器。<br><a href="https://laravel.com/docs/5.8/authentication#events">文档</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用的事件监听器映射。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$listen</span> = [</span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Registered&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogRegisteredUser&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Attempting&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogAuthenticationAttempt&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Authenticated&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogAuthenticated&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Login&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogSuccessfulLogin&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Failed&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogFailedLogin&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Logout&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogSuccessfulLogout&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\Lockout&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogLockout&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Illuminate\Auth\Events\PasswordReset&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;App\Listeners\LogPasswordReset&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里就只使用登录事件。<br>修改 EventServiceProvider：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Illuminate\Auth\Events\Login&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;App\Listeners\LoginListener&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再改改 listener：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$guard</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">info</span>(<span class="string">&#x27;user login event&#x27;</span>, [<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$guard</span>-&gt;user-&gt;name]);</span><br><span class="line">    <span class="title function_ invoke__">dd</span>(<span class="variable">$guard</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h4><p>退出帐号重新登录，可以看到以下内容：<br><img src="/images/out.png" alt="输出结果"></p><p>可以再优化一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$guard</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$log</span> = [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$guard</span>-&gt;user-&gt;name,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>=&gt; <span class="variable">$guard</span>-&gt;user-&gt;email,</span><br><span class="line">        <span class="string">&#x27;ip&#x27;</span>=&gt; <span class="title class_">\Request</span>::<span class="title function_ invoke__">getClientIp</span>(<span class="literal">true</span>),</span><br><span class="line">        <span class="string">&#x27;datetime&#x27;</span> =&gt; <span class="title class_">Carbon</span>::<span class="title function_ invoke__">now</span>()</span><br><span class="line">    ];</span><br><span class="line">    <span class="title function_ invoke__">info</span>(<span class="string">&#x27;user login event&#x27;</span>, <span class="variable">$log</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以选中用 log 存储还是用 mysql 存储。</p><p>事件的学习就是这些了，平时开发要经常使用避免遗忘。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laradock 中 php5.6 连接 mysql 报错解决</title>
      <link href="/2019/03/21/laradock-php-5-6-connect-mysql/"/>
      <url>/2019/03/21/laradock-php-5-6-connect-mysql/</url>
      
        <content type="html"><![CDATA[<p>laradock 中 php 5.6 连接 mysql 报错的解决方法。</p><p><img src="/images/laradock.png"></p><span id="more"></span><p>之前弄的是默认版本的 php 7.2 和 mysql 8，配置好以后一直都能正常使用。</p><p>最近因为需要切换 php 版本，突然发现切换后连接 mysql 时无法识别 host。</p><p>emmmm……，最开始还以为是 php 的锅，各种重新 build，无果，最后在 github 上找到别人发出来的解决办法：</p><blockquote><p>rm -rf ~/.laradock/data/mysql<br>删除老版本的数据</p><p>docker-compose build mysql<br>重新构建 mysql</p><p>进入 mysql 容器<br>mysql -uroot -p<br>root<br>ALTER USER root IDENTIFIED WITH mysql_native_password BY ‘root’;<br>exit;</p></blockquote><p>到这里也就可以了。</p><p>有这个问题是因为 8 和 5.7 的配置不一样，不清掉老数据的话会引起报错，一有请求去连接 mysql 马上就宕机。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 服务容器</title>
      <link href="/2019/03/15/laravel-container/"/>
      <url>/2019/03/15/laravel-container/</url>
      
        <content type="html"><![CDATA[<p>在 Laravel 生命周期中，我们了解到框架运行过程中，会通过创建应用实例来完成很多事情，这个应用实例，也就是我们今天的主角，服务容器。</p><p>Laravel 的服务容器，是用于管理类的依赖和执行依赖注入的工具。</p><p><img src="/images/laravel.jpg"></p><span id="more"></span><h4 id="依赖注入-DI"><a href="#依赖注入-DI" class="headerlink" title="依赖注入 DI"></a>依赖注入 DI</h4><p>开始之前，需要我们先了解一下，什么是依赖注入。</p><p>简单来说，就是将类的依赖通过参数或其他方式注入。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">interface Storage&#123;</span><br><span class="line">  public function set($key, $value);</span><br><span class="line">  public function get($key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SessionStorage implements Storage&#123;</span><br><span class="line">    function __construct($cookieName=&#x27;PHPSESSID&#x27;)&#123;</span><br><span class="line">        session_name($cookieName);</span><br><span class="line">        session_start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function set($key, $value)&#123;</span><br><span class="line">        $_SESSION[$key] = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get($key)&#123;</span><br><span class="line">        return $_SESSION[$key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User&#123;</span><br><span class="line">  private $storage;</span><br><span class="line"></span><br><span class="line">  function __construct(Storage $storage)&#123;</span><br><span class="line">      $this-&gt;storage = $storage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setLanguage($language)&#123;</span><br><span class="line">    $this-&gt;storage-&gt;set(&#x27;language&#x27;, $language);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$storage = new SessionStorage(&#x27;SESSION_ID&#x27;);</span><br><span class="line">$user = new User($storage);</span><br></pre></td></tr></table></figure><p><code>依赖注入</code> 并不局限于构造函数，也可以通过设值方法注入，或者类成员变量方式，通过构造函数注入适用于必要的依赖，设值注入适用于可选依赖，比如项目需要一个缓存功能的实现。<br>在上面的例子中，我们如果需要改用 Redis 或者 MongoDB 来存储数据，只需要继承并实现 Storage 接口，然后在外部就可以很轻松的切换服务了。</p><h4 id="依赖注入容器-IOC"><a href="#依赖注入容器-IOC" class="headerlink" title="依赖注入容器 IOC"></a>依赖注入容器 IOC</h4><p>在实际的开发中，用上边的依赖注入方式还是很累的，所以，我们还需要了解一个新的概念，依赖注入容器，也可以叫控制反转。</p><p>简单来说，依赖注入容器就是将组件间的依赖关系由程序内部提到外部容器来管理，也就是将依赖的配置和使用分开，原本是程序控制执行流程，现在程序反倒成了被控制的对象，也就形成了控制反转。</p><p>通常用于管理大量依赖组件的实例。比如一个框架。</p><p>首先，我们可以定义一个容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">    public function getStorage()</span><br><span class="line">    &#123;</span><br><span class="line">        return new SessionStorage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getUser()</span><br><span class="line">    &#123;</span><br><span class="line">        return new User($this-&gt;getStorage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 更改实例化方式</span><br><span class="line">$container = new Container();</span><br><span class="line">$user = $container-&gt;getUser();</span><br></pre></td></tr></table></figure><p>在这个容器中，我们只需要调用容器 <code>getUser</code> 方法，既可以获取到 User 实例，并不需要关心它是怎么创建出来的。</p><p>但是，这个容器还存在一些问题，Storage 的实例化还是硬编码，如果要切换其他服务，只能通过改代码的方式。</p><p>对此，我们可以再次升级容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">    protected $binds;</span><br><span class="line"></span><br><span class="line">    protected $instances;</span><br><span class="line"></span><br><span class="line">    // 绑定</span><br><span class="line">    public function bind($abstract, $concrete)</span><br><span class="line">    &#123;</span><br><span class="line">        // 判断是否为匿名函数</span><br><span class="line">        if ($concrete instanceof Closure) &#123;</span><br><span class="line">            $this-&gt;binds[$abstract] = $concrete;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;instances[$abstract] = $concrete;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实例化</span><br><span class="line">    public function make($abstract, $parameters = [])</span><br><span class="line">    &#123;</span><br><span class="line">        if (isset($this-&gt;instances[$abstract])) &#123;</span><br><span class="line">            return $this-&gt;instances[$abstract];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        array_unshift($parameters, $this);</span><br><span class="line"></span><br><span class="line">        return call_user_func_array($this-&gt;binds[$abstract], $parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$container = new Container;</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(&#x27;Storage&#x27;, function($container)&#123;</span><br><span class="line">    return new SessionStorage;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$container-&gt;bind(&#x27;User&#x27;,function($container,$module)&#123;</span><br><span class="line">    return new User($container-&gt;make($module));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$user = $container-&gt;make(&#x27;User&#x27;,[&#x27;Storage&#x27;]);</span><br></pre></td></tr></table></figure><p>一个类似于 laravel 的服务容器就好了，当然 larave 的服务容器比这个要复杂的多。</p><p>总的来说，laravel 的服务容器有两大功能：</p><ul><li>注册基础服务</li><li>管理需要实例化的类及其依赖</li></ul><h4 id="Laravel-服务容器的使用方法"><a href="#Laravel-服务容器的使用方法" class="headerlink" title="Laravel 服务容器的使用方法"></a>Laravel 服务容器的使用方法</h4><p>laravel 服务容器在使用时一般分为两个阶段：使用之前进行绑定（bind）完成将实现绑定到接口；使用时对通过接口解析（make）出服务。</p><p>laravel 内置多种不同的绑定方法以用于不同的使用场景：</p><ul><li>bind 简单绑定</li><li>singleton 单例绑定</li><li>instance 实例绑定</li><li>contextual-binding 上下文绑定</li><li>还有好几种，看文档吧</li></ul><p>它们的最终目标是一致的：绑定接口到实现。</p><p>这样的好处是在项目的编码阶段建立起接口和实现的映射关系，到使用阶段通过抽象类（接口）解析出它的具体实现，这样就实现了项目中的解耦。</p><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><p>bind 方法的功能是将实现与接口进行绑定，然后在每次执行服务解析操作时，Laravel 容器都会重新创建实例对象。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;app-&gt;bind(</span><br><span class="line">    UserRepositoryInterface::class,</span><br><span class="line">    UserRepository::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">class UserController extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    private $repository;</span><br><span class="line"></span><br><span class="line">    function __construct(UserRepositoryInterface $userRepository)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;repository = $userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function users()&#123;</span><br><span class="line">        return $this-&gt;repository-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务提供者中，将 <code>User</code> 仓库的具体实现与接口进行绑定，使用时可以直接通过接口注入依赖。</p><h5 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h5><p>采用单例绑定时，仅在首次解析时创建实例，后续使用 <code>make</code> 进行解析服务操作都将直接获取这个已解析的对象，实现共享操作。</p><p>绑定处理类似 <code>bind</code> 绑定，只需将 <code>bind</code> 方法替换成 <code>singleton</code> 方法即可。</p><h5 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h5><p>将已经创建的实例对象绑定到接口以供后续使用，这种使用场景类似于注册表。</p><p>比如用于存储用户模型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个用户实例</span><br><span class="line">$artisan = new User();</span><br><span class="line"></span><br><span class="line">// 将实例绑定到服务容器</span><br><span class="line">App::instance(&#x27;login-user&#x27;, $artisan);</span><br><span class="line"></span><br><span class="line">// 获取用户实例</span><br><span class="line">$artisan = App::make(&#x27;login-user&#x27;);</span><br></pre></td></tr></table></figure><h5 id="contextual-binding"><a href="#contextual-binding" class="headerlink" title="contextual-binding"></a>contextual-binding</h5><p>主要用于一个接口多处实现，然后根据不同控制器去进行判断具体应该用哪个实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;app-&gt;when(PhotoController::class)</span><br><span class="line">  -&gt;needs(Filesystem::class)</span><br><span class="line">  -&gt;give(function () &#123;</span><br><span class="line">      return Storage::disk(&#x27;local&#x27;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 生命周期</title>
      <link href="/2019/03/15/laravel-life-cycle/"/>
      <url>/2019/03/15/laravel-life-cycle/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的生命周期主要分为四个阶段：</p><ol><li>加载依赖</li><li>创建应用实例</li><li>接收请求并响应</li><li>请求结束进行回调</li></ol><p><img src="/images/laravel.jpg"></p><span id="more"></span><p>这四个阶段都在 index.php 中完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 加载依赖</span><br><span class="line">require __DIR__.&#x27;/../vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">// 创建应用实例</span><br><span class="line">$app = require_once __DIR__.&#x27;/../bootstrap/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">// 实例化 HTTP 内核</span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">// 接收请求，生成响应</span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 发送响应</span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">// 请求结束，进行回调</span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><h4 id="1-加载依赖"><a href="#1-加载依赖" class="headerlink" title="1. 加载依赖"></a>1. 加载依赖</h4><p>laravel 框架依赖 composer 管理扩展包，通过引入 composer 的自动加载程序，就可以轻松完成扩展加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require __DIR__.&#x27;/../vendor/autoload.php&#x27;;</span><br></pre></td></tr></table></figure><h4 id="2-创建应用实例"><a href="#2-创建应用实例" class="headerlink" title="2 创建应用实例"></a>2 创建应用实例</h4><p>这一步主要由以下几个小步骤组成：</p><ul><li>创建应用实例</li><li>完成基础注册<ul><li>基础绑定</li><li>基础服务提供者注册<ul><li>event</li><li>log</li><li>route</li></ul></li><li>核心类别名注册</li></ul></li><li>绑定核心</li></ul><p>创建应用实例，由 bootstrap/app.php 完成，然后注册三个核心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 第一部分： 创建应用实例</span><br><span class="line">$app = new Illuminate\Foundation\Application(</span><br><span class="line">    realpath(__DIR__.&#x27;/../&#x27;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">……</span><br></pre></td></tr></table></figure><h5 id="2-1-完成基础注册"><a href="#2-1-完成基础注册" class="headerlink" title="2.1 完成基础注册"></a>2.1 完成基础注册</h5><p>应用实例创建后，再来看一下具体是怎么工作的，打开 <code>Illuminate\Foundation\Application</code>，其代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function __construct($basePath = null)</span><br><span class="line">&#123;</span><br><span class="line">    // 应用的路径绑定</span><br><span class="line">    if ($basePath) &#123;</span><br><span class="line">        $this-&gt;setBasePath($basePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将基础绑定注册到容器中，容器名</span><br><span class="line">    $this-&gt;registerBaseBindings();</span><br><span class="line">    // 将基础服务提供者注册到容器 Event、Log、Route</span><br><span class="line">    $this-&gt;registerBaseServiceProviders();</span><br><span class="line">    // 将核心类别名注册到容器</span><br><span class="line">    $this-&gt;registerCoreContainerAliases();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-内核绑定"><a href="#2-2-内核绑定" class="headerlink" title="2.2 内核绑定"></a>2.2 内核绑定</h5><p>接着看 <code>bootstrap/app.php</code> 中的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"></span><br><span class="line">// 第二步，内核绑定</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>绑定三个内核，HTTP、Console、Exception内核。</p><h4 id="3-接收请求并响应"><a href="#3-接收请求并响应" class="headerlink" title="3 接收请求并响应"></a>3 接收请求并响应</h4><p>再次回到 index.php，查看请求和响应的相关代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>这一步也是由几个小步骤组成：</p><ul><li>实例化 HTTP 核心<ul><li>实例化内核</li><li>注册中间件到路由<ul><li>session</li><li>共享错误</li><li>身份验证请求</li><li>……</li></ul></li></ul></li><li>请求处理<ul><li>创建请求实例</li><li>处理请求，返回响应</li></ul></li><li>发送响应</li></ul><h5 id="3-1-注册中间件到路由"><a href="#3-1-注册中间件到路由" class="headerlink" title="3.1 注册中间件到路由"></a>3.1 注册中间件到路由</h5><p>在 <code>Illuminate\Contracts\Http\Kernel::class</code> 类的构造方法中，将在 HTTP 内核定义的「中间件」注册到路由，注册完后就可以在实际处理 HTTP 请求前调用这些「中间件」实现过滤请求的目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected $middlewarePriority = [</span><br><span class="line">    \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">    \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">    \Illuminate\Contracts\Auth\Middleware\AuthenticatesRequests::class,</span><br><span class="line">    \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    \Illuminate\Session\Middleware\AuthenticateSession::class,</span><br><span class="line">    \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">    \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">public function __construct(Application $app, Router $router)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;app = $app;</span><br><span class="line">    $this-&gt;router = $router;</span><br><span class="line"></span><br><span class="line">    $this-&gt;syncMiddlewareToRouter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 注册中间件到路由</span><br><span class="line">protected function syncMiddlewareToRouter()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;router-&gt;middlewarePriority = $this-&gt;middlewarePriority;</span><br><span class="line"></span><br><span class="line">    foreach ($this-&gt;middlewareGroups as $key =&gt; $middleware) &#123;</span><br><span class="line">        $this-&gt;router-&gt;middlewareGroup($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach ($this-&gt;routeMiddleware as $key =&gt; $middleware) &#123;</span><br><span class="line">        $this-&gt;router-&gt;aliasMiddleware($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-2-处理请求"><a href="#3-2-处理请求" class="headerlink" title="3.2 处理请求"></a>3.2 处理请求</h5><p>处理请求实际包含两个阶段：</p><ul><li>创建请求实例</li><li>处理请求</li></ul><h6 id="3-2-1-创建请求实例"><a href="#3-2-1-创建请求实例" class="headerlink" title="3.2.1 创建请求实例"></a>3.2.1 创建请求实例</h6><p>通过 Symfony 实例创建一个 Laravel 请求实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static function capture()</span><br><span class="line">&#123;</span><br><span class="line">    static::enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">    return static::createFromBase(SymfonyRequest::createFromGlobals());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static function createFromBase(SymfonyRequest $request)</span><br><span class="line">&#123;</span><br><span class="line">    $newRequest = (new static)-&gt;duplicate(</span><br><span class="line">        $request-&gt;query-&gt;all(), $request-&gt;request-&gt;all(), $request-&gt;attributes-&gt;all(),</span><br><span class="line">        $request-&gt;cookies-&gt;all(), $request-&gt;files-&gt;all(), $request-&gt;server-&gt;all()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    $newRequest-&gt;headers-&gt;replace($request-&gt;headers-&gt;all());</span><br><span class="line"></span><br><span class="line">    $newRequest-&gt;content = $request-&gt;content;</span><br><span class="line"></span><br><span class="line">    $newRequest-&gt;request = $newRequest-&gt;getInputSource();</span><br><span class="line"></span><br><span class="line">    return $newRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-2-处理请求"><a href="#3-2-2-处理请求" class="headerlink" title="3.2.2 处理请求"></a>3.2.2 处理请求</h6><p>在 HTTP 核心的 handdle 方法内，接收一个请求，也就是上一步创建的请求实例，最终生成一个响应。</p><p>主要步驟如下：</p><ul><li>注册请求到容器</li><li>运行引导程序<ul><li>环境检测，将 env 中的配置读取到变量中</li><li>配置文件加载</li><li>加载异常处理</li><li>注册门面</li><li>注册服务提供者</li><li>服务启动</li></ul></li><li>发送请求到路由<ul><li>查找路由</li><li>运行控制器或匿名函数</li></ul></li><li>返回响应</li></ul><p>HTTP 核心的 handle 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public function handle($request)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response = $this-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; catch (Throwable $e) &#123;</span><br><span class="line">        $this-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = $this-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;app[&#x27;events&#x27;]-&gt;dispatch(</span><br><span class="line">        new RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    return $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再往下深入，查看 <code>$response = $this-&gt;sendRequestThroughRouter($request);</code>  的具体实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">protected function sendRequestThroughRouter($request)</span><br><span class="line">&#123;</span><br><span class="line">   // 将请求注册到容器</span><br><span class="line">    $this-&gt;app-&gt;instance(&#x27;request&#x27;, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(&#x27;request&#x27;);</span><br><span class="line"></span><br><span class="line">    // 启动引导程序</span><br><span class="line">    $this-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    // 发送请求至路由</span><br><span class="line">    return (new Pipeline($this-&gt;app))</span><br><span class="line">                -&gt;send($request)</span><br><span class="line">                -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">                -&gt;then($this-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，将 request 注册到容器内，然后清除掉之前的 request 实例缓存，启动引导程序，然后将请求发送到路由。</p><p>接下来，看一下引导程序是做什么的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">protected $bootstrappers = [</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">public function bootstrap()</span><br><span class="line">&#123;</span><br><span class="line">    if (! $this-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        $this-&gt;app-&gt;bootstrapWith($this-&gt;bootstrappers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected function bootstrappers()</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;bootstrappers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// src/Illuminate/Foundation/Application.php</span><br><span class="line">public function bootstrapWith(array $bootstrappers)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;hasBeenBootstrapped = true;</span><br><span class="line"></span><br><span class="line">    foreach ($bootstrappers as $bootstrapper) &#123;</span><br><span class="line">        $this[&#x27;events&#x27;]-&gt;dispatch(&#x27;bootstrapping: &#x27;.$bootstrapper, [$this]);</span><br><span class="line"></span><br><span class="line">        $this-&gt;make($bootstrapper)-&gt;bootstrap($this);</span><br><span class="line"></span><br><span class="line">        $this[&#x27;events&#x27;]-&gt;dispatch(&#x27;bootstrapped: &#x27;.$bootstrapper, [$this]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在容器内的具体实现方法中，会先解析引导程序，然后再通过调用引导程序的  <code>bootstrap</code> 方法来启动服务。<br>引导程序功能：</p><ul><li>环境检测，将 env 配置文件载入到 <code>$_ENV</code> 变量中</li><li>加载配置文件</li><li>加载异常处理</li><li>加载 Facades，注册完成后可以用别名的方式访问具体的类</li><li>注册服务提供者，在这里我们会将配置在 app.php 文件夹下 providers 节点的服务器提供者注册到 APP 容器，供请求处理阶段使用</li><li>服务启动</li></ul><p>在发送请求至路由这行代码中，完成了：管道（pipeline）创建、将 request 传入管道、对 request 执行中间件处理和实际的请求处理四个不同的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return (new Pipeline($this-&gt;app))</span><br><span class="line">    -&gt;send($request)</span><br><span class="line">    -&gt;through($this-&gt;app-&gt;shouldSkipMiddleware() ? [] : $this-&gt;middleware)</span><br><span class="line">    -&gt;then($this-&gt;dispatchToRouter());</span><br></pre></td></tr></table></figure><p>继续深入 <code>$this-&gt;dispatchToRouter()</code>，分析程序是如何处理请求的：</p><ul><li>注册请求</li><li>查找路由</li><li>运行控制器</li><li>返回响应结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">protected function dispatchToRouter()</span><br><span class="line">&#123;</span><br><span class="line">    return function ($request) &#123;</span><br><span class="line">        // 将请求注册到容器</span><br><span class="line">        $this-&gt;app-&gt;instance(&#x27;request&#x27;, $request);</span><br><span class="line"></span><br><span class="line">        return $this-&gt;router-&gt;dispatch($request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function dispatch(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;currentRequest = $request;</span><br><span class="line"></span><br><span class="line">    return $this-&gt;dispatchToRoute($request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function dispatchToRoute(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">  return $this-&gt;runRoute($request, $this-&gt;findRoute($request));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查找路由</span><br><span class="line">protected function findRoute($request)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;current = $route = $this-&gt;routes-&gt;match($request);</span><br><span class="line"></span><br><span class="line">    $this-&gt;container-&gt;instance(Route::class, $route);</span><br><span class="line"></span><br><span class="line">    return $route;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected function runRoute(Request $request, Route $route)</span><br><span class="line">&#123;</span><br><span class="line">    $request-&gt;setRouteResolver(function () use ($route) &#123;</span><br><span class="line">        return $route;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $this-&gt;events-&gt;dispatch(new RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">    return $this-&gt;prepareResponse($request,</span><br><span class="line">        $this-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected function runRouteWithinStack(Route $route, Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $shouldSkipMiddleware = $this-&gt;container-&gt;bound(&#x27;middleware.disable&#x27;) &amp;&amp;</span><br><span class="line">                            $this-&gt;container-&gt;make(&#x27;middleware.disable&#x27;) === true;</span><br><span class="line"></span><br><span class="line">    $middleware = $shouldSkipMiddleware ? [] : $this-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">    // 返回运行结果</span><br><span class="line">    return (new Pipeline($this-&gt;container))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through($middleware)</span><br><span class="line">                    -&gt;then(function ($request) use ($route) &#123;</span><br><span class="line">                        // 运行匹配到的路由控制器或匿名函数</span><br><span class="line">                        return $this-&gt;prepareResponse(</span><br><span class="line">                            $request, $route-&gt;run()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行 <code>$route-&gt;run()</code> 的方法定义在 <code>Illuminate\Routing\Route</code> 类中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;container = $this-&gt;container ?: new Container;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        if ($this-&gt;isControllerAction()) &#123;</span><br><span class="line">            return $this-&gt;runController();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;runCallable();</span><br><span class="line">    &#125; catch (HttpResponseException $e) &#123;</span><br><span class="line">        return $e-&gt;getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果路由的实现是一个控制器，会完成控制器实例化并执行指定方法；如果是一个匿名函数就会直接调用。最终响应通过 <code>prepareResponse</code> 返回。</p><h5 id="3-2-3-发送响应"><a href="#3-2-3-发送响应" class="headerlink" title="3.2.3 发送响应"></a>3.2.3 发送响应</h5><p>绕了一大圈，最后终于回到了开始的地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 发送响应</span><br><span class="line">$response-&gt;send();</span><br></pre></td></tr></table></figure><p>最终发送，由 <code>src/Illuminate/Http/Response.php</code> 的父类 <code>Symfony\Component\HttpFoundation\Response</code> 完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public function send()</span><br><span class="line">&#123;</span><br><span class="line">  $this-&gt;sendHeaders();</span><br><span class="line">  $this-&gt;sendContent();</span><br><span class="line"></span><br><span class="line">  if (\function_exists(&#x27;fastcgi_finish_request&#x27;)) &#123;</span><br><span class="line">      fastcgi_finish_request();</span><br><span class="line">  &#125; elseif (!\in_array(\PHP_SAPI, [&#x27;cli&#x27;, &#x27;phpdbg&#x27;], true)) &#123;</span><br><span class="line">      static::closeOutputBuffers(0, true);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-请求结束，进行回调"><a href="#4-请求结束，进行回调" class="headerlink" title="4 请求结束，进行回调"></a>4 请求结束，进行回调</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p>继续往下看，核心的  <code>terminate</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function terminate($request, $response)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;terminateMiddleware($request, $response);</span><br><span class="line"></span><br><span class="line">    $this-&gt;app-&gt;terminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>terminateMiddleware</code> 中，进行终止中间件，<code>$this-&gt;app-&gt;terminate()</code> 终止程序。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>创建应用实例，完成项目路径注册、基础服务注册、核心类别名注册，然后将 HTTP 和 Console， Exception 核心注册到容器。</p><p>然后再实例化内核，将中间件加载到路由，再将请求注册到容器，然后运行引导程序，进行环境检测、加载系统配置等系统环境配置。</p><p>然后进行中间件校验，通过校验后才会最终处理实际的控制器或匿名函数并生成响应。</p><p>最终，发送响应给用户，清理项目中的中间件，完成一个请求周期。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 laravel mix 编译资源</title>
      <link href="/2019/03/15/laravel-mix/"/>
      <url>/2019/03/15/laravel-mix/</url>
      
        <content type="html"><![CDATA[<p>学习下如何在 laravel 框架中，用 laravel mix 编译前端资源。</p><p><img src="/images/laravel-mix.png"></p><span id="more"></span><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>本次操作的环境依然是 laradock，如果没用特殊说明，以后应该默认 laradock。</p><p>workspace 容器中，已经提前装好了 node 环境，而在项目根目录中，package.json 和 webpack.mix.js 也已经为我们预设好了，所以laravel 项目建好后，直接在根目录安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在 webpack.mix.js 中，已经加载了两个默认的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mix.<span class="title function_">js</span>(<span class="string">&#x27;resources/js/app.js&#x27;</span>, <span class="string">&#x27;public/js&#x27;</span>)</span><br><span class="line">   .<span class="title function_">sass</span>(<span class="string">&#x27;resources/sass/app.scss&#x27;</span>, <span class="string">&#x27;public/css&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们只需要把自己的资源文件，按照同样的格式写入进去，然后开始运行，就可以生成编译后的资源了。</p><p>虽然示例中只写了 sass 一种样式文件，但是其实可以支持常见的以及不常见的很多中格式，只需要调用对应的接口即可。而且还可以把多个资源文件合并成一个。</p><p>举个🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mix.<span class="title function_">less</span>(<span class="string">&#x27;resources/assets/less/app.less&#x27;</span>, <span class="string">&#x27;public/stylesheets/styles.css&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mix.<span class="title function_">styles</span>([</span><br><span class="line">    <span class="string">&#x27;public/css/vendor/normalize.css&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;public/css/vendor/videojs.css&#x27;</span></span><br><span class="line">], <span class="string">&#x27;public/css/all.css&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line">npm run watch</span><br></pre></td></tr></table></figure><p>在上一篇中，我们修改视图后使之生效的命令，其实就是通知 mix 开始工作的。</p><h4 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h4><p>在 laravel 框架之外也是可以使用 mix 的，具体教程请参考 <a href="https://learnku.com/docs4.0">[ learnku ]</a></p><p>其实不难，挺简单的。😎</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 内置 vue 的使用</title>
      <link href="/2019/03/14/laravel-vue/"/>
      <url>/2019/03/14/laravel-vue/</url>
      
        <content type="html"><![CDATA[<p>从 5.3 版本开始，用 Vue.js 作为默认 JavaScript 前端框架。</p><p>从刚接触 laravel 到现在已经又过去了四个版本，种种原因，还是一直没能用上 vue.js 来做开发，现在刚好因为公司项目用到了 vue，对 vue 有了一定的了解，所以顺便就研究下 vue 在 laravel 中的使用吧。</p><span id="more"></span><h4 id="安装laravel"><a href="#安装laravel" class="headerlink" title="安装laravel"></a>安装laravel</h4><p>操作均在 laradock 的环境中进行。<br>进入 workspace 容器，执行以下命令安装 laravel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel/laravel study</span><br></pre></td></tr></table></figure><h4 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h4><p>docker-compose up -d nginx mysql phpmyadmin 启动容器<br>配置 nginx、hosts 并重启 nginx<br>进入 mysql 容器执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">root</span><br><span class="line">ALTER USER root IDENTIFIED WITH mysql_native_password BY &#x27;PASSWORD&#x27;;</span><br><span class="line">exit;</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问 phpmyadmin： localhost:8080，host 填写 mysql，用户名密码均为 root。</p><h4 id="配置laravel"><a href="#配置laravel" class="headerlink" title="配置laravel"></a>配置laravel</h4><p>修改数据库信息，生成用户模块并安装前端脚手架:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:auth</span><br><span class="line">php artisan migrate</span><br><span class="line">php artisan make:seed UsersTableSeeder</span><br><span class="line"></span><br><span class="line">在 run 方法中添加用户信息：</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">App\User</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&#x27;wu&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;email = <span class="string">&#x27;yf-wu@qq.com&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;password = <span class="title class_">Hash</span>::<span class="title function_ invoke__">make</span>(<span class="string">&#x27;111111&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line"></span><br><span class="line">再去 DatabaseSeeder 中打开 run 中的注释，接着往下执行：</span><br><span class="line">php artisan db:seed</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h4><p>home.blade.php：<br>vue 的组件在 resources/js/components，然后在 app.js 中注册。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are logged in!</span><br><span class="line"><span class="tag">&lt;<span class="name">example-component</span>&gt;</span><span class="tag">&lt;/<span class="name">example-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更新脚手架：npm run dev  or npm run watch</p><p><img src="/images/laravel.png" alt="组件生效"></p><h4 id="再实验下"><a href="#再实验下" class="headerlink" title="再实验下"></a>再实验下</h4><p>例子来自：<a href="https://learnku.com/docs/laravel-core-concept/5.5/Laravel%E4%B8%8E%E5%89%8D%E7%AB%AF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/3029">[ cxp1539 ]</a></p><p>视图组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;div v-if=&quot;isShow&quot; class=&quot;goTop&quot; @click=&quot;goTop&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;glyphicon glyphicon-menu-up&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    const that = this</span><br><span class="line">    $(window).scroll(function() &#123;</span><br><span class="line">      if ($(this).scrollTop() &gt; 50) &#123;</span><br><span class="line">        that.isShow = true</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        that.isShow = false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    goTop() &#123;</span><br><span class="line">      $(&#x27;html,body&#x27;).animate(&#123; scrollTop: 0 &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">  .fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">    transition: opacity .5s;</span><br><span class="line">  &#125;</span><br><span class="line">  .fade-enter, .fade-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  .goTop &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 36px;</span><br><span class="line">    bottom: 50px;</span><br><span class="line">    background: #FFF;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    box-shadow: 0 4px 12px 0 rgba(7,17,27,.1);</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    z-index: 1000;</span><br><span class="line">    span &#123;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>app.js 注册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;go-top&#x27;, require(&#x27;./components/GoTop.vue&#x27;));</span><br></pre></td></tr></table></figure><p>在 app.blade.php 中引入组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;main class=&quot;py-4&quot;&gt;</span><br><span class="line">    @yield(&#x27;content&#x27;)</span><br><span class="line">&lt;/main&gt;</span><br><span class="line">&lt;go-top&gt;&lt;/go-top&gt;</span><br></pre></td></tr></table></figure><p>为了使页面更高，随便修改个样式使滚动条出现。</p><p><img src="/images/up.png" alt="up"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>每次修改组件后都需要重新运行一次 npm run dev，也可以用 watch-poll 监听。</p></blockquote><h4 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h4><p>到了上一步已经可以完成一些基础的操作了，实际上，刚才得操作还用到了一个叫做 laravel-mix 的东西，在 <a href="https://learnku.com/"> [ LearnKu ] </a> (laravel-china 社区)社区的文档中是这么介绍的：</p><blockquote><p>Laravel Mix 提供了简洁且可读性高的 API ，用于使用几个常见的 CSS 和 JavaScript 预处理器为应用定义 Webpack 构建步骤。可以通过简单链式调用来定义资源的编译。</p></blockquote><blockquote><p>Laravel Mix 是叠加于 webpack 上的一层干净的膜， 它让 webpack 百分之80的用例变得十分简单。</p></blockquote><p>也就是说，laravel-mix 是用来简化 webpack 学习和开发成本的工具。</p><p>对于后端人员来说，前端东西真的太多太难，mix 可以让我们不需要关注 webpack 的配置，即可轻松的编译前端脚本。</p><p>之前因为没在框架中用过 vue，所以一直也没有接触到这个工具，现在看完发现，学习之路真的是永无止境… 😂</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>travis-ci 可持续集成测试</title>
      <link href="/2019/03/12/travis-ci-test/"/>
      <url>/2019/03/12/travis-ci-test/</url>
      
        <content type="html"><![CDATA[<p>给博客添加了  travis ci 可持续集成，以后本地可以不装 node 环境了。</p><span id="more"></span><h2 id="操作过程："><a href="#操作过程：" class="headerlink" title="操作过程："></a>操作过程：</h2><h4 id="github-账号-登陆-travis-ci"><a href="#github-账号-登陆-travis-ci" class="headerlink" title="github 账号 登陆 travis ci"></a>github 账号 登陆 travis ci</h4><p>登陆后把博客项目的开关打开。<br><img src="/images/set.png"></p><h4 id="博客项目创建分支"><a href="#博客项目创建分支" class="headerlink" title="博客项目创建分支"></a>博客项目创建分支</h4><p>把博客项目，即 .io 的那个项目拉到本地，创建一个新的分支 hexo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git checkout -b hexo</span><br><span class="line">git rm -rf *    #删除仓库中的文件，可能本地的文件还存有，则需要使用 rm -rf 命令</span><br><span class="line">git commit -m &quot;清空文件夹&quot; #提交删除信息</span><br><span class="line">git push origin hexo:hexo #将删除的信息推送到远程仓库</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把博客源码放入 hexo 分支的文件夹中，然后再新建 .travis.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 指定语言环境</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="comment"># 指定需要sudo权限</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="comment"># 指定node_js版本</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">7.9</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 指定缓存模块，可选。缓存可加快编译速度。</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定博客源码分支，因人而异。hexo博客源码托管在独立repo则不用设置此项</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;M-finder&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;m@m-finder.com&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Travis ci push&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;travis_token&#125;@$&#123;gh_repo&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">gh_repo:</span> <span class="string">github.com/M-finder/M-finder.github.io.git</span></span><br><span class="line"><span class="comment"># End: Build LifeCycle</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="github生成token"><a href="#github生成token" class="headerlink" title="github生成token"></a>github生成token</h4><p>在 setting - developer settings 中生成 token，勾选 repo 所有选项和 user 下的 email。</p><p><img src="/images/github-set.png"></p><p>把生成的 token 填写的 travis ci 的设置中。</p><p>完成后，提交代码到分支测试下是否正常。</p><blockquote><ol><li><p>添加配置文件并推送到分支后，build 成功但是徽章现在还一直是 unknown。</p></li><li><p>添加测试文章后无法推送到 master。</p></li></ol></blockquote><p>徽章状态原因：master 没有 build<br>推送失败原因：github 生成的 token 名称和配置文件中不一致。 </p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstorm 配置 laradock xdebug</title>
      <link href="/2019/03/08/laradock-xdebug/"/>
      <url>/2019/03/08/laradock-xdebug/</url>
      
        <content type="html"><![CDATA[<p>本次操作为 win10 系统，理论上和其他系统无差异。</p><p><img src="/images/laradock.png" alt="laradock"></p><span id="more"></span><p>克隆 laradock 到本地：<br><code>git clone https://github.com/Laradock/laradock.git</code></p><p>进入 laradock 文件夹， 生成配置文件：<br><code>cp .\env-example .env</code></p><p>编辑 .env 配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">WORKSPACE_INSTALL_XDEBUG=true</span><br><span class="line">PHP_FPM_INSTALL_XDEBUG=true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 <code>laradock/php-fpm/xdebug.ini</code> 和 <code>laradock/workspace/xdebug.ini</code>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xdebug.remote_host=dockerhost</span><br><span class="line">xdebug.remote_connect_back=0</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line"></span><br><span class="line">xdebug.remote_autostart=1</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.cli_color=0</span><br><span class="line">xdebug.profiler_enable=0</span><br><span class="line">xdebug.profiler_output_dir=&quot;~/xdebug/phpstorm/tmp/profiling&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line"></span><br><span class="line">xdebug.var_display_max_children=-1</span><br><span class="line">xdebug.var_display_max_data=-1</span><br><span class="line">xdebug.var_display_max_depth=-1</span><br></pre></td></tr></table></figure><p>然后在 laradock 同级新建 www 文件夹并在文件夹下新建 index.php 文件。<br>修改 <code>laradock/nginx/sites/default.conf</code> 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root /var/www;</span><br></pre></td></tr></table></figure><p>build 服务： <code>docker-compose bild php-fpm workspace</code></p><p>启动服务：<code>docker-compose up -d nginx mysql workspace</code></p><p>打开 phpstorm，添加 php 设置和 server：</p><p><img src="/images/php.png" alt="php"></p><p><img src="/images/php-set.png" alt="php-option"></p><p>添加 php 时，要把 additional 里的两个内容填好。<br>options 内容如下图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dxdebug.remote_host=docker.for.win.localhost -dxdebug.remote_enable=1 -dxdebug.remote_port=9000 -dxdebug.remote_mode=req</span><br></pre></td></tr></table></figure><p><img src="/images/option.png" alt="options"></p><p><img src="/images/server.png" alt="server"></p><p>建好以后，再添加 remote_debug：</p><p><img src="/images/debug.png" alt="debug"></p><p>配置好以后，启动 debug，打开电话按钮，添加断点刷新页面。<br><img src="/images/start.png" alt="start"></p><p><em>注：</em> 配置好 xdebug 后，如果需要安装 laravel，需要把 phpstorm 关掉。否则会拦截的 composer 的请求。<br>具体表现为执行任何 composer 的命令都没有反应。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2019/01/21/happy-2019/"/>
      <url>/2019/01/21/happy-2019/</url>
      
        <content type="html"><![CDATA[<p>久不更博，是因为最近在学习，然后把笔记都写在了简书。</p><p>博客不会关，域名已续费。</p><p>会忙里抽闲继续折腾。</p><p>只可惜想学想做的东西都太多，有点分身无暇。</p><p>不说了，19 年也都进来这么久了，祝大家新年快乐吧。</p><p><img src="/images/img.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用工具合计</title>
      <link href="/2018/08/31/web-tool/"/>
      <url>/2018/08/31/web-tool/</url>
      
        <content type="html"><![CDATA[<h4 id="图片处理类工具"><a href="#图片处理类工具" class="headerlink" title="图片处理类工具"></a>图片处理类工具</h4><ul><li><a href="https://aiviewer.com/ConvertAiToJpg.aspx">Ai转常用图片格式</a></li><li><a href="http://www.faviconico.org/">图片转favicon</a></li><li><a href="http://www.qt86.com/">艺术字生成</a></li><li><a href="https://www.logaster.com/">logo设计2（国外网站，可能会慢）</a></li><li><a href="https://www.asqql.com/gifzip/">图片压缩</a></li></ul><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><ul><li><a href="http://www.bejson.com/">代码转换</a></li><li><a href="https://www.ascii-art-generator.org/">ascii文字生成</a></li><li><a href="https://greasyfork.org/zh-CN/scripts">油猴脚本中心</a></li><li><a href="https://www.seniverse.com/">天气api</a></li><li><a href="https://ngrok.com/download">生成外网可访问的本机域名</a></li><li><a href="https://www.leangoo.com/">leangoo-团队协作工具</a></li></ul><h4 id="我喜欢的几个博客"><a href="#我喜欢的几个博客" class="headerlink" title="我喜欢的几个博客"></a>我喜欢的几个博客</h4><ul><li><a href="http://litten.me/">litten</a></li><li><a href="https://blog.keep.moe/">Makito’s Notebook</a></li><li><a href="https://primitivetechnology.wordpress.com/">澳洲小哥原始技术</a></li><li><a href="https://molunerfinn.com/">MARKSZのBlog</a></li><li><a href="https://blog.fishlee.net/">魚·后花园</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>im-a-test</title>
      <link href="/2018/08/27/im-a-test/"/>
      <url>/2018/08/27/im-a-test/</url>
      
        <content type="html"><![CDATA[<p>I am a test…</p><p>test for git push, because I losted an article…</p><p><del>好吧，能推送，就是丢了周末的一个文件，虽然它明明就躺在文件夹里</del></p><p>既然能推送，那我就再得瑟一下。</p><p>大舅二舅都是他舅，大哈二哈都是条狗~</p><p>噢<del>噢</del></p><p>都是狗~~</p>]]></content>
      
      
      <categories>
          
          <category> 测试区 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy Birthday</title>
      <link href="/2018/08/13/happy-birthday/"/>
      <url>/2018/08/13/happy-birthday/</url>
      
        <content type="html"><![CDATA[<p>昨天我爹生日，我竟然可耻的忘了……</p><p>晚上看到我姑姑们在群里发红包祝福，吓得我赶紧打电话表示慰问。</p><p>结果接通电话我妈也忘了。</p><p>心疼我爹。</p><p>Happy Birthday!</p><p><img src="/images/birthday.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/13/hello-world/"/>
      <url>/2018/08/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nothing to say,just hope</title>
      <link href="/2018/07/19/nothing-to-say/"/>
      <url>/2018/07/19/nothing-to-say/</url>
      
        <content type="html"><![CDATA[<p>一眨眼我一个月没更新博客了……</p><h4 id="无法挽留的消逝"><a href="#无法挽留的消逝" class="headerlink" title="无法挽留的消逝"></a>无法挽留的消逝</h4><p>早上起来,照例去阳台观察我的几盆肉肉时，发现其中最大的一颗黑腐了。</p><p>坚实的根茎瘪下去一半，已经撑不住叶冠开始歪了……<br>我想把它揪出来砍头，试图去挽留这个脆弱的生命，结果揪出来叶子也快掉光了。<br>强忍着心疼把叶冠切了下来，放在一旁通风处晾着，然后把根和掉落的叶子都放进旁边的盒子，那里已经放了很多干枯腐朽的叶子。</p><p>应该是一个月前吧，当时长得最好的一颗肉，如今就躺在“棺材”里，张牙舞爪地等着新成员的到来。</p><p>我的肉肉都挺凄惨的：<br>最好看的一颗，死了，化水；<br>第二好看的一颗老桩，长徒了，现在耷拉在盆子外边，一副猥琐的样子；<br>最大的和最大的死后最大的，死了，黑腐；<br>最小的一个石生花压根儿就没活过；<br>最喜爱的发财树仙人球染了蚧壳虫,兑了点醋喷了一下,现在好了点。</p><p>这么整理了一下觉得更凄凉了，几棵死的多肉我特么就知道个石生花叫石生花。😂</p><p>叶插的苗有三个正在茁壮成长,最大的一个老叶子却干枯了,只剩几颗新出的嫩芽还垂死挣扎,能不能挨过这个夏天还是一个迷。</p><p>还是撑过这个夏天吧，我很希望你们都好好活着……</p><p><img src="/images/heart.jpg" alt="比心"></p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel使用chunk自更新有误的原因</title>
      <link href="/2018/06/19/Laravel-chunk/"/>
      <url>/2018/06/19/Laravel-chunk/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的 chunk 在查询大量数据时非常好用，但是在用某个字段做为检索条件，并且在程序内部有更新这个字段的时候，就会有一部分数据丢失。</p><p>原因是这样的，比如有7条数据，每次取2条，那么这7条数据就会被分为2，2，2，1这样几块，第一次调用时，取得第一页，也就是第一个2的数据块，更新完后再取数据，原来的第二页就变成了第一页，但是这时候取的还是第二页，所以这时候取的是第三个数据块，到了第三次调用的时候，原来的第二页变成了第一页，原来的第四页变成了第二页，第三页就变成了空的，所以第三页就什么都取不到了。</p><p>解决方法：<br>可以使用 laravel 的游标 cursor()</p><p><img src="/images/chunk.png" alt="图"></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel使用ftp传输文件时报错ftp_put() No data connection的解决</title>
      <link href="/2018/06/12/Laravel-ftp/"/>
      <url>/2018/06/12/Laravel-ftp/</url>
      
        <content type="html"><![CDATA[<p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = &quot;test.dat&quot;;</span><br><span class="line"></span><br><span class="line">$ftp_server=&quot;ftp.server.com&quot;;</span><br><span class="line">$ftp_user = &quot;myname&quot;;</span><br><span class="line">$ftp_pass = &quot;mypass&quot;;</span><br><span class="line">$destination_file = &quot;test.dat&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$cid=ftp_connect($ftp_server);</span><br><span class="line">if(!$cid) &#123;</span><br><span class="line">    exit(&quot;Could not connect to server: $ftp_server\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$login_result = ftp_login($cid, $ftp_user, $ftp_pass);</span><br><span class="line">if (!$login_result) &#123;</span><br><span class="line">    echo &quot;FTP connection has failed!&quot;;</span><br><span class="line">    echo &quot;Attempted to connect to $ftp_server for user $ftp_user&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Connected to $ftp_server, for user $ftp_user&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$upload = ftp_put($cid, $destination_file, $file, FTP_BINARY);</span><br><span class="line">if (!$upload) &#123;</span><br><span class="line">    echo &quot;Failed upload for $source_file to $ftp_server as $destination_file&lt;br&gt;&quot;;</span><br><span class="line">    echo &quot;FTP upload has failed!&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Uploaded $source_file to $ftp_server as $destination_file&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ftp_close($cid);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>原因是没有定义ftp的主被动模式，true是被动模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp_pasv($cid, true);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个记录</title>
      <link href="/2018/05/24/money-to-house/"/>
      <url>/2018/05/24/money-to-house/</url>
      
        <content type="html"><![CDATA[<p>前天晚上回了趟郑州，昨天为了办理按揭满城跑，顶着硕大的太阳，晒得我睁不开眼睛…</p><p>累，但是还是做下记录吧。</p><ol><li>一年以上的劳务合同</li><li>收入证明，公司盖章</li><li>非郑户籍购房申请表，两份，第二页公司盖章</li><li>公司营业执照副本复印件加公司盖章</li><li>在职证明，公司盖章</li><li>无房证明，房管局自助办理</li><li>贷款银行的银行卡及卡主档</li><li>学士证、学位证复印件</li><li>学信网学籍、学历验证信息复印件</li><li>个人信用报告</li><li>银行流水记录</li><li>购房转账记录</li><li>跟银行客户经理合影–不知道为什么会有这一项但是确实是有</li></ol><p>这是办理按揭，还需要再回去一趟签些文件……</p><p>各种手续办理完成的两个月后开始还房贷。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel转换时间为xx分钟前</title>
      <link href="/2018/05/08/Laravel-time-change/"/>
      <url>/2018/05/08/Laravel-time-change/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/time.png" alt="示意图"></p><span id="more"></span><p>比如说有这样一个需求：一篇文章的发表时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**距离现在时间**      **显示格式**</span><br><span class="line">&lt; 1小时                 xx分钟前</span><br><span class="line">1小时-24小时            xx小时前 </span><br><span class="line">1天-10天                xx天前</span><br><span class="line">&gt;10天                   直接显示日期</span><br></pre></td></tr></table></figure><p>其实laravel已经内置好了，只需要用Carbon就可以实现了。</p><h4 id="中文化显示"><a href="#中文化显示" class="headerlink" title="中文化显示"></a>中文化显示</h4><p>在 app\Providers\AppServiceProvider.php 中添加代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public function boot() &#123;</span><br><span class="line">    Carbon::setLocale(&#x27;zh&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Model中调用"><a href="#Model中调用" class="headerlink" title="Model中调用"></a>Model中调用</h4><p>如果你想在某个类型的数据中人性化显示时间，那么就在该Model中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function getCreatedAtAttribute($date)&#123;</span><br><span class="line">    // 默认100天前输出完整时间，否则输出人性化的时间</span><br><span class="line">    if (Carbon::now() &gt; Carbon::parse($date)-&gt;addDays(100)) &#123;</span><br><span class="line">        return Carbon::parse($date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Carbon::parse($date)-&gt;diffForHumans();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为爱好充值</title>
      <link href="/2018/04/18/my-hobbies/"/>
      <url>/2018/04/18/my-hobbies/</url>
      
        <content type="html"><![CDATA[<p>那个周末，阳光明媚。</p><p>我光着脚坐在窗台前伺候多肉，看它们一个个憨态可掬，咔咔几张照片并随手发到了群里。</p><p>然后，同样喜欢花花草草的姑姑就被炸了出来，我俩兴致勃勃的聊起了心得。</p><span id="more"></span><p>看看身边慢慢积攒的一堆东西和群里不停跳动的文字，突然觉得自己离想要的生活好近。</p><p>以前在学校买的第一对哑铃，哐哐的玩了两年多，离开郑州时留给了一个老胳膊老腿儿的家伙，这家伙也不会爱惜它，哎。</p><p>前几天看着身上日益增长的肉肉，终于不忍心继续堕落下去，现在已经结实多了。✌</p><p><img src="/images/%E8%82%89%E8%82%89.jpg" alt="我的肉"><br>虽然我的果冻乙女心还没有果冻色，玉坠也没有开始坠，但我还是很爱它们呀~</p><p><img src="/images/%E5%88%BB%E5%88%80.jpg" alt="刻刀"></p><p>人还是要有点儿爱好的，消磨时光，调剂生活。</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用教程-以Dockerfile定制镜像</title>
      <link href="/2018/04/10/Docker-images/"/>
      <url>/2018/04/10/Docker-images/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。</p><p>而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 root 文件系统。</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p><img src="/images/docker.jpg" alt="Docker"></p><span id="more"></span><h4 id="理解镜像构成"><a href="#理解镜像构成" class="headerlink" title="理解镜像构成"></a>理解镜像构成</h4><p>镜像是容器的基础，每次执行 docker run 的时候都会指定以哪个镜像作为容器运行的基础。</p><p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p><p>现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>这条命令会用 nginx 镜像启动一个容器，该容器命名为 webserver，并且映射了宿主机的 80 端口，这样我们就可以在宿主机用浏览器去访问这个 nginx 服务器。<br>docker的启动画面中有当前容器的 ip，例如：192.168.99.100，打开浏览器直接访问该 ip 就能看到默认的 Nginx 欢迎页面。</p><p>现在，我们来做点尝试，修改下nginx的欢迎页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it webserver bash</span><br><span class="line">root@bcd5b7c85e68:/# echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line">root@bcd5b7c85e68:/# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>我们以交互式终端方式进入 webserver 容器，并执行了 bash 命令，也就是获得一个可操作的 Shell。</p><p>然后，我们用 Hello, Docker! 覆盖了 /usr/share/nginx/html/index.html 的内容。</p><p>现在我们再刷新浏览器的话，会发现内容被改变了。<br><img src="/images/nginx.png" alt="Nginx"></p><p>我们修改了容器的文件，也就是改动了容器的存储层。要保存这些修改，可以使用 docker 提供的 docker commit 命令将存储层保存下来成为新的镜像。也就是说，是在原有镜像的基础上，再叠加上改动了的存储层并构成新的镜像。</p><p>这意味着每一次修改都会让存储层叠加，而且你所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。</p><p>想想就是件很恐怖的事情。😰</p><p>不过，存在即是真理，commit 虽然恐怖，但还是很有用武之地的，比如被入侵后保存现场和一些特殊场合。</p><h4 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h4><p>如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建和定制镜像，那么之前提及透明性和体积臃肿的问题就都会解决。</p><p>这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>还是以上边的 nginx 为例。</p><p>创建一个文件夹，然后在文件夹内创建一个文本文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /c/docker</span><br><span class="line">cd /c/docker</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>其内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, M-finder!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><h5 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h5><p>所谓定制镜像，就是以一个镜像为基础，在其上进行定制。就像我们先运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。</p><p>FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。</p><h5 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h5><p>RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><p>shell 格式：RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样。<br>刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>run 命令应尽可能的压缩为一行，因为每一个 run 命令就是一层存储层，而且，命令应该遵循良好的代码格式，比如换行、缩进、注释等，会让维护、排障更为容易,最后也应该添加清理工作的命令。</p><h5 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h5><p>在 Dockerfile 文件所在目录执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon   2.56kB</span><br><span class="line">Step 1/2 : FROM nginx</span><br><span class="line"> ---&gt; c5c4e8fa2cf7</span><br><span class="line">Step 2/2 : RUN echo &#x27;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running in 4e2f0f98fbfe</span><br><span class="line">Removing intermediate container 4e2f0f98fbfe</span><br><span class="line"> ---&gt; 8b70819a7261</span><br><span class="line">Successfully built 8b70819a7261</span><br><span class="line">Successfully tagged nginx:v3</span><br><span class="line">SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have &#x27;-rwxr-xr-x&#x27; permissions. It is recommended to double check and reset permissions for sensitive files and directories.</span><br></pre></td></tr></table></figure><p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如同我们之前所说的那样，RUN 指令启动了一个容器 4e2f0f98fbfe，执行了所要求的命令，并最后提交了这一层 c5c4e8fa2cf7，随后删除了所用到的这个容器 4e2f0f98fbfe。</p><p>这里我们使用了 docker build 命令进行镜像构建。其格式为：</p><p>docker build [选项] &lt;上下文路径/URL/-&gt;<br>在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx 那样来运行这个镜像。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用教程-入门</title>
      <link href="/2018/03/28/docker-use/"/>
      <url>/2018/03/28/docker-use/</url>
      
        <content type="html"><![CDATA[<p>docker已经装好了，但是完全不知道怎么用，先来点官网的例子看看吧。</p><p>docker自带的终端不太好用，所以先用xshell连接上终端，ip为终端启动时显示的：192.1168.99.100，默认应该都是这个。<br>账号密码是：docker / tcuser</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                        ##         .</span><br><span class="line">                  ## ## ##        ==</span><br><span class="line">               ## ## ## ## ##    ===</span><br><span class="line">           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\___/ ===</span><br><span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span><br><span class="line">           \______ o           __/</span><br><span class="line">             \    \         __/</span><br><span class="line">              \____\_______/</span><br><span class="line"> _                 _   ____     _            _</span><br><span class="line">| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __</span><br><span class="line">| &#x27;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#x27;__|</span><br><span class="line">| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |</span><br><span class="line">|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="安装centos镜像"><a href="#安装centos镜像" class="headerlink" title="安装centos镜像"></a>安装centos镜像</h4><p>拉取一个centos的映像并在衍生容器内运行交互式终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --interactive --tty centos bash</span><br></pre></td></tr></table></figure><p>官网的例子是ubuntu，没玩过，所以换成了更熟悉点的centos</p><p>安装完成后会自动进入centos的控制台，输入exit可以退出。</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --publish 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure><p>装完以后，在你的宿主机，也就是装docker的电脑上打开浏览器，输入docker启动时输出的ip就能够看到nginx的欢迎页面了。</p><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>1.停止所有的container，这样才能够删除其中的images：</p><p>docker stop $(docker ps -a -q)</p><p>如果想要删除所有container的话再加一个指令：</p><p>docker rm $(docker ps -a -q)</p><p>2.查看当前有些什么images</p><p>docker images</p><p>3.删除images，通过image的id来指定删除谁</p><p>docker rmi <image id></p><p>想要删除untagged images，也就是那些id为<None>的image的话可以用</p><p>docker rmi $(docker images | grep “^<none>“ | awk “{print $3}”)</p><p>要删除全部image的话</p><p>docker rmi $(docker images -q)</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装教程</title>
      <link href="/2018/03/27/docker-install/"/>
      <url>/2018/03/27/docker-install/</url>
      
        <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><p>docker官方推荐了两种安装方式:app和toolbox。</p><p><img src="/images/docker.jpg" alt="Docker"></p><span id="more"></span><p>注：app方式对系统版本和配置会有一定要求，Mac版本会自动为你安装好VM（虚拟机），但Windows版本需要你安装微软虚拟化产品Hyper-V，而toolbox方式则需要你额外安装virtualbox来作为docker的VM。</p><p><a href="https://docs.docker.com/docker-for-mac/">App-mac</a><br><a href="https://docs.docker.com/docker-for-windows/">App-win</a></p><p><a href="https://www.docker.com/products/docker-toolbox">Toolbox</a></p><h4 id="centos-安装"><a href="#centos-安装" class="headerlink" title="centos 安装"></a>centos 安装</h4><p><em><font color=red>注意：docker要求centos在3.0以上</font></em></p><p>可以用 uname -r 查看centos内核：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# uname -r</span><br><span class="line">2.6.32-696.20.1.el6.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>好可惜，我的虚拟机不支持,升级个内核再继续装。</p><p>Docker 软件包和依赖包已经包含在默认的 CentOS-Extras 软件源里，安装命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><p>如果出现 <font color=red>No package docker available</font><br>yum没有找到docker包，更新epel第三方软件库，运行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure><p>然后再运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-io</span><br></pre></td></tr></table></figure><p>安装完就可以愉快地安装了。</p><p><img src="/images/yum.png" alt="安装"></p><p><img src="/images/yumdone.png" alt="安装完成"></p><h4 id="docker-启动"><a href="#docker-启动" class="headerlink" title="docker 启动"></a>docker 启动</h4><p>启动docker:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p>测试运行 hello-world</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/images/hello.png" alt="测试运行"></p><p>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</p><h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><p><em><font color=red>注意：win7，8和10的家庭版需要docker toolbox安装</font></em></p><p><a href="https://docs.docker.com/toolbox/toolbox_install_windows/">点我下载：</a></p><p>安装完成后，桌面会多这三个图标出来。强行给我乔巴照相，哈哈！<br><img src="/images/winok.png" alt="安装完成"></p><p>点击 Docker QuickStart 图标来启动 Docker Toolbox 终端。</p><p>如果系统显示 User Account Control 窗口来运行 VirtualBox 修改你的电脑，选择 Yes</p><p><img src="/images/%E5%90%AF%E5%8A%A8.png" alt="启动"></p><p>输入一下命令调用测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="hello-win.png" alt="启动测试"></p><h5 id="win10专业版"><a href="#win10专业版" class="headerlink" title="win10专业版"></a>win10专业版</h5><p>win10专业版自带hyper-v,用来装docker更方便。（hyper-v是win系统自带的一个虚拟机工具）</p><p>找到程序和功能，打开启用和关闭功能，然后勾选hyper-v</p><p>然后下载安装 <a href="https://www.docker.com/get-docker.png">Toolbox</a></p><p>安装完成后会自动打开，右下角的系统通知栏有个小鲸鱼的图标，这表示docker在运行。</p><p>到这里就安装好了，更多姿势我们可以在启动器输入 docker 来解锁。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合layui流加载实现的瀑布流</title>
      <link href="/2018/03/23/layui-waterfall/"/>
      <url>/2018/03/23/layui-waterfall/</url>
      
        <content type="html"><![CDATA[<p>最近在用layui做一个社区站点，有个页面想做成瀑布流形式，但是layui本身的流加载并没有实现这个功能，所以在研究了几个臃肿的插件源码后，自己做了一个可以结合layui流加载使用的轻量级瀑布流插件，用起来也比较简单。</p><p><img src="/images/layui.png"></p><span id="more"></span><p>图丢了，演示效果无。</p><h4 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h4><p><font color=red>友情提示：如果不熟悉layui的用法，请百度过去仔细阅读一下文档。</font></p><ul><li>在页面中用layui的定义的模式扩展引入common.js</li><li>ajax加载数据信息，获得数据总分页数</li><li>laytpl渲染数据</li><li>流加载判断是否还有下一页数据</li><li>waterfall整理页面元素的定位</li></ul><p>javascript 内容：</p><p>common.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">layui.define([&#x27;jquery&#x27;, &#x27;element&#x27;, &#x27;util&#x27;, &#x27;laytpl&#x27;], function (exports) &#123;</span><br><span class="line"></span><br><span class="line">    var $ = layui.jquery</span><br><span class="line">            , element = layui.element</span><br><span class="line">            , layer = layui.layer</span><br><span class="line">            , util = layui.util</span><br><span class="line">            , laytpl = layui.laytpl;</span><br><span class="line"></span><br><span class="line">    var gather = &#123;</span><br><span class="line">        waterfall: function () &#123;</span><br><span class="line">            var box = $(&quot;.layui-col-md3&quot;);</span><br><span class="line">            var boxWidth = box.eq(0).width();</span><br><span class="line">            var num = Math.floor($(&quot;#zone-list&quot;).width() / boxWidth);</span><br><span class="line">            var boxArr = [];</span><br><span class="line">            box.each(function (index, value) &#123;</span><br><span class="line">                var boxHeight = box.eq(index).height();</span><br><span class="line">                if (index &lt; num) &#123;</span><br><span class="line">                    boxArr[index] = boxHeight;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    var minboxHeight = Math.min.apply(null, boxArr), minboxIndex = $.inArray(minboxHeight, boxArr);</span><br><span class="line">                    $(value).css(&#123;</span><br><span class="line">                        &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">                        &quot;top&quot;: minboxHeight + 15,</span><br><span class="line">                        &quot;left&quot;: box.eq(minboxIndex).position().left</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    boxArr[minboxIndex] += box.eq(index).height() + 15;</span><br><span class="line">                    if (boxHeight + minboxHeight &gt; $(&quot;#zone-list&quot;).height()) &#123;</span><br><span class="line">                        $(&quot;#zone-list&quot;).height(150 + boxArr[minboxIndex]);</span><br><span class="line">                    &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        json: function (url, data, func, options) &#123;</span><br><span class="line">            var that = this, type = typeof data === &#x27;function&#x27;;</span><br><span class="line">            if (type) &#123;</span><br><span class="line">                options = func</span><br><span class="line">                func = data;</span><br><span class="line">                data = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            options = options || &#123;&#125;;</span><br><span class="line">            return $.ajax(&#123;</span><br><span class="line">                type: options.type || &#x27;post&#x27;,</span><br><span class="line">                dataType: options.dataType || &#x27;json&#x27;,</span><br><span class="line">                data: data,</span><br><span class="line">                url: url,</span><br><span class="line">                success: function (res) &#123;</span><br><span class="line">                    func &amp;&amp; func(res);</span><br><span class="line">                &#125;, error: function (e) &#123;</span><br><span class="line">                    layer.msg(&#x27;请求异常，请重试&#x27;, &#123;shift: 6&#125;);</span><br><span class="line">                    options.error &amp;&amp; options.error(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    exports(&#x27;common&#x27;, gather);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var action = &#x27;/zone&#x27;;</span><br><span class="line">common.json(action, &#x27;&#x27;, function (res) &#123;</span><br><span class="line">    flow.load(&#123;</span><br><span class="line">        elem: &#x27;#zone-list&#x27;</span><br><span class="line">        , isAuto: true</span><br><span class="line">        , isLazyimg: true</span><br><span class="line">        , mb: 100</span><br><span class="line">        , done: function (page, next) &#123;</span><br><span class="line">            var lis = [];</span><br><span class="line">            common.json(action, &#123;page: page&#125;, function (res) &#123;</span><br><span class="line">                var getTpl = zonesTpl.innerHTML, view = document.getElementById(&#x27;zone-list&#x27;);</span><br><span class="line"></span><br><span class="line">                layui.each(res.data.data, function (index, item) &#123;</span><br><span class="line">                    laytpl(getTpl).render(item, function (html) &#123;</span><br><span class="line">                        lis.push(html);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                if (page &lt; res.data.last_page) &#123;</span><br><span class="line">                    next(lis.join(&#x27;&#x27;), true);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    next(lis.join(&#x27;&#x27;), false);</span><br><span class="line">                &#125;</span><br><span class="line">                common.waterfall();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>html内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;zonesTpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;layui-col-md3&quot;&gt; </span><br><span class="line">        &lt;div class=&quot;zone-box&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;dt_text&quot;&gt; </span><br><span class="line">                &lt;span class=&quot;zone-word&quot;&gt;@&#123;&#123; d.content &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            @&#123;&#123;# var img =  layui.jquery.grep(d.imgs.split(&#x27;,&#x27;), function(n) &#123;return layui.jquery.trim(n).length &gt; 0;&#125;) &#125;&#125;</span><br><span class="line">            &lt;div class=&quot;img_box base-img-w img-w-@&#123;&#123; img.length &#125;&#125;&quot; &gt;</span><br><span class="line">                &lt;a class=&quot;img_w &quot; href=&quot;javascript:;&quot;&gt;</span><br><span class="line">                    @&#123;&#123;#  for(var k=0;k&lt; img.length;k++)&#123; &#125;&#125;</span><br><span class="line">                    &lt;img src=&quot;@&#123;&#123; img[k] &#125;&#125;&quot; &gt;</span><br><span class="line">                    @&#123;&#123;# &#125; &#125;&#125;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>好了，就是这么简单。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pjax的正确使用</title>
      <link href="/2018/03/14/pjax/"/>
      <url>/2018/03/14/pjax/</url>
      
        <content type="html"><![CDATA[<p>以前偶然之间接触到pjax这个插件，眼前一亮，被它惊艳到了。</p><p>顿时觉得心痒难耐，便着手测试想要加在博客里，几经折腾，页面的跳转总算是改善许多，但是离我所见到的完美却总是差一步：每次跳转页面都会闪一下。</p><p>奈何文档太少，或者说我所遇到的问题水平太low，这个问题也就一直伴随着我的博客。</p><span id="more"></span><p>服务器到期后，我就把博客迁到了github，用着还挺满意，还拉了几个同学也来用这个，这两天有个同学换了套别人做的模板，让我又见识到了pjax的魅力。</p><p>妈蛋，不能忍。</p><p>看文档没能解决我的问题，那我找别人的源码去。</p><p>于是今天下班路上，扒了几篇码云的源码，终于是解决了这个伴随已久的不完美！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    layui.config(&#123;</span><br><span class="line">        base: &#x27;/js/&#x27;</span><br><span class="line">        ,version: false</span><br><span class="line">    &#125;).extend(&#123;</span><br><span class="line">        index: &#x27;index&#x27;</span><br><span class="line">        ,pjax: &#x27;pjax&#x27;</span><br><span class="line">    &#125;).use([&#x27;pjax&#x27;,&#x27;index&#x27;],function ()&#123;</span><br><span class="line">        var $ = layui.jquery;</span><br><span class="line">            $(function () &#123;</span><br><span class="line">                $(document).pjax(&#x27;a&#x27;, &#x27;#main&#x27;,&#123;fragment:&#x27;#main&#x27;&#125;);</span><br><span class="line">                $(document).on(&#x27;pjax:start&#x27;, function () &#123;</span><br><span class="line">                    NProgress.start();</span><br><span class="line">                &#125;);</span><br><span class="line">                $(document).on(&#x27;pjax:end&#x27;, function () &#123;</span><br><span class="line">                    NProgress.done();</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为引入了layui，虽然在这个版本的博客里没什么大用，我还是把pjax裹了一层做成了layui的扩展。</p><p>之前我是这么写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(document).pjax(&#x27;a&#x27;, &#x27;#main&#x27;);</span><br></pre></td></tr></table></figure><p>今天在对比之下，发现我少了 {fragment:’#main’}，加进去一试，好了。</p><p>原来我曾经离完美只差一步之遥。</p><p>这个东西应该是指定新页面所替换的位置，也就是在拿到新页面的内容以后会在这个元素里边替换。</p><p>应该就是这么个意思吧……</p><p>解决了，挺开心的，就是觉得我真的该再下下功夫学英文了。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7.2 64位安装LNMP php7+Mysql 5.7搭建教程</title>
      <link href="/2018/03/10/lnmp/"/>
      <url>/2018/03/10/lnmp/</url>
      
        <content type="html"><![CDATA[<p>前前后后搭建过无数次环境，大大小小的坑也差不多都踩了，今天趁着腾讯搞活动，120块买了台16个月的服务器，想着晚上把环境搭建下吧，结果把之前的文档掏出来发现是没更新的，最新版在公司……</p><p>算了，老子再搞一遍，放在网上随便看。</p><p><img src="/images/1.jpg"></p><span id="more"></span><h4 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line"></span><br><span class="line">yum -y groupinstall &#x27;Development Tools&#x27;</span><br><span class="line"></span><br><span class="line">yum install gcc-c++ patch readline readline-devel zlib zlib-devel  bzip2 autoconf automake libtool bison iconv-devel libyaml-devel libffi-devel openssl-devel make   </span><br><span class="line"></span><br><span class="line">yum -y install readline readline-devel ncurses-devel gdbm-devel glibc-devel tcl-devel openssl-devel curl-devel expat-devel db4-devel byacc sqlite-devel libyaml libyaml-devel libffi libffi-devel libxml2 libxml2-devel libxslt libxslt-devel libicu libicu-devel system-config-firewall-tui sudo wget crontabs logwatch logrotate perl-Time-HiRes git cmake libcom_err-devel.i686 libcom_err-devel.x86_64</span><br><span class="line"></span><br><span class="line">yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel libicu-devel openldap-devel</span><br></pre></td></tr></table></figure><p>安装Pcre:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://excellmedia.dl.sourceforge.net/project/pcre/pcre2/10.31/pcre2-10.31.tar.gz</span><br><span class="line">tar -xf pcre2-10.31</span><br><span class="line">cd pcre2-10.31</span><br><span class="line">./configure</span><br><span class="line"> make </span><br><span class="line"> make install</span><br></pre></td></tr></table></figure><p>安装Libmcrypt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/mcrypt/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz</span><br><span class="line">tar -xf libmcrypt-2.5.8.tar.gz</span><br><span class="line">cd libmcrypt-2.5.8</span><br><span class="line">./configure</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h4 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h4><p>嗯……最新版7.2开怼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://cn2.php.net/get/php-7.2.3.tar.gz/from/this/mirror</span><br><span class="line">tar -xf mirror</span><br><span class="line">cd php-7.2.3</span><br></pre></td></tr></table></figure><p>该编译了，好长…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/php \</span><br><span class="line">--with-config-file-path=/usr/local/php/etc \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-fpm-user=nginx  \</span><br><span class="line">--with-fpm-group=nginx \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--disable-debug \</span><br><span class="line">--disable-rpath \</span><br><span class="line">--enable-shared  \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-mcrypt \</span><br><span class="line">--with-mhash \</span><br><span class="line">--with-pcre-regex \</span><br><span class="line">--with-sqlite3 \</span><br><span class="line">--with-zlib \</span><br><span class="line">--enable-bcmath \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--enable-calendar \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-cdb \</span><br><span class="line">--enable-dom \</span><br><span class="line">--enable-exif \</span><br><span class="line">--enable-fileinfo \</span><br><span class="line">--enable-filter \</span><br><span class="line">--with-pcre-dir \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-zlib-dir  \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--enable-gd-native-ttf \</span><br><span class="line">--enable-gd-jis-conv \</span><br><span class="line">--with-gettext \</span><br><span class="line">--with-gmp \</span><br><span class="line">--with-mhash \</span><br><span class="line">--enable-json \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-mbregex \</span><br><span class="line">--enable-mbregex-backtrack \</span><br><span class="line">--with-libmbfl \</span><br><span class="line">--with-onig \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--with-pdo-sqlite \</span><br><span class="line">--with-readline \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-simplexml \</span><br><span class="line">--enable-sockets  \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--enable-wddx \</span><br><span class="line">--with-libxml-dir \</span><br><span class="line">--with-xsl \</span><br><span class="line">--enable-zip \</span><br><span class="line">--enable-mysqlnd-compression-support \</span><br></pre></td></tr></table></figure><p>结束后make，make install，时间较长，耐心等待。</p><p>好了以后，复制一份ini文件备份，然后把php-fpm添加成service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp php.ini-development /usr/local/php/etc/php.ini</span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br><span class="line">cp /usr/local/php/etc/php-fpm.d/www.conf.default www.conf</span><br><span class="line">cp /usr/local/php/etc/www.conf.default www.conf</span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line">service php-fpm start</span><br></pre></td></tr></table></figure><p>添加php进环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile </span><br><span class="line">PATH=$PATH:/usr/local/php/bin  </span><br><span class="line">export PATH  </span><br></pre></td></tr></table></figure><p>使修改生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile  </span><br></pre></td></tr></table></figure><p>查看路径和php版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">php -v </span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>安装nginx yum源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>然后安装nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>然后，启动下试试？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>访问http://你的ip/ 如果成功安装会出来nginx默认的欢迎界面</p><p>没成功就检查下端口是否可以访问 ,虚拟机可以直接干掉防火墙</p><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p>下载文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure><p>开始安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>这个比较快，装好开始运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>加入开机自启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld </span><br></pre></td></tr></table></figure><p>查看默认密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>登陆修改密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_34_176_centos ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.21</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;Xx..XXXX&#x27;);</span><br><span class="line">#密码不能太简单</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">Bye</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装swoole"><a href="#安装swoole" class="headerlink" title="安装swoole"></a>安装swoole</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pecl install swoole</span><br><span class="line">#添加到php.ini</span><br><span class="line">cd /etc</span><br><span class="line">vi php.ini</span><br><span class="line">extension=swoole.so</span><br></pre></td></tr></table></figure><p><em><font color=red>注：</font></em><br>安装好PHP后复制ini文件是因为编译时指定了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-config-file-path=/usr/local/php/etc \</span><br></pre></td></tr></table></figure><p>如果不复制的话也一样能够运行php，但是就无法装扩展了，踩坑千百遍终有一疏，装完swoole发现无法加载，最后查到时这里的问题。</p><p><img src="/images/swoole.png" alt="swoole"></p><p>打完收工，一个不小心又搞到凌晨一点，感觉头上凉凉哒~</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo多设备支持</title>
      <link href="/2018/02/26/hexo-new-pc/"/>
      <url>/2018/02/26/hexo-new-pc/</url>
      
        <content type="html"><![CDATA[<p>测试时未知原因，markdown格式的图片标签无法识别，只能用下边hexo推荐的标签。<br>各种尝试，最后推掉重来，好了。</p><p>mmp，可能是中间有什么步骤没做好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><p>多设备什么的把源码丢在.io的分支上就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init   #初始化本地仓库</span><br><span class="line">git add .  #添加文件</span><br><span class="line">git commit -m &quot;Blog Source Hexo&quot;</span><br><span class="line">git branch hexo  #新建hexo分支</span><br><span class="line">git checkout hexo  #切换到hexo分支上</span><br><span class="line">git remote add origin git@github.com:yourname/yourname.github.io.git  #将本地与Github项目对接</span><br><span class="line">git push origin hexo  #push到Github项目的hexo分支上</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%88%AA%E5%9B%BE.png" alt="效果图"></p><p>别的设备只需要拉下代码，然后切换下分支，再执行下 “npm install” 就可以愉快的玩耍了。</p><p>后来测试下把源码放在码云也可以的，为了安全起见，把源码放在码云的私有项目去了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建私有仓库</span><br><span class="line">克隆到本地</span><br><span class="line">然后把博客源文件丢进去</span><br><span class="line">提交</span><br><span class="line">搞定</span><br></pre></td></tr></table></figure><p><img src="/images/x.gif" alt="test"></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐，祝大家狗年旺旺旺</title>
      <link href="/2018/02/15/year-of-dog/"/>
      <url>/2018/02/15/year-of-dog/</url>
      
        <content type="html"><![CDATA[<p>一晚上的火车，再加上3个小时的大巴，总算是在年前赶回了家。</p><p>看着周围熟悉的环境，听着亲切万分的乡音，瞬间觉得，这一路的折腾也没什么大不了的。</p><p>可能这就是“家”所赋予“年”的特殊力量吧。</p><p>忐忐忑忑的本命年，终于在今天画上了句号。</p><p>回头想想，又特么一如既往地穷了一年。不过，这些在今天看来，似乎都不太重要了，重要的是老子畏畏缩缩的过了本命年，明天又可以继续开始浪~</p><p>哈哈哈哈哈……</p><p>2017”鸡”将结束，2018”犬”力以赴！！</p><p>祝大家新年快乐，狗年好合，哦不，狗年大吉，狗年旺旺旺！</p><p><img src="/images/2018.jpg" alt="大吉大利，今晚吃鸡"></p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openssl_pkey_get_private 内存泄漏</title>
      <link href="/2018/02/07/openssl-pkey-get-private/"/>
      <url>/2018/02/07/openssl-pkey-get-private/</url>
      
        <content type="html"><![CDATA[<p>从前，有一块使用 swoole_process 做多线程处理的程序，这个程序有一个奇怪的问题：每运行一个星期左右都会因为内存爆表而停掉。</p><p>因为爆表的时间关系，开发的小伙伴们都认为是这段使用 swoole_process 的程序有问题，几经更新改版，代码已经趋于完美，平稳的运行了几天后，小伙伴们终于都松了一口气，终于解决了这个问题。</p><p>然而，伴随着百年难遇的血月，这块程序还是在一个意想不到的时间又爆了一次，小伙伴们终于意识到，问题的根本并不在这里，想要找出并改掉这个问题，是何等艰难！但是他们知道，真相只有一个！</p><p>又经过几天的排查，凶手终于浮出水面！</p><p>呐，就是这孙子：openssl_pkey_get_private</p><p>抽出的测试代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">    $key = file_get_contents(&#x27;mock_A.pem&#x27;);</span><br><span class="line">echo $m=memory_get_usage(),PHP_EOL;</span><br><span class="line">$getkey = openssl_pkey_get_private($key, &#x27;&#x27;);</span><br><span class="line">openssl_pkey_free($getkey);</span><br><span class="line">echo $mm = memory_get_usage(),PHP_EOL;</span><br><span class="line">        echo &quot;Before unset:  &quot;,$mm-$m ,PHP_EOL;</span><br><span class="line">sleep(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/images/2018-02-08-07-30-12-5a7bfc84465bf.png" alt="运行结果"></p><p>审判结果：该阉的就赶紧阉了吧</p><p>行刑后长相：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$key = file_get_contents(&#x27;mock_A.pem&#x27;);</span><br><span class="line">$getkey = openssl_pkey_get_private($key, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">while(true)&#123;</span><br><span class="line">echo $m=memory_get_usage(),PHP_EOL;</span><br><span class="line">openssl_pkey_free($getkey);</span><br><span class="line">echo $mm = memory_get_usage(),PHP_EOL;</span><br><span class="line">        echo &quot;Before unset:  &quot;,$mm-$m ,PHP_EOL;</span><br><span class="line">sleep(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前线专家点评：纯属冤案，哪儿特么这么容易泄漏，都是因为自己写的不规范！</p><p>注：生成公私钥是需要消耗内存的，每次脚本执行结束后会释放掉，但是常驻内存的脚本没有释放的机会，所以每次循环调用都会造成内存增加，持续增加到一定量后系统也就崩了。<br>所以解决办法是在循环开始之前就把密钥生成好。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> openssl </tag>
            
            <tag> swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel5.4疑难杂症</title>
      <link href="/2018/01/04/laravel-5-4-bug/"/>
      <url>/2018/01/04/laravel-5-4-bug/</url>
      
        <content type="html"><![CDATA[<p>公司项目最近翻新了页面，把 bootstrap 完全改成了 layui 。</p><p><img src="/images/laravel.jpg"><br>按照惯例，上线之前先在测试环境跑几天，结果在搭建测试环境的时候，问题就出来了：</p><p>laravel 版本是 5.4.63 ，服务器的 php 版本是 5.6 ，执行 composer install 时，提示我需要 php7.1 。</p><p>吓得我一阵懵逼，难道是什么时候装错扩展了？</p><p>把 composer.json 里没什么用的扩展完全去除后再试，结果还是一样。</p><p>反复折腾无果，想起还有 update 可以用，遂改为执行 composer update ，终于开始安装了。</p><p>小样，还治不了你了！容老夫抽根烟得瑟一下。</p><p>下一秒，一个新的报错又砸我个措手不及：<br><img src="/images/error.png" alt="错误信息"></p><p>class ‘’ not found !</p><p>虽然不知道这个报错是咋回事，但是潜意识觉得应该是某个 Kernel 文件出错了。</p><p>找到一份之前的备份，一通对比，终于有所发现：<br><img src="/images/2018-01-05-03-03-33-5a4eeb050862d.png" alt="对比结果"></p><p>出错的代码比之前正常的代码多了个 “，”，丫的，太粗糙了！</p><p>去掉，再次执行 update ，果然一路畅通无阻。</p><p>但是那个该死的 install 是再也没回来。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layim模块化右键菜单</title>
      <link href="/2017/12/27/Layim-contextmenu/"/>
      <url>/2017/12/27/Layim-contextmenu/</url>
      
        <content type="html"><![CDATA[<p>一直觉得社区那群“先驱”搞的右键菜单要么太丑，要么风格不统一，很难受。</p><p>这两天仔细看了看心姐的源码，把历史消息里的右键菜单揪出来改了一把，感觉很良好。</p><p>演示地址已挂，请在本地搭建后测试。</p><p>调用方法，先引用上边暴露出来的方法，然后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">layim.on(&#x27;ready&#x27;, function (options) &#123;</span><br><span class="line">    $(&quot;.layim-list-friend &gt;li &gt; ul &gt; li&quot;).menu(&#123;</span><br><span class="line">        menu: [&#123;</span><br><span class="line">                text: &quot;新增&quot;,</span><br><span class="line">                callback: function () &#123;</span><br><span class="line">                    alert(&quot;新增&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                text: &quot;复制&quot;,</span><br><span class="line">                callback: function () &#123;</span><br><span class="line">                    alert(&quot;复制&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                text: &quot;粘贴&quot;,</span><br><span class="line">                callback: function () &#123;</span><br><span class="line">                    alert(&quot;粘贴&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                text: &quot;删除&quot;,</span><br><span class="line">                callback: function () &#123;</span><br><span class="line">                    alert(&quot;删除&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码下载地址：<br><a href="https://gitee.com/M-finder/Layim-contextmenu">码云</a><br><a href="https://github.com/M-finder/Layim-contextmenu">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> layui </tag>
            
            <tag> layim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui使用备忘</title>
      <link href="/2017/12/22/Layui-notes/"/>
      <url>/2017/12/22/Layui-notes/</url>
      
        <content type="html"><![CDATA[<p>一个关于 form 渲染特殊用法的解决方案。<br><img src="/images/layui.png"></p><span id="more"></span><h3 id="需求"><a href="#需求" class="headerlink" title="需求 :"></a>需求 :</h3><p>项目中需要做一个带参导入功能 , 画面效果如下图:<br><img src="2017-11-16-10-48-47-5a0cfc8febf33.png" alt="效果图"></p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题 :"></a>遇到的问题 :</h3><ol><li>弹窗中 select 不显示</li><li>select 显示后 , 选中某项时无法把值传入后台</li></ol><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法 :"></a>解决办法 :</h3><ol><li>在弹窗的 success 中使用 form.render(‘select’) 重新渲染select</li><li>在弹窗的 success 中增加 select 切换事件监听 , 然后使用变量 uploader 承接 upload.render , 在监听到 select 切换时 , 使用 uploader.config.data = {‘asset_type’: data.value} 来更新 upload 中的 data 参数 , 最后再给 upload 增加 before 参数 , 来接收不切换 select 时的 data 值 .</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码 :"></a>代码 :</h3><p>html :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;importTpl&quot; type=&quot;text/html&quot;&gt;</span><br><span class="line">    &lt;form class=&quot;layui-form layui-form-pane &quot; method=&quot;POST&quot;  onsubmit=&quot;return false&quot; &gt;</span><br><span class="line">        &lt;div style=&quot;padding: 15px;width:400px;margin:0 auto;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot; &gt;</span><br><span class="line">                &lt;label class=&quot;layui-form-label&quot;&gt;导入文件类型&lt;/label&gt;</span><br><span class="line">                &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                    &lt;select name=&quot;asset_type&quot; id=&#x27;asset_type&#x27; lay-filter=&quot;asset_type&quot;&gt;</span><br><span class="line">                        &lt;option value=&quot;1&quot; selected&gt;个人贷款&lt;/option&gt;</span><br><span class="line">                        &lt;option value=&quot;4&quot;&gt;票据&lt;/option&gt;</span><br><span class="line">                    &lt;/select&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot; &gt;</span><br><span class="line">                &lt;button type=&quot;button&quot; class=&quot;layui-btn layui-btn-primary&quot; id=&quot;import&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;layui-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">                    选择文件</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;layui-row&quot; &gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn do-import layui-btn-danger &quot; type=&quot;button&quot;&gt;</span><br><span class="line">                    确定导入</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>javascript :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#asset-import&#x27;).click(function () &#123;</span><br><span class="line">    layer.open(&#123;</span><br><span class="line">        area: [&#x27;450px&#x27;, &#x27;250px&#x27;],</span><br><span class="line">        title: &#x27;项目导入&#x27;,</span><br><span class="line">        type: 1,</span><br><span class="line">        content: $(&#x27;#importTpl&#x27;).html(),</span><br><span class="line">        success: function (layero, index) &#123;</span><br><span class="line">            form.render(&#x27;select&#x27;);</span><br><span class="line"></span><br><span class="line">            form.on(&#x27;select&#x27;, function (data) &#123;</span><br><span class="line">                uploader.config.data = &#123;&#x27;asset_type&#x27;: data.value&#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">            var uploader = upload.render(&#123;</span><br><span class="line">                url: &#x27;/reg/asset-import&#x27;</span><br><span class="line">                , elem: &#x27;#import&#x27;</span><br><span class="line">                , accept: &#x27;file&#x27;</span><br><span class="line">                , auto: false</span><br><span class="line">                , bindAction: &#x27;.do-import&#x27;</span><br><span class="line">                , before: function (obj) &#123;</span><br><span class="line">                        uploader.config.data = &#123;&#x27;asset_type&#x27;: $(&#x27;#asset_type&#x27;).val()&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                , done: function (res) &#123;</span><br><span class="line">                    layer.close(index);</span><br><span class="line">                    if (res.code == 0) &#123;</span><br><span class="line">                        layer.msg(res.msg, &#123;icon: 1&#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        layer.alert(res.msg, &#123;icon: 2&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码备忘录</title>
      <link href="/2017/12/22/notes/"/>
      <url>/2017/12/22/notes/</url>
      
        <content type="html"><![CDATA[<p>杂七杂八大乱炖。</p><p><img src="/images/st.jpg"></p><span id="more"></span><h3 id="计算两个日期的差值"><a href="#计算两个日期的差值" class="headerlink" title="计算两个日期的差值"></a>计算两个日期的差值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$datetime1 = new DateTime(&#x27;2009-10-11&#x27;);  </span><br><span class="line">//new DateTime = date_create , 在某些框架中用 new DateTime 需要加 &#x27;\&#x27; ;</span><br><span class="line">$datetime2 = new DateTime(&#x27;2009-10-13&#x27;);  </span><br><span class="line">$interval = $datetime1-&gt;diff($datetime2);  </span><br><span class="line">echo $interval-&gt;format(&#x27;%R%a days&#x27;); </span><br></pre></td></tr></table></figure><h3 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$dir = iconv(&quot;UTF-8&quot;, &quot;GBK&quot;, &quot;C:/www/report/&quot;); //linux下可不转码</span><br><span class="line">if (!file_exists($dir))&#123;</span><br><span class="line">      mkdir ($dir,0755,true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ascii-码转换"><a href="#Ascii-码转换" class="headerlink" title="Ascii 码转换"></a>Ascii 码转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function stringFromColumnIndex($pColumnIndex = 0) &#123;</span><br><span class="line">    static $_indexCache = array();</span><br><span class="line">    if (!isset($_indexCache[$pColumnIndex])) &#123;</span><br><span class="line">        // Determine column string</span><br><span class="line">        if ($pColumnIndex &lt; 26) &#123;</span><br><span class="line">            $_indexCache[$pColumnIndex] = chr(65 + $pColumnIndex);</span><br><span class="line">        &#125; elseif ($pColumnIndex &lt; 702) &#123;</span><br><span class="line">            $_indexCache[$pColumnIndex] = chr(64 + ($pColumnIndex / 26)) .</span><br><span class="line">                    chr(65 + $pColumnIndex % 26);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $_indexCache[$pColumnIndex] = chr(64 + (($pColumnIndex - 26) / 676)) . chr(65 + ((($pColumnIndex - 26) % 676) / 26)) . chr(65 + $pColumnIndex % 26);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $_indexCache[$pColumnIndex];</span><br><span class="line">&#125;</span><br><span class="line">echo stringFromColumnIndex(37);</span><br></pre></td></tr></table></figure><h3 id="计算时间过去了多久-天-时-分-秒"><a href="#计算时间过去了多久-天-时-分-秒" class="headerlink" title="计算时间过去了多久 天\时\分\秒"></a>计算时间过去了多久 天\时\分\秒</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function secsToStr($secs) &#123;</span><br><span class="line">    $r = &#x27;&#x27;;</span><br><span class="line">    if ($secs &gt;= 86400) &#123;</span><br><span class="line">        $days = floor($secs / 86400);</span><br><span class="line">        $secs = $secs % 86400;</span><br><span class="line">        $r = $days . &#x27; 天&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($secs &gt;= 3600) &#123;</span><br><span class="line">        $hours = floor($secs / 3600);</span><br><span class="line">        $secs = $secs % 3600;</span><br><span class="line">        $r .= $hours . &#x27; 小时&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($secs &gt;= 60) &#123;</span><br><span class="line">        $minutes = floor($secs / 60);</span><br><span class="line">        $secs = $secs % 60;</span><br><span class="line">        $r .= $minutes . &#x27; 分钟&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    $r .= $secs . &#x27; 秒&#x27;;</span><br><span class="line">    return $r;</span><br><span class="line">&#125;</span><br><span class="line">echo secsToStr(545517.1111111111);</span><br></pre></td></tr></table></figure><h3 id="win10-配置-pthreads-多线程扩展"><a href="#win10-配置-pthreads-多线程扩展" class="headerlink" title="win10 配置 pthreads 多线程扩展"></a>win10 配置 pthreads 多线程扩展</h3><p>pthreads 只支持 ts 版本的 php , 即线程安全版</p><p>phpstudy 自定义版本时总在报错 , 所以换了 xmapp</p><p>pthreads 下载地址 : <a href="http://windows.php.net/downloads/pecl/releases/pthreads/">没错，点我</a></p><p>要对应版本号和位数  位数以 php 的为准</p><p>下载解压后 , 把 php_pthreads.dll 和  pthreadVC2.dll 复制到 php\ext 下边</p><p>php.ini 最后边新增 : extension=php_pthreads.dll</p><p>然后再复制一个 pthreadVC2.dll 到系统目录</p><p>系统为 32 位的就复制进 C:\Windows\System32</p><p>64 位的就复制进 C:\Windows\SysWOW64</p><p>重启 xmapp , 新建一个 test.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class AsyncOperation extends \Thread &#123;</span><br><span class="line">    public function __construct($arg)&#123;</span><br><span class="line">        $this-&gt;arg = $arg;</span><br><span class="line">    &#125;</span><br><span class="line">    public function run()&#123;</span><br><span class="line">        if($this-&gt;arg)&#123;</span><br><span class="line">            printf(&quot;Hello %s\n&quot;, $this-&gt;arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$thread = new AsyncOperation(&quot;World&quot;);</span><br><span class="line"></span><br><span class="line">if($thread-&gt;start())&#123;</span><br><span class="line">    $thread-&gt;join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 url 访问 test 文件 , 出现 Hello World 就成功了</p><p>或者查看 phpinfo 里边有没有 pthreads 扩展</p><h3 id="Js调用系统桌面通知"><a href="#Js调用系统桌面通知" class="headerlink" title="Js调用系统桌面通知:"></a>Js调用系统桌面通知:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (window.Notification &amp;&amp; Notification.permission !== &quot;denied&quot;) &#123;</span><br><span class="line">Notification.requestPermission(function (status) &#123;</span><br><span class="line">var n = new Notification(&quot;sir, you got a message&quot;, &#123;</span><br><span class="line">icon: &#x27;/img/logo.png&#x27;,</span><br><span class="line">body: &#x27;you will have a meeting 5 minutes later.&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js声音提醒"><a href="#js声音提醒" class="headerlink" title="js声音提醒"></a>js声音提醒</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">audioElementHovertree = document.createElement(&#x27;audio&#x27;);  </span><br><span class="line">audioElementHovertree.setAttribute(&#x27;src&#x27;, &#x27;http://w.qq.com/audio/classic.mp3&#x27;);  </span><br><span class="line">audioElementHovertree.setAttribute(&#x27;autoplay&#x27;, &#x27;autoplay&#x27;);</span><br></pre></td></tr></table></figure><h3 id="数据分配："><a href="#数据分配：" class="headerlink" title="数据分配："></a>数据分配：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$max_worker_num = 30;</span><br><span class="line">$data_num = 74;</span><br><span class="line"></span><br><span class="line">if ($data_num == 0) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ($i = 0; $i &lt; $data_num; $i++) &#123;</span><br><span class="line">$data[$i] = $i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$min_worker_num = min($data_num, $max_worker_num);</span><br><span class="line"></span><br><span class="line">$data_arr = array_chunk($data, ceil($data_num / $min_worker_num), true);</span><br><span class="line"></span><br><span class="line">$worker_num = ceil($data_num / ceil($data_num / $min_worker_num));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 使用笔记</title>
      <link href="/2017/12/22/laravel-notes/"/>
      <url>/2017/12/22/laravel-notes/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/laravel.jpg"></p><span id="more"></span><p>先从最简单的开始：</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>laravel 的安装需要借助 composer ，百度一下，安装，然后去 GitHub 下载 laravel</p><p>切换到项目文件夹 ，在不选中任何文件的前提下按住 shift + 鼠标右键，打开 Powershell 或者 cmd</p><p>输入：composer install </p><p>将 .env.example 另存为 .env</p><p>修改数据库配置信息和邮件系统配置信息</p><p>然后在命令行输入：php artisan key:generate 生成密钥</p><p>然后配置一个本地域名指向 public 文件夹，然后，就好了。[哈哈] </p><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><p>邮件系统配置示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MAIL_DRIVER=smtp</span><br><span class="line">MAIL_HOST=smtp.mxhichina.com</span><br><span class="line">MAIL_PORT=25//465</span><br><span class="line">MAIL_USERNAME=m@m-finder</span><br><span class="line">MAIL_PASSWORD=邮箱密码</span><br><span class="line">MAIL_FROM_NAME=M-finder</span><br><span class="line">MAIL_FROM_ADDRESS=m@m-finder</span><br><span class="line">MAIL_ENCRYPTION=null//ssl #如果用465端口的话，需要参数 MAIL_ENCRYPTION=ssl</span><br></pre></td></tr></table></figure><p>邮件有 3 种模式（可能更多，暂时只接触到3种）:<br>一种用 Mail::send 方法<br>一种用 Mail::raw<br>另外一种则是官方文档中的，新建一个类，然后发送邮件时实例化这个类。3 种方法实现的功能一样。<br>Mail::send</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mail::send(&#x27;admin.email&#x27;, [&#x27;orderPrice&#x27; =&gt; &#x27;laravel&#x27;], function ($message) &#123;</span><br><span class="line">    $message-&gt;to(&#x27;m@m-finder&#x27;);</span><br><span class="line">    $message-&gt;subject(&#x27;我是自定义标题&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个方法第一个参数为视图文件，视图文件的用法等同于普通视图，第二个参数为视图中所用到的数据<br>Mail::raw</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$content = &#x27;这是一封来自Laravel的测试邮件.&#x27;;</span><br><span class="line">$toMail = &#x27;m@m-finder&#x27;;</span><br><span class="line">        </span><br><span class="line"> Mail::raw($content, function ($message) use ($toMail) &#123;</span><br><span class="line">$message-&gt;subject(&#x27;[ 测试 ] 测试邮件SendMail - &#x27; . date(&#x27;Y-m-d H:i:s&#x27;));</span><br><span class="line">$message-&gt;to($toMail);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>基本等同于Mail::send</p><p>第三种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller MailController</span><br><span class="line"></span><br><span class="line">php artisan make:mail OrderShipped</span><br><span class="line"></span><br><span class="line">在 OrderShipped 增加内容</span><br><span class="line"></span><br><span class="line">return $this-&gt;view(&#x27;admin.email&#x27;)-&gt;with([</span><br><span class="line">            &#x27;orderName&#x27; =&gt; &#x27;test&#x27;,</span><br><span class="line">            &#x27;orderPrice&#x27; =&gt; 1500,</span><br><span class="line"> ]);</span><br></pre></td></tr></table></figure><p>然后在要发送邮件的方法中调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mail::to(&#x27;m@m-finder&#x27;)-&gt;send(new OrderShipped());</span><br></pre></td></tr></table></figure><p>开放路由，访问下就可以了。</p><p>如果需要自定义邮件标题，可以试一下以下方法（未测试）：</p><p>在你的类中定义一个subject变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public $subject = &#x27;这里是邮件自定义标题&#x27;;</span><br></pre></td></tr></table></figure><p>或者在你的view后跟一个subject方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view(&#x27;emails.activate-user&#x27;)-&gt;subject(&#x27;这里定义邮件标题&#x27;)；</span><br></pre></td></tr></table></figure><h3 id="多视图共享数据"><a href="#多视图共享数据" class="headerlink" title="多视图共享数据"></a>多视图共享数据</h3><p>在 app\Providers 文件夹下 boot() 方法中写入要共享的数据即可 , 例如 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public function boot() &#123;</span><br><span class="line">$links = Link::orderBy(&#x27;id&#x27;, &#x27;desc&#x27;)-&gt;get();</span><br><span class="line">$web_info = SysConfig::first();</span><br><span class="line">$menus =  Menu::select(&#x27;id&#x27;, &#x27;name&#x27;, &#x27;type&#x27;, &#x27;seo_title&#x27;, &#x27;seo_describe&#x27;, &#x27;link&#x27;)</span><br><span class="line">        -&gt;where(&#x27;pid&#x27;, &#x27;=&#x27;, 0)</span><br><span class="line">        -&gt;where(&#x27;is_show&#x27;, &#x27;=&#x27;, &#x27;2&#x27;)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">view()-&gt;share(&#x27;links&#x27;, $links);</span><br><span class="line">view()-&gt;share(&#x27;web_info&#x27;, $web_info);</span><br><span class="line">view()-&gt;share(&#x27;menus&#x27;, $menus);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写完以后，你会发现你的 migrate 挂了，哈哈 ，解决办法是使用闭包，即 composer 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public function boot() &#123;</span><br><span class="line">        Schema::defaultStringLength(191); //解决数据库版本过低无法执行 migrate</span><br><span class="line"></span><br><span class="line">        view()-&gt;composer([&#x27;layouts.home&#x27;, &#x27;layouts.userhome&#x27;,&#x27;layouts.admin&#x27;], function($view) &#123;</span><br><span class="line">            $links = Link::orderBy(&#x27;id&#x27;, &#x27;desc&#x27;)-&gt;get();</span><br><span class="line">            $web_info = SysConfig::first();</span><br><span class="line">            $menus = Menu::select(&#x27;id&#x27;, &#x27;name&#x27;, &#x27;type&#x27;, &#x27;seo_title&#x27;, &#x27;seo_describe&#x27;, &#x27;link&#x27;)</span><br><span class="line">            -&gt;where(&#x27;pid&#x27;, &#x27;=&#x27;, 0)</span><br><span class="line">            -&gt;where(&#x27;is_show&#x27;, &#x27;=&#x27;, &#x27;2&#x27;)</span><br><span class="line">            -&gt;get();</span><br><span class="line">            $view-&gt;with([&#x27;links&#x27; =&gt; $links, &#x27;web_info&#x27; =&gt; $web_info, &#x27;menus&#x27; =&gt; $menus]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>config 文件夹下有一个 filesystems.php，里边是默认的上传地址，可以根据自己的需要做修改或者添加</p><p>上传的控制器代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if ($file-&gt;isValid()) &#123;</span><br><span class="line">if ($file-&gt;getClientSize() &gt; 2097152) &#123;</span><br><span class="line">return $this-&gt;json_response(1, &quot;请上传小于 2 mb 的图片&quot;, 0);</span><br><span class="line">&#125;</span><br><span class="line">$ext = $file-&gt;getClientOriginalExtension();</span><br><span class="line">$realPath = $file-&gt;getRealPath();</span><br><span class="line">$type = $file-&gt;getClientMimeType();</span><br><span class="line">$filename = date(&#x27;Y-m-d-H-i-s&#x27;) . &#x27;-&#x27; . uniqid() . &#x27;.&#x27; . $ext;</span><br><span class="line">$bool = Storage::disk($path)-&gt;put($filename, file_get_contents($realPath));</span><br><span class="line">$url = Storage::disk($path)-&gt;url($filename);</span><br><span class="line">if ($filename) &#123;</span><br><span class="line">return [&#x27;code&#x27; =&gt; 0, &#x27;msg&#x27; =&gt; &#x27;&#x27;, &#x27;src&#x27; =&gt; $url, </span><br><span class="line">                 &#x27;data&#x27;=&gt;[&#x27;src&#x27;=&gt;$url,&#x27;title&#x27;=&gt;$filename]]; </span><br><span class="line">         //&#123;&quot;code&quot;: 0 ,&quot;msg&quot;: &quot;&quot; ,&quot;data&quot;: &#123;&quot;src&quot;: &quot;图片路径&quot;,&quot;title&quot;: &quot;图片名称&quot;&#125;  layui 图片上传接口</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问上传到本地的文件资源，需要先创建一个软连接：php artisan storage:link</p><p>一个页面中，如果有 ajax 调取数据的，可以把 ajax 使用的路由和页面的路由名称定义为同一个，不同的是页面是 get ，ajax 是 post</p><h3 id="自定义404页面"><a href="#自定义404页面" class="headerlink" title="自定义404页面"></a>自定义404页面</h3><p>在 app\Exceptions文件夹下的Hander中有个render方法，改造一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public function render($request, Exception $exception)&#123;</span><br><span class="line"></span><br><span class="line">    if ($exception instanceof ModelNotFoundException) &#123;</span><br><span class="line">        $exception = new NotFoundHttpException($exception-&gt;getMessage(), $exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ( ! config(&#x27;app.debug&#x27;)) &#123;</span><br><span class="line">        return response()-&gt;view(&#x27;errors.500&#x27;, [], 500);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return parent::render($request, $exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在views文件夹新建error文件夹和对应错误代码的blade文件。</p>]]></content>
      
      
      <categories>
          
          <category> 码不能停 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吃货就该走到哪儿吃到哪儿</title>
      <link href="/2017/03/28/eat-more/"/>
      <url>/2017/03/28/eat-more/</url>
      
        <content type="html"><![CDATA[<p>1号去4号回，武汉三日游。哈哈哈~</p><p><img src="/images/%E7%A7%8B%E6%B0%B4%E9%95%BF%E5%A4%A9.jpg"></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以下内容写自武汉游回来。 --2017年04月08 </span><br></pre></td></tr></table></figure><p>从4年前开始，就一直怀揣着一个梦，想要多出去走走。</p><p>年轻嘛，心里难免躁动。</p><p>在准备了一年多后，终于开始了第一次出行，和我好基友逗斌，目标拉萨。</p><p>说是准备，其实也就是看看攻略，心里大概有了点儿都要去哪儿玩，需要准备什么东西的逼数。</p><p>到了要去了，又发现我做的准备根本就行不通，因为时间只有一周，而我之前看的全是徒步。</p><p>这也有点儿太逗逼了，而且那时美团也不会用，住房什么的也不会定，最后还是斌子在贴吧上找的，出行计划也是斌子做的。</p><p>而我，又简单的扒拉了两篇攻略，凭着一股子250 plus的愣劲儿，就硬生生的窃取并享受了斌子的劳动成果。</p><p>38小时的硬座和不断增高的海拔简直是种折磨，好在沿途的风景真的很美，咬咬牙也就撑过去了。</p><p>那时候没什么钱，（现在也没什么钱）也不会拍照，更重要的一点是还不会玩！</p><p>现在想想，有点儿对不住去一趟的折腾。</p><p>去的这几天，尝了尝藏面、青稞面、酥油茶，去的都是不起眼的藏族小馆子，应该挺正宗。</p><p>还在布宫前边吃了冻奶还是啥的，不过挺坑爹，就是个小雪糕。</p><p>玩的地方不多，去了趟布宫，因为没提前订票，也就在外边广场转转，然后跑去八廓街逛了逛，买了串散的菩提珠子，又跟去时遇到的冲哥燕姐一起去玛吉阿米西餐厅奢侈了一把，喝了壶青稞酒，吃了好多带点儿藏族色彩的“西餐”。当时好像有个什么展览在博物馆，所以就走过去看了看。</p><p>哦，还有拉萨河，当时其实想去西藏大学来着，被门卫拦了。</p><p>回来的前一天晚上，琢磨着不能就这么走了呀，又打车去了趟布宫，沿着布宫走了一圈，一边走一边聊理想、聊未来，也乐在其中。当时还遇到个弹吉他的胖哥哥，斌子录了视频在微博，好听极了。</p><p>可能我就是从那儿回来后，开始喜欢听民谣的。</p><p>当年录的视频地址：<a href="http://t.cn/RhkI899/">This link</a></p><p>回来的火车上，围着我和斌子一圈都是老乡，两女一男，再加上我们俩。</p><p>那老哥30来岁，一路狂飚装逼模式，说他爬了珠峰，带下来一桶珠峰雪水，去了阿里转了山、请了愿等等等等。</p><p>期间对我和斌子冷嘲热讽，我琢磨着他这么不遗余力可能是因为两点，一是想在俩妹子面前显摆，因为他一直说要不是结婚了，非要把其中一个妹子给收了不成，二是见我们俩才20出头，啥都没有就敢去西藏，而他却等到30才敢动身，嫉妒！</p><p>被人冷嘲热讽了一路，我照单全收了，因为我觉得多听听人家怎么玩的也算是种成长吧，现在想想，也确实是种成长。</p><p>这两张是我拍的，并不懂构图什么的，只能瞎拍着玩玩。<br><img src="/images/cloud.jpg" alt="藏区的白云"><br><img src="/images/mou.jpg" alt="牦牛"></p><p>这张是逗斌拍的，美不胜收，但是绝对是瞎猫碰上死耗子！<br><img src="/images/%E7%A7%8B%E6%B0%B4%E9%95%BF%E5%A4%A9.jpg" alt="秋水长天"></p><p>回来前一夜拍的布宫夜景。<br><img src="/images/%E5%B8%83%E5%AE%AB%E5%A4%9C%E6%99%AF1.jpg" alt="布宫夜景"><br><img src="/images/%E5%B8%83%E5%AE%AB%E5%A4%9C%E6%99%AF2.jpg" alt="布宫夜景"></p><p>去布宫是带着使命去的，大学两年了，觉得自己一无是处，整天浑浑噩噩，什么也学不会，什么也都不想学，都说去拉萨是趟净化心灵之旅，我信了。</p><p>可能也真的管用了吧。因为后来的两年大学生活也算是没有白费。</p><p>在学校时，去了好多趟吴江，都是学校组织的暑假打工和实习。</p><p>吴江有个同里古镇，离厂区不远。</p><p>但是去了几趟吴江，一直都没过去，人太懒，也觉得这么多人都起着哄过去，俗不俗啊，哥可是去拉萨的人。</p><p>最后一年实习，逗斌坐不住了，去了这么多趟，江苏有名的白鱼白虾和银鱼是啥味儿还没尝过，这边这么多好吃的也都不知道什么味儿呢。</p><p>这实习过就要毕业了，以后再来可不知道是哪一年。</p><p>就这么在斌子的“敦促”下，大家伙一商量，去了，晚上在同里吃了个“夜市”吧，还挺有感觉。</p><p>再加上吃货女朋友的“调教”，我心里就开始琢磨着，既然想要多出去转转，那为啥不能去一个地方，就先把那地方好吃的都给尝尝呢。</p><p>吃货的种子就是这么根深蒂固的。</p><p>那天晚上的氛围很美，我想我应该会记到老。<br><img src="/images/%E8%A5%BF%E7%93%9C.jpg" alt="西瓜"></p><p>后来女朋友考到新乡，先是偷偷摸摸的查了查，发现也没什么特别好吃的，也就没怎么注意。</p><p>去万仙山爬山时啥也没吃到，倒是在她们学校门口吃了不少好吃的，遗憾的是都是外来的，没有新乡特色。</p><p>清明节计划着去武汉，提前查了查都有什么好吃的，以及有哪些出名的小吃街，因为时间关系，最后就决定去趟户部巷就行了，有什么好吃的应该也能吃个遍了。</p><p>想不到的是，到户部巷一去就收不住了，仅着没吃过的，从早上10点吃到中午有俩小时吧，晚上要去长江大桥看看夜景，结果到了发现走错了，爬到了大桥上，去江边要从户部巷穿过去，然后理所当然的又吃了一次。</p><p>不得不说，好吃的太多了，要不是钱不够，我非得一样不落地从街头吃到街尾。<br><img src="/images/%E6%8E%92%E9%AA%A8.jpg" alt="排骨"><br><img src="/images/%E8%BF%98%E6%98%AF%E6%8E%92%E9%AA%A8.jpg" alt="还是排骨"></p><p>最后一天要回来时，买的武昌站晚上的车票，中午过去就去辛亥革命纪念馆转了转，但是一个没忍住，3刷了户部巷。</p><p>我现在深深的后悔没去昙华林啊吉庆街啊什么的！</p><p>烧卖，那家店的招牌上写的是烧梅。<br><img src="/images/%E7%83%A7%E5%8D%96.jpg" alt="烧卖"></p><p>吃到一半才想起来要拍照的猪蹄，好吃极了，我以后会爱上吃猪蹄。<br><img src="/images/%E7%8C%AA%E8%B9%84.jpg" alt="猪蹄"></p><p>长沙的臭豆腐，我也搞不懂为啥这里卖的也这么多，还有很多照片，就不放了，一张张的看过去对我太残忍……<br><img src="/images/%E8%87%AD%E8%B1%86%E8%85%90.jpg" alt="臭豆腐"></p><p>我也算是在吃的路上一去不返了，刚才跟另一个好基友聊天，说等我去上海了请我吃拉面（在吴江打工的期间，我喜欢上了吃拉面），我说我要先去逛吃逛吃逛吃，基友给我发了下边的表情，白眼可不可以收起来嘛……</p><p>年轻人就该多转转，年轻的吃货更应该走到哪儿吃到哪儿！</p>]]></content>
      
      
      <categories>
          
          <category> 闲言赘语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲言赘语 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
